
prototypV2_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  0800cda8  0800cda8  0001cda8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d370  0800d370  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800d370  0800d370  0001d370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d378  0800d378  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d378  0800d378  0001d378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d37c  0800d37c  0001d37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800d380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000865c  20000014  0800d394  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008670  0800d394  00028670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021f8d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049bd  00000000  00000000  00041fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c30  00000000  00000000  00046990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a70  00000000  00000000  000485c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a99a  00000000  00000000  0004a030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000218b8  00000000  00000000  000649ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d661  00000000  00000000  00086282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001238e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007910  00000000  00000000  00123934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cd90 	.word	0x0800cd90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	0800cd90 	.word	0x0800cd90

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_d2uiz>:
 8000adc:	004a      	lsls	r2, r1, #1
 8000ade:	d211      	bcs.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae4:	d211      	bcs.n	8000b0a <__aeabi_d2uiz+0x2e>
 8000ae6:	d50d      	bpl.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d40e      	bmi.n	8000b10 <__aeabi_d2uiz+0x34>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_d2uiz+0x3a>
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b974 	b.w	8000ebc <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	468e      	mov	lr, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14d      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4694      	mov	ip, r2
 8000bfe:	d969      	bls.n	8000cd4 <__udivmoddi4+0xe8>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b152      	cbz	r2, 8000c1c <__udivmoddi4+0x30>
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	f1c2 0120 	rsb	r1, r2, #32
 8000c0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c16:	ea41 0e03 	orr.w	lr, r1, r3
 8000c1a:	4094      	lsls	r4, r2
 8000c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c20:	0c21      	lsrs	r1, r4, #16
 8000c22:	fbbe f6f8 	udiv	r6, lr, r8
 8000c26:	fa1f f78c 	uxth.w	r7, ip
 8000c2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c32:	fb06 f107 	mul.w	r1, r6, r7
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c42:	f080 811f 	bcs.w	8000e84 <__udivmoddi4+0x298>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 811c 	bls.w	8000e84 <__udivmoddi4+0x298>
 8000c4c:	3e02      	subs	r6, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a5b      	subs	r3, r3, r1
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c58:	fb08 3310 	mls	r3, r8, r0, r3
 8000c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c60:	fb00 f707 	mul.w	r7, r0, r7
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	d90a      	bls.n	8000c7e <__udivmoddi4+0x92>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c70:	f080 810a 	bcs.w	8000e88 <__udivmoddi4+0x29c>
 8000c74:	42a7      	cmp	r7, r4
 8000c76:	f240 8107 	bls.w	8000e88 <__udivmoddi4+0x29c>
 8000c7a:	4464      	add	r4, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c82:	1be4      	subs	r4, r4, r7
 8000c84:	2600      	movs	r6, #0
 8000c86:	b11d      	cbz	r5, 8000c90 <__udivmoddi4+0xa4>
 8000c88:	40d4      	lsrs	r4, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d909      	bls.n	8000cae <__udivmoddi4+0xc2>
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	f000 80ef 	beq.w	8000e7e <__udivmoddi4+0x292>
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	fab3 f683 	clz	r6, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d14a      	bne.n	8000d4c <__udivmoddi4+0x160>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xd4>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80f9 	bhi.w	8000eb2 <__udivmoddi4+0x2c6>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	469e      	mov	lr, r3
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e0      	beq.n	8000c90 <__udivmoddi4+0xa4>
 8000cce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cd2:	e7dd      	b.n	8000c90 <__udivmoddi4+0xa4>
 8000cd4:	b902      	cbnz	r2, 8000cd8 <__udivmoddi4+0xec>
 8000cd6:	deff      	udf	#255	; 0xff
 8000cd8:	fab2 f282 	clz	r2, r2
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	f040 8092 	bne.w	8000e06 <__udivmoddi4+0x21a>
 8000ce2:	eba1 010c 	sub.w	r1, r1, ip
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	2601      	movs	r6, #1
 8000cf0:	0c20      	lsrs	r0, r4, #16
 8000cf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfe:	fb0e f003 	mul.w	r0, lr, r3
 8000d02:	4288      	cmp	r0, r1
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x12c>
 8000d06:	eb1c 0101 	adds.w	r1, ip, r1
 8000d0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x12a>
 8000d10:	4288      	cmp	r0, r1
 8000d12:	f200 80cb 	bhi.w	8000eac <__udivmoddi4+0x2c0>
 8000d16:	4643      	mov	r3, r8
 8000d18:	1a09      	subs	r1, r1, r0
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d20:	fb07 1110 	mls	r1, r7, r0, r1
 8000d24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d28:	fb0e fe00 	mul.w	lr, lr, r0
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x156>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x154>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f200 80bb 	bhi.w	8000eb6 <__udivmoddi4+0x2ca>
 8000d40:	4608      	mov	r0, r1
 8000d42:	eba4 040e 	sub.w	r4, r4, lr
 8000d46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d4a:	e79c      	b.n	8000c86 <__udivmoddi4+0x9a>
 8000d4c:	f1c6 0720 	rsb	r7, r6, #32
 8000d50:	40b3      	lsls	r3, r6
 8000d52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d62:	431c      	orrs	r4, r3
 8000d64:	40f9      	lsrs	r1, r7
 8000d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d72:	0c20      	lsrs	r0, r4, #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fb09 1118 	mls	r1, r9, r8, r1
 8000d7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d80:	fb08 f00e 	mul.w	r0, r8, lr
 8000d84:	4288      	cmp	r0, r1
 8000d86:	fa02 f206 	lsl.w	r2, r2, r6
 8000d8a:	d90b      	bls.n	8000da4 <__udivmoddi4+0x1b8>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d94:	f080 8088 	bcs.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	f240 8085 	bls.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000da2:	4461      	add	r1, ip
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dac:	fb09 1110 	mls	r1, r9, r0, r1
 8000db0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	458e      	cmp	lr, r1
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x1e2>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc4:	d26c      	bcs.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dc6:	458e      	cmp	lr, r1
 8000dc8:	d96a      	bls.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dca:	3802      	subs	r0, #2
 8000dcc:	4461      	add	r1, ip
 8000dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd6:	eba1 010e 	sub.w	r1, r1, lr
 8000dda:	42a1      	cmp	r1, r4
 8000ddc:	46c8      	mov	r8, r9
 8000dde:	46a6      	mov	lr, r4
 8000de0:	d356      	bcc.n	8000e90 <__udivmoddi4+0x2a4>
 8000de2:	d053      	beq.n	8000e8c <__udivmoddi4+0x2a0>
 8000de4:	b15d      	cbz	r5, 8000dfe <__udivmoddi4+0x212>
 8000de6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dea:	eb61 010e 	sbc.w	r1, r1, lr
 8000dee:	fa01 f707 	lsl.w	r7, r1, r7
 8000df2:	fa22 f306 	lsr.w	r3, r2, r6
 8000df6:	40f1      	lsrs	r1, r6
 8000df8:	431f      	orrs	r7, r3
 8000dfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfe:	2600      	movs	r6, #0
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	f1c2 0320 	rsb	r3, r2, #32
 8000e0a:	40d8      	lsrs	r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa21 f303 	lsr.w	r3, r1, r3
 8000e14:	4091      	lsls	r1, r2
 8000e16:	4301      	orrs	r1, r0
 8000e18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1c:	fa1f fe8c 	uxth.w	lr, ip
 8000e20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e24:	fb07 3610 	mls	r6, r7, r0, r3
 8000e28:	0c0b      	lsrs	r3, r1, #16
 8000e2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e32:	429e      	cmp	r6, r3
 8000e34:	fa04 f402 	lsl.w	r4, r4, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x260>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e42:	d22f      	bcs.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e44:	429e      	cmp	r6, r3
 8000e46:	d92d      	bls.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1b9b      	subs	r3, r3, r6
 8000e4e:	b289      	uxth	r1, r1
 8000e50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e54:	fb07 3316 	mls	r3, r7, r6, r3
 8000e58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x28a>
 8000e64:	eb1c 0101 	adds.w	r1, ip, r1
 8000e68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e6c:	d216      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d914      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e72:	3e02      	subs	r6, #2
 8000e74:	4461      	add	r1, ip
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e7c:	e738      	b.n	8000cf0 <__udivmoddi4+0x104>
 8000e7e:	462e      	mov	r6, r5
 8000e80:	4628      	mov	r0, r5
 8000e82:	e705      	b.n	8000c90 <__udivmoddi4+0xa4>
 8000e84:	4606      	mov	r6, r0
 8000e86:	e6e3      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6f8      	b.n	8000c7e <__udivmoddi4+0x92>
 8000e8c:	454b      	cmp	r3, r9
 8000e8e:	d2a9      	bcs.n	8000de4 <__udivmoddi4+0x1f8>
 8000e90:	ebb9 0802 	subs.w	r8, r9, r2
 8000e94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e98:	3801      	subs	r0, #1
 8000e9a:	e7a3      	b.n	8000de4 <__udivmoddi4+0x1f8>
 8000e9c:	4646      	mov	r6, r8
 8000e9e:	e7ea      	b.n	8000e76 <__udivmoddi4+0x28a>
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	e794      	b.n	8000dce <__udivmoddi4+0x1e2>
 8000ea4:	4640      	mov	r0, r8
 8000ea6:	e7d1      	b.n	8000e4c <__udivmoddi4+0x260>
 8000ea8:	46d0      	mov	r8, sl
 8000eaa:	e77b      	b.n	8000da4 <__udivmoddi4+0x1b8>
 8000eac:	3b02      	subs	r3, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	e732      	b.n	8000d18 <__udivmoddi4+0x12c>
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e709      	b.n	8000cca <__udivmoddi4+0xde>
 8000eb6:	4464      	add	r4, ip
 8000eb8:	3802      	subs	r0, #2
 8000eba:	e742      	b.n	8000d42 <__udivmoddi4+0x156>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <GFX_SetFont+0x1c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000030 	.word	0x20000030

08000ee0 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	4611      	mov	r1, r2
 8000eec:	461a      	mov	r2, r3
 8000eee:	460b      	mov	r3, r1
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b7e      	cmp	r3, #126	; 0x7e
 8000efa:	f200 809e 	bhi.w	800103a <GFX_DrawChar+0x15a>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000efe:	2300      	movs	r3, #0
 8000f00:	75fb      	strb	r3, [r7, #23]
 8000f02:	e091      	b.n	8001028 <GFX_DrawChar+0x148>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8000f04:	4b4f      	ldr	r3, [pc, #316]	; (8001044 <GFX_DrawChar+0x164>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	3b20      	subs	r3, #32
 8000f0c:	494d      	ldr	r1, [pc, #308]	; (8001044 <GFX_DrawChar+0x164>)
 8000f0e:	6809      	ldr	r1, [r1, #0]
 8000f10:	3101      	adds	r1, #1
 8000f12:	7809      	ldrb	r1, [r1, #0]
 8000f14:	fb03 f101 	mul.w	r1, r3, r1
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
 8000f1a:	440b      	add	r3, r1
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000f24:	2300      	movs	r3, #0
 8000f26:	757b      	strb	r3, [r7, #21]
 8000f28:	e074      	b.n	8001014 <GFX_DrawChar+0x134>
        {
            if(line & 1) // Check last pixel in line
 8000f2a:	7dbb      	ldrb	r3, [r7, #22]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d030      	beq.n	8000f96 <GFX_DrawChar+0xb6>
            {
            	if(size == 1)
 8000f34:	4b44      	ldr	r3, [pc, #272]	; (8001048 <GFX_DrawChar+0x168>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d111      	bne.n	8000f60 <GFX_DrawChar+0x80>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8000f3c:	7dfb      	ldrb	r3, [r7, #23]
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	4413      	add	r3, r2
 8000f46:	b298      	uxth	r0, r3
 8000f48:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	4413      	add	r3, r2
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	79ba      	ldrb	r2, [r7, #6]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f000 fa2d 	bl	80013b8 <e_papier_set_pixel>
 8000f5e:	e050      	b.n	8001002 <GFX_DrawChar+0x122>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8000f60:	7dfb      	ldrb	r3, [r7, #23]
 8000f62:	4a39      	ldr	r2, [pc, #228]	; (8001048 <GFX_DrawChar+0x168>)
 8000f64:	7812      	ldrb	r2, [r2, #0]
 8000f66:	fb03 f202 	mul.w	r2, r3, r2
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	18d0      	adds	r0, r2, r3
 8000f6e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f72:	4a35      	ldr	r2, [pc, #212]	; (8001048 <GFX_DrawChar+0x168>)
 8000f74:	7812      	ldrb	r2, [r2, #0]
 8000f76:	fb03 f202 	mul.w	r2, r3, r2
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	18d1      	adds	r1, r2, r3
 8000f7e:	4b32      	ldr	r3, [pc, #200]	; (8001048 <GFX_DrawChar+0x168>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b30      	ldr	r3, [pc, #192]	; (8001048 <GFX_DrawChar+0x168>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b29c      	uxth	r4, r3
 8000f8a:	79bb      	ldrb	r3, [r7, #6]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	4623      	mov	r3, r4
 8000f90:	f000 f95c 	bl	800124c <GFX_DrawFillRectangle>
 8000f94:	e035      	b.n	8001002 <GFX_DrawChar+0x122>
            }
            else if(background == 0)
 8000f96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d131      	bne.n	8001002 <GFX_DrawChar+0x122>
            {
            	if(size == 1)
 8000f9e:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <GFX_DrawChar+0x168>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d112      	bne.n	8000fcc <GFX_DrawChar+0xec>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	4413      	add	r3, r2
 8000fb0:	b298      	uxth	r0, r3
 8000fb2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	4413      	add	r3, r2
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f000 f9f7 	bl	80013b8 <e_papier_set_pixel>
 8000fca:	e01a      	b.n	8001002 <GFX_DrawChar+0x122>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	4a1e      	ldr	r2, [pc, #120]	; (8001048 <GFX_DrawChar+0x168>)
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	fb03 f202 	mul.w	r2, r3, r2
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	18d0      	adds	r0, r2, r3
 8000fda:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000fde:	4a1a      	ldr	r2, [pc, #104]	; (8001048 <GFX_DrawChar+0x168>)
 8000fe0:	7812      	ldrb	r2, [r2, #0]
 8000fe2:	fb03 f202 	mul.w	r2, r3, r2
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	18d1      	adds	r1, r2, r3
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <GFX_DrawChar+0x168>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <GFX_DrawChar+0x168>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b29c      	uxth	r4, r3
 8000ff6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	4623      	mov	r3, r4
 8000ffe:	f000 f925 	bl	800124c <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8001002:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	3301      	adds	r3, #1
 800100a:	b2db      	uxtb	r3, r3
 800100c:	757b      	strb	r3, [r7, #21]
 800100e:	7dbb      	ldrb	r3, [r7, #22]
 8001010:	085b      	lsrs	r3, r3, #1
 8001012:	75bb      	strb	r3, [r7, #22]
 8001014:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001018:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <GFX_DrawChar+0x164>)
 800101a:	6812      	ldr	r2, [r2, #0]
 800101c:	7812      	ldrb	r2, [r2, #0]
 800101e:	4293      	cmp	r3, r2
 8001020:	db83      	blt.n	8000f2a <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001022:	7dfb      	ldrb	r3, [r7, #23]
 8001024:	3301      	adds	r3, #1
 8001026:	75fb      	strb	r3, [r7, #23]
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <GFX_DrawChar+0x164>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	7dfa      	ldrb	r2, [r7, #23]
 8001032:	429a      	cmp	r2, r3
 8001034:	f4ff af66 	bcc.w	8000f04 <GFX_DrawChar+0x24>
 8001038:	e000      	b.n	800103c <GFX_DrawChar+0x15c>
	if(chr > 0x7E) return; // chr > '~'
 800103a:	bf00      	nop
            }
        }
    }
}
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}
 8001042:	bf00      	nop
 8001044:	20000030 	.word	0x20000030
 8001048:	20000000 	.word	0x20000000

0800104c <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af02      	add	r7, sp, #8
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001064:	e03c      	b.n	80010e0 <GFX_DrawString+0x94>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8001066:	78f9      	ldrb	r1, [r7, #3]
 8001068:	7cfa      	ldrb	r2, [r7, #19]
 800106a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	460b      	mov	r3, r1
 8001072:	68b9      	ldr	r1, [r7, #8]
 8001074:	6978      	ldr	r0, [r7, #20]
 8001076:	f7ff ff33 	bl	8000ee0 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <GFX_DrawString+0xac>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <GFX_DrawString+0xb0>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	fb02 f303 	mul.w	r3, r2, r3
 800108c:	3301      	adds	r3, #1
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4413      	add	r3, r2
 8001092:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001094:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d11e      	bne.n	80010da <GFX_DrawString+0x8e>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 800109c:	2300      	movs	r3, #0
 800109e:	74bb      	strb	r3, [r7, #18]
 80010a0:	e010      	b.n	80010c4 <GFX_DrawString+0x78>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	3b01      	subs	r3, #1
 80010a8:	b298      	uxth	r0, r3
 80010aa:	7cbb      	ldrb	r3, [r7, #18]
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	4413      	add	r3, r2
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	2200      	movs	r2, #0
 80010b8:	4619      	mov	r1, r3
 80010ba:	f000 f97d 	bl	80013b8 <e_papier_set_pixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 80010be:	7cbb      	ldrb	r3, [r7, #18]
 80010c0:	3301      	adds	r3, #1
 80010c2:	74bb      	strb	r3, [r7, #18]
 80010c4:	7cba      	ldrb	r2, [r7, #18]
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <GFX_DrawString+0xac>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <GFX_DrawString+0xb0>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	fb01 f303 	mul.w	r3, r1, r3
 80010d6:	429a      	cmp	r2, r3
 80010d8:	dbe3      	blt.n	80010a2 <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1bc      	bne.n	8001066 <GFX_DrawString+0x1a>
	}
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000030 	.word	0x20000030
 80010fc:	20000000 	.word	0x20000000

08001100 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001118:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800111c:	6879      	ldr	r1, [r7, #4]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1acb      	subs	r3, r1, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	bfb8      	it	lt
 8001126:	425b      	neglt	r3, r3
 8001128:	429a      	cmp	r2, r3
 800112a:	bfcc      	ite	gt
 800112c:	2301      	movgt	r3, #1
 800112e:	2300      	movle	r3, #0
 8001130:	b2db      	uxtb	r3, r3
 8001132:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001134:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00b      	beq.n	8001154 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	623b      	str	r3, [r7, #32]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	dd0b      	ble.n	8001174 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	b29a      	uxth	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	b29b      	uxth	r3, r3
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	b29b      	uxth	r3, r3
 8001180:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	bfb8      	it	lt
 800118c:	425b      	neglt	r3, r3
 800118e:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001190:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001194:	0fda      	lsrs	r2, r3, #31
 8001196:	4413      	add	r3, r2
 8001198:	105b      	asrs	r3, r3, #1
 800119a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	da02      	bge.n	80011aa <GFX_WriteLine+0xaa>
	        ystep = 1;
 80011a4:	2301      	movs	r3, #1
 80011a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80011a8:	e030      	b.n	800120c <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 80011aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80011b0:	e02c      	b.n	800120c <GFX_WriteLine+0x10c>
	        if (steep) {
 80011b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d009      	beq.n	80011ce <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	b291      	uxth	r1, r2
 80011c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f8f6 	bl	80013b8 <e_papier_set_pixel>
 80011cc:	e008      	b.n	80011e0 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	b291      	uxth	r1, r2
 80011d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f8ec 	bl	80013b8 <e_papier_set_pixel>
	        }
	        err -= dy;
 80011e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80011e2:	8abb      	ldrh	r3, [r7, #20]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80011ea:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	da09      	bge.n	8001206 <GFX_WriteLine+0x106>
	            y_start += ystep;
 80011f2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	4413      	add	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80011fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80011fe:	8afb      	ldrh	r3, [r7, #22]
 8001200:	4413      	add	r3, r2
 8001202:	b29b      	uxth	r3, r3
 8001204:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3301      	adds	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	429a      	cmp	r2, r3
 8001212:	ddce      	ble.n	80011b2 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8001214:	bf00      	nop
 8001216:	bf00      	nop
 8001218:	3730      	adds	r7, #48	; 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af02      	add	r7, sp, #8
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	1e5a      	subs	r2, r3, #1
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	4613      	mov	r3, r2
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff ff5e 	bl	8001100 <GFX_WriteLine>
}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	4611      	mov	r1, r2
 8001258:	461a      	mov	r2, r3
 800125a:	460b      	mov	r3, r1
 800125c:	80fb      	strh	r3, [r7, #6]
 800125e:	4613      	mov	r3, r2
 8001260:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	e009      	b.n	800127c <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8001268:	88ba      	ldrh	r2, [r7, #4]
 800126a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800126e:	68b9      	ldr	r1, [r7, #8]
 8001270:	6978      	ldr	r0, [r7, #20]
 8001272:	f7ff ffd4 	bl	800121e <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	88fa      	ldrh	r2, [r7, #6]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4413      	add	r3, r2
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	429a      	cmp	r2, r3
 8001286:	dbef      	blt.n	8001268 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_DMA_Init+0x30>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <MX_DMA_Init+0x30>)
 80012a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_DMA_Init+0x30>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800

080012c8 <e_papier_reset>:
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
void e_papier_reset(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(e_papier_rst_GPIO_Port, e_papier_rst_Pin, 1);
 80012cc:	2201      	movs	r2, #1
 80012ce:	2102      	movs	r1, #2
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <e_papier_reset+0x38>)
 80012d2:	f003 fe5b 	bl	8004f8c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80012d6:	20c8      	movs	r0, #200	; 0xc8
 80012d8:	f002 ffb4 	bl	8004244 <HAL_Delay>
	HAL_GPIO_WritePin(e_papier_rst_GPIO_Port, e_papier_rst_Pin, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	2102      	movs	r1, #2
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <e_papier_reset+0x38>)
 80012e2:	f003 fe53 	bl	8004f8c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80012e6:	20c8      	movs	r0, #200	; 0xc8
 80012e8:	f002 ffac 	bl	8004244 <HAL_Delay>
	HAL_GPIO_WritePin(e_papier_rst_GPIO_Port, e_papier_rst_Pin, 1);
 80012ec:	2201      	movs	r2, #1
 80012ee:	2102      	movs	r1, #2
 80012f0:	4803      	ldr	r0, [pc, #12]	; (8001300 <e_papier_reset+0x38>)
 80012f2:	f003 fe4b 	bl	8004f8c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80012f6:	20c8      	movs	r0, #200	; 0xc8
 80012f8:	f002 ffa4 	bl	8004244 <HAL_Delay>
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40020400 	.word	0x40020400

08001304 <e_papier_send_command>:
void e_papier_send_command(uint8_t command)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(e_papier_dc_GPIO_Port, e_papier_dc_Pin, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2120      	movs	r1, #32
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <e_papier_send_command+0x40>)
 8001314:	f003 fe3a 	bl	8004f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_papier_cs_GPIO_Port, e_papier_cs_Pin, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	2110      	movs	r1, #16
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <e_papier_send_command+0x40>)
 800131e:	f003 fe35 	bl	8004f8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(e_papier_spi, &command, 1, 1000);
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <e_papier_send_command+0x44>)
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	1df9      	adds	r1, r7, #7
 8001328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132c:	2201      	movs	r2, #1
 800132e:	f005 fb30 	bl	8006992 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(e_papier_cs_GPIO_Port, e_papier_cs_Pin, 1);
 8001332:	2201      	movs	r2, #1
 8001334:	2110      	movs	r1, #16
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <e_papier_send_command+0x40>)
 8001338:	f003 fe28 	bl	8004f8c <HAL_GPIO_WritePin>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40020800 	.word	0x40020800
 8001348:	20000034 	.word	0x20000034

0800134c <e_papier_send_data>:
void e_papier_send_data(uint8_t data)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(e_papier_dc_GPIO_Port, e_papier_dc_Pin, 1);
 8001356:	2201      	movs	r2, #1
 8001358:	2120      	movs	r1, #32
 800135a:	480c      	ldr	r0, [pc, #48]	; (800138c <e_papier_send_data+0x40>)
 800135c:	f003 fe16 	bl	8004f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(e_papier_cs_GPIO_Port, e_papier_cs_Pin, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	2110      	movs	r1, #16
 8001364:	4809      	ldr	r0, [pc, #36]	; (800138c <e_papier_send_data+0x40>)
 8001366:	f003 fe11 	bl	8004f8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(e_papier_spi, &data, 1, 1000);
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <e_papier_send_data+0x44>)
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	1df9      	adds	r1, r7, #7
 8001370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001374:	2201      	movs	r2, #1
 8001376:	f005 fb0c 	bl	8006992 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(e_papier_cs_GPIO_Port, e_papier_cs_Pin, 1);
 800137a:	2201      	movs	r2, #1
 800137c:	2110      	movs	r1, #16
 800137e:	4803      	ldr	r0, [pc, #12]	; (800138c <e_papier_send_data+0x40>)
 8001380:	f003 fe04 	bl	8004f8c <HAL_GPIO_WritePin>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40020800 	.word	0x40020800
 8001390:	20000034 	.word	0x20000034

08001394 <e_papier_wait_until_idle>:
void e_papier_wait_until_idle(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(e_papier_busy_GPIO_Port, e_papier_busy_Pin)==0)
 8001398:	e002      	b.n	80013a0 <e_papier_wait_until_idle+0xc>
	{
		osDelay(100);
 800139a:	2064      	movs	r0, #100	; 0x64
 800139c:	f007 fae9 	bl	8008972 <osDelay>
	while(HAL_GPIO_ReadPin(e_papier_busy_GPIO_Port, e_papier_busy_Pin)==0)
 80013a0:	2104      	movs	r1, #4
 80013a2:	4804      	ldr	r0, [pc, #16]	; (80013b4 <e_papier_wait_until_idle+0x20>)
 80013a4:	f003 fdda 	bl	8004f5c <HAL_GPIO_ReadPin>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f5      	beq.n	800139a <e_papier_wait_until_idle+0x6>
	}
}
 80013ae:	bf00      	nop
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40020400 	.word	0x40020400

080013b8 <e_papier_set_pixel>:
void e_papier_set_pixel(uint16_t x,uint16_t y, color_t color)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	80fb      	strh	r3, [r7, #6]
 80013c2:	460b      	mov	r3, r1
 80013c4:	80bb      	strh	r3, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	70fb      	strb	r3, [r7, #3]
	if(x>=EPD_WIDTH||x<0||y>=EPD_HEIGHT||y<0)
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80013d0:	d247      	bcs.n	8001462 <e_papier_set_pixel+0xaa>
 80013d2:	88bb      	ldrh	r3, [r7, #4]
 80013d4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80013d8:	d243      	bcs.n	8001462 <e_papier_set_pixel+0xaa>
	{
		return;
	}
	if(color==WHITE)
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d120      	bne.n	8001422 <e_papier_set_pixel+0x6a>
	{
		buffer[x/8+y*EPD_WIDTH/8]|=(0x80>(x%8));
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	08db      	lsrs	r3, r3, #3
 80013e4:	b299      	uxth	r1, r3
 80013e6:	4608      	mov	r0, r1
 80013e8:	88bb      	ldrh	r3, [r7, #4]
 80013ea:	2232      	movs	r2, #50	; 0x32
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
 80013f0:	4403      	add	r3, r0
 80013f2:	4a1f      	ldr	r2, [pc, #124]	; (8001470 <e_papier_set_pixel+0xb8>)
 80013f4:	5cd3      	ldrb	r3, [r2, r3]
 80013f6:	b25a      	sxtb	r2, r3
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	b29b      	uxth	r3, r3
 8001400:	2b7f      	cmp	r3, #127	; 0x7f
 8001402:	bf94      	ite	ls
 8001404:	2301      	movls	r3, #1
 8001406:	2300      	movhi	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	b25b      	sxtb	r3, r3
 800140c:	4313      	orrs	r3, r2
 800140e:	b258      	sxtb	r0, r3
 8001410:	88bb      	ldrh	r3, [r7, #4]
 8001412:	2232      	movs	r2, #50	; 0x32
 8001414:	fb02 f303 	mul.w	r3, r2, r3
 8001418:	440b      	add	r3, r1
 800141a:	b2c1      	uxtb	r1, r0
 800141c:	4a14      	ldr	r2, [pc, #80]	; (8001470 <e_papier_set_pixel+0xb8>)
 800141e:	54d1      	strb	r1, [r2, r3]
 8001420:	e020      	b.n	8001464 <e_papier_set_pixel+0xac>
	}
	else
	{
		buffer[x/8+y*EPD_WIDTH/8]&=~(0x80>>(x%8));
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	08db      	lsrs	r3, r3, #3
 8001426:	b298      	uxth	r0, r3
 8001428:	4601      	mov	r1, r0
 800142a:	88bb      	ldrh	r3, [r7, #4]
 800142c:	2232      	movs	r2, #50	; 0x32
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	440b      	add	r3, r1
 8001434:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <e_papier_set_pixel+0xb8>)
 8001436:	5cd3      	ldrb	r3, [r2, r3]
 8001438:	b25a      	sxtb	r2, r3
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	2180      	movs	r1, #128	; 0x80
 8001442:	fa41 f303 	asr.w	r3, r1, r3
 8001446:	b25b      	sxtb	r3, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	b25b      	sxtb	r3, r3
 800144c:	4013      	ands	r3, r2
 800144e:	b259      	sxtb	r1, r3
 8001450:	88bb      	ldrh	r3, [r7, #4]
 8001452:	2232      	movs	r2, #50	; 0x32
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	4403      	add	r3, r0
 800145a:	b2c9      	uxtb	r1, r1
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <e_papier_set_pixel+0xb8>)
 800145e:	54d1      	strb	r1, [r2, r3]
 8001460:	e000      	b.n	8001464 <e_papier_set_pixel+0xac>
		return;
 8001462:	bf00      	nop
	}
}
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000038 	.word	0x20000038

08001474 <e_papier_set_lut>:
void e_papier_set_lut(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
    uint16_t count;
    e_papier_send_command(LUT_FOR_VCOM);         //g vcom
 800147a:	2020      	movs	r0, #32
 800147c:	f7ff ff42 	bl	8001304 <e_papier_send_command>
    for(count=0; count<44; count++) {
 8001480:	2300      	movs	r3, #0
 8001482:	80fb      	strh	r3, [r7, #6]
 8001484:	e008      	b.n	8001498 <e_papier_set_lut+0x24>
        e_papier_send_data(lut_vcom0[count]);
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	4a2b      	ldr	r2, [pc, #172]	; (8001538 <e_papier_set_lut+0xc4>)
 800148a:	5cd3      	ldrb	r3, [r2, r3]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff5d 	bl	800134c <e_papier_send_data>
    for(count=0; count<44; count++) {
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	3301      	adds	r3, #1
 8001496:	80fb      	strh	r3, [r7, #6]
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	2b2b      	cmp	r3, #43	; 0x2b
 800149c:	d9f3      	bls.n	8001486 <e_papier_set_lut+0x12>
    }

    e_papier_send_command(LUT_WHITE_TO_WHITE);
 800149e:	2021      	movs	r0, #33	; 0x21
 80014a0:	f7ff ff30 	bl	8001304 <e_papier_send_command>
    for(count=0; count<42; count++) {
 80014a4:	2300      	movs	r3, #0
 80014a6:	80fb      	strh	r3, [r7, #6]
 80014a8:	e008      	b.n	80014bc <e_papier_set_lut+0x48>
        e_papier_send_data(lut_ww[count]);
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	4a23      	ldr	r2, [pc, #140]	; (800153c <e_papier_set_lut+0xc8>)
 80014ae:	5cd3      	ldrb	r3, [r2, r3]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff4b 	bl	800134c <e_papier_send_data>
    for(count=0; count<42; count++) {
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	3301      	adds	r3, #1
 80014ba:	80fb      	strh	r3, [r7, #6]
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	2b29      	cmp	r3, #41	; 0x29
 80014c0:	d9f3      	bls.n	80014aa <e_papier_set_lut+0x36>
    }

    e_papier_send_command(LUT_BLACK_TO_WHITE);
 80014c2:	2022      	movs	r0, #34	; 0x22
 80014c4:	f7ff ff1e 	bl	8001304 <e_papier_send_command>
    for(count=0; count<42; count++) {
 80014c8:	2300      	movs	r3, #0
 80014ca:	80fb      	strh	r3, [r7, #6]
 80014cc:	e008      	b.n	80014e0 <e_papier_set_lut+0x6c>
        e_papier_send_data(lut_bw[count]);
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <e_papier_set_lut+0xcc>)
 80014d2:	5cd3      	ldrb	r3, [r2, r3]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff39 	bl	800134c <e_papier_send_data>
    for(count=0; count<42; count++) {
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	3301      	adds	r3, #1
 80014de:	80fb      	strh	r3, [r7, #6]
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	2b29      	cmp	r3, #41	; 0x29
 80014e4:	d9f3      	bls.n	80014ce <e_papier_set_lut+0x5a>
    }

    e_papier_send_command(LUT_WHITE_TO_BLACK);
 80014e6:	2023      	movs	r0, #35	; 0x23
 80014e8:	f7ff ff0c 	bl	8001304 <e_papier_send_command>
    for(count=0; count<42; count++) {
 80014ec:	2300      	movs	r3, #0
 80014ee:	80fb      	strh	r3, [r7, #6]
 80014f0:	e008      	b.n	8001504 <e_papier_set_lut+0x90>
        e_papier_send_data(lut_wb[count]);
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	4a13      	ldr	r2, [pc, #76]	; (8001544 <e_papier_set_lut+0xd0>)
 80014f6:	5cd3      	ldrb	r3, [r2, r3]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff27 	bl	800134c <e_papier_send_data>
    for(count=0; count<42; count++) {
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	3301      	adds	r3, #1
 8001502:	80fb      	strh	r3, [r7, #6]
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	2b29      	cmp	r3, #41	; 0x29
 8001508:	d9f3      	bls.n	80014f2 <e_papier_set_lut+0x7e>
    }

    e_papier_send_command(LUT_BLACK_TO_BLACK);
 800150a:	2024      	movs	r0, #36	; 0x24
 800150c:	f7ff fefa 	bl	8001304 <e_papier_send_command>
    for(count=0; count<42; count++) {
 8001510:	2300      	movs	r3, #0
 8001512:	80fb      	strh	r3, [r7, #6]
 8001514:	e008      	b.n	8001528 <e_papier_set_lut+0xb4>
        e_papier_send_data(lut_bb[count]);
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	4a0b      	ldr	r2, [pc, #44]	; (8001548 <e_papier_set_lut+0xd4>)
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff15 	bl	800134c <e_papier_send_data>
    for(count=0; count<42; count++) {
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	3301      	adds	r3, #1
 8001526:	80fb      	strh	r3, [r7, #6]
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	2b29      	cmp	r3, #41	; 0x29
 800152c:	d9f3      	bls.n	8001516 <e_papier_set_lut+0xa2>
    }
}
 800152e:	bf00      	nop
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	0800cef0 	.word	0x0800cef0
 800153c:	0800cf1c 	.word	0x0800cf1c
 8001540:	0800cf48 	.word	0x0800cf48
 8001544:	0800cf74 	.word	0x0800cf74
 8001548:	0800cfa0 	.word	0x0800cfa0

0800154c <e_papier_turn_on_display>:
		}
	}
	//e_papier_wait_until_idle();
}
void e_papier_turn_on_display(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	e_papier_send_command(DISPLAY_REFRESH);
 8001550:	2012      	movs	r0, #18
 8001552:	f7ff fed7 	bl	8001304 <e_papier_send_command>
    //HAL_Delay(100);
    e_papier_wait_until_idle();
 8001556:	f7ff ff1d 	bl	8001394 <e_papier_wait_until_idle>
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <e_papier_display>:
void e_papier_display(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
	uint16_t Width, Height;
    Width = (EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1);
 8001566:	2332      	movs	r3, #50	; 0x32
 8001568:	80fb      	strh	r3, [r7, #6]
    Height = EPD_HEIGHT;
 800156a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800156e:	80bb      	strh	r3, [r7, #4]

    e_papier_send_command(DATA_START_TRANSMISSION_1);
 8001570:	2010      	movs	r0, #16
 8001572:	f7ff fec7 	bl	8001304 <e_papier_send_command>
    for (uint16_t j = 0; j < Height; j++) {
 8001576:	2300      	movs	r3, #0
 8001578:	81fb      	strh	r3, [r7, #14]
 800157a:	e00f      	b.n	800159c <e_papier_display+0x3c>
        for (uint16_t i = 0; i < Width; i++) {
 800157c:	2300      	movs	r3, #0
 800157e:	81bb      	strh	r3, [r7, #12]
 8001580:	e005      	b.n	800158e <e_papier_display+0x2e>
        	e_papier_send_data(0XFF);
 8001582:	20ff      	movs	r0, #255	; 0xff
 8001584:	f7ff fee2 	bl	800134c <e_papier_send_data>
        for (uint16_t i = 0; i < Width; i++) {
 8001588:	89bb      	ldrh	r3, [r7, #12]
 800158a:	3301      	adds	r3, #1
 800158c:	81bb      	strh	r3, [r7, #12]
 800158e:	89ba      	ldrh	r2, [r7, #12]
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	429a      	cmp	r2, r3
 8001594:	d3f5      	bcc.n	8001582 <e_papier_display+0x22>
    for (uint16_t j = 0; j < Height; j++) {
 8001596:	89fb      	ldrh	r3, [r7, #14]
 8001598:	3301      	adds	r3, #1
 800159a:	81fb      	strh	r3, [r7, #14]
 800159c:	89fa      	ldrh	r2, [r7, #14]
 800159e:	88bb      	ldrh	r3, [r7, #4]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d3eb      	bcc.n	800157c <e_papier_display+0x1c>
        }
    }
    e_papier_send_command(DATA_START_TRANSMISSION_2);
 80015a4:	2013      	movs	r0, #19
 80015a6:	f7ff fead 	bl	8001304 <e_papier_send_command>
    for (uint16_t j = 0; j < Height; j++) {
 80015aa:	2300      	movs	r3, #0
 80015ac:	817b      	strh	r3, [r7, #10]
 80015ae:	e017      	b.n	80015e0 <e_papier_display+0x80>
        for (uint16_t i = 0; i < Width; i++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	813b      	strh	r3, [r7, #8]
 80015b4:	e00d      	b.n	80015d2 <e_papier_display+0x72>
        	e_papier_send_data(buffer[i + j * Width]);
 80015b6:	893a      	ldrh	r2, [r7, #8]
 80015b8:	897b      	ldrh	r3, [r7, #10]
 80015ba:	88f9      	ldrh	r1, [r7, #6]
 80015bc:	fb01 f303 	mul.w	r3, r1, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <e_papier_display+0x98>)
 80015c4:	5cd3      	ldrb	r3, [r2, r3]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fec0 	bl	800134c <e_papier_send_data>
        for (uint16_t i = 0; i < Width; i++) {
 80015cc:	893b      	ldrh	r3, [r7, #8]
 80015ce:	3301      	adds	r3, #1
 80015d0:	813b      	strh	r3, [r7, #8]
 80015d2:	893a      	ldrh	r2, [r7, #8]
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d3ed      	bcc.n	80015b6 <e_papier_display+0x56>
    for (uint16_t j = 0; j < Height; j++) {
 80015da:	897b      	ldrh	r3, [r7, #10]
 80015dc:	3301      	adds	r3, #1
 80015de:	817b      	strh	r3, [r7, #10]
 80015e0:	897a      	ldrh	r2, [r7, #10]
 80015e2:	88bb      	ldrh	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d3e3      	bcc.n	80015b0 <e_papier_display+0x50>
        }
    }
    e_papier_turn_on_display();
 80015e8:	f7ff ffb0 	bl	800154c <e_papier_turn_on_display>
    e_papier_wait_until_idle();
 80015ec:	f7ff fed2 	bl	8001394 <e_papier_wait_until_idle>
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000038 	.word	0x20000038

080015fc <e_papier_clear>:
void e_papier_clear()
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	memset(buffer,0xff,EPD_HEIGHT*EPD_WIDTH/8);
 8001600:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001604:	21ff      	movs	r1, #255	; 0xff
 8001606:	4802      	ldr	r0, [pc, #8]	; (8001610 <e_papier_clear+0x14>)
 8001608:	f00b fbba 	bl	800cd80 <memset>
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000038 	.word	0x20000038

08001614 <e_papier_init>:
void e_papier_init(SPI_HandleTypeDef *spi)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	e_papier_spi=spi;
 800161c:	4a2b      	ldr	r2, [pc, #172]	; (80016cc <e_papier_init+0xb8>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
	e_papier_reset();
 8001622:	f7ff fe51 	bl	80012c8 <e_papier_reset>

    e_papier_send_command(POWER_SETTING);			//POWER SETTING
 8001626:	2001      	movs	r0, #1
 8001628:	f7ff fe6c 	bl	8001304 <e_papier_send_command>
    e_papier_send_data(0x03);
 800162c:	2003      	movs	r0, #3
 800162e:	f7ff fe8d 	bl	800134c <e_papier_send_data>
    e_papier_send_data(0x00);
 8001632:	2000      	movs	r0, #0
 8001634:	f7ff fe8a 	bl	800134c <e_papier_send_data>
    e_papier_send_data(0x2b);
 8001638:	202b      	movs	r0, #43	; 0x2b
 800163a:	f7ff fe87 	bl	800134c <e_papier_send_data>
    e_papier_send_data(0x2b);
 800163e:	202b      	movs	r0, #43	; 0x2b
 8001640:	f7ff fe84 	bl	800134c <e_papier_send_data>

    e_papier_send_command(BOOSTER_SOFT_START);         //boost soft start
 8001644:	2006      	movs	r0, #6
 8001646:	f7ff fe5d 	bl	8001304 <e_papier_send_command>
    e_papier_send_data(0x17);		//A
 800164a:	2017      	movs	r0, #23
 800164c:	f7ff fe7e 	bl	800134c <e_papier_send_data>
    e_papier_send_data(0x17);		//B
 8001650:	2017      	movs	r0, #23
 8001652:	f7ff fe7b 	bl	800134c <e_papier_send_data>
    e_papier_send_data(0x17);		//C
 8001656:	2017      	movs	r0, #23
 8001658:	f7ff fe78 	bl	800134c <e_papier_send_data>

    e_papier_send_command(POWER_ON);
 800165c:	2004      	movs	r0, #4
 800165e:	f7ff fe51 	bl	8001304 <e_papier_send_command>
    e_papier_wait_until_idle();
 8001662:	f7ff fe97 	bl	8001394 <e_papier_wait_until_idle>

    e_papier_send_command(PANEL_SETTING);			//panel setting
 8001666:	2000      	movs	r0, #0
 8001668:	f7ff fe4c 	bl	8001304 <e_papier_send_command>
    e_papier_send_data(0xbf);		//KW-BF   KWR-AF	BWROTP 0f	BWOTP 1f
 800166c:	20bf      	movs	r0, #191	; 0xbf
 800166e:	f7ff fe6d 	bl	800134c <e_papier_send_data>
    e_papier_send_data(0x0d);
 8001672:	200d      	movs	r0, #13
 8001674:	f7ff fe6a 	bl	800134c <e_papier_send_data>

    e_papier_send_command(PLL_CONTROL);			//PLL setting
 8001678:	2030      	movs	r0, #48	; 0x30
 800167a:	f7ff fe43 	bl	8001304 <e_papier_send_command>
    e_papier_send_data(0x3C);      	// 3A 100HZ   29 150Hz 39 200HZ	31 171HZ
 800167e:	203c      	movs	r0, #60	; 0x3c
 8001680:	f7ff fe64 	bl	800134c <e_papier_send_data>

    e_papier_send_command(0x61);			//resolution setting
 8001684:	2061      	movs	r0, #97	; 0x61
 8001686:	f7ff fe3d 	bl	8001304 <e_papier_send_command>
    e_papier_send_data(0x01);
 800168a:	2001      	movs	r0, #1
 800168c:	f7ff fe5e 	bl	800134c <e_papier_send_data>
    e_papier_send_data(0x90);       //128
 8001690:	2090      	movs	r0, #144	; 0x90
 8001692:	f7ff fe5b 	bl	800134c <e_papier_send_data>
    e_papier_send_data(0x01);		//
 8001696:	2001      	movs	r0, #1
 8001698:	f7ff fe58 	bl	800134c <e_papier_send_data>
    e_papier_send_data(0x2c);
 800169c:	202c      	movs	r0, #44	; 0x2c
 800169e:	f7ff fe55 	bl	800134c <e_papier_send_data>

    e_papier_send_command(0x82);			//vcom_DC setting
 80016a2:	2082      	movs	r0, #130	; 0x82
 80016a4:	f7ff fe2e 	bl	8001304 <e_papier_send_command>
    e_papier_send_data(0x28);
 80016a8:	2028      	movs	r0, #40	; 0x28
 80016aa:	f7ff fe4f 	bl	800134c <e_papier_send_data>

    e_papier_send_command(0X50);			//VCOM AND DATA INTERVAL SETTING
 80016ae:	2050      	movs	r0, #80	; 0x50
 80016b0:	f7ff fe28 	bl	8001304 <e_papier_send_command>
    e_papier_send_data(0x97);		//97white border 77black border		VBDF 17|D7 VBDW 97 VBDB 57		VBDF F7 VBDW 77 VBDB 37  VBDR B7
 80016b4:	2097      	movs	r0, #151	; 0x97
 80016b6:	f7ff fe49 	bl	800134c <e_papier_send_data>

    e_papier_set_lut();
 80016ba:	f7ff fedb 	bl	8001474 <e_papier_set_lut>
    e_papier_clear();
 80016be:	f7ff ff9d 	bl	80015fc <e_papier_clear>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000034 	.word	0x20000034

080016d0 <buffer_clear>:
uint16_t PMSData[3]={0,0,0};
uint8_t hc12Data[100];
float temp,p,h;
float tempAHT15,humAHT15;
void buffer_clear()
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
	for(int i=0;i<100;i++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	e007      	b.n	80016ec <buffer_clear+0x1c>
	{
		hc12Data[i]=0;
 80016dc:	4a08      	ldr	r2, [pc, #32]	; (8001700 <buffer_clear+0x30>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<100;i++)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3301      	adds	r3, #1
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b63      	cmp	r3, #99	; 0x63
 80016f0:	ddf4      	ble.n	80016dc <buffer_clear+0xc>
	}
}
 80016f2:	bf00      	nop
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	20003ad8 	.word	0x20003ad8

08001704 <MakePMSWord>:
uint8_t addr=(0x38<<1);
uint16_t MakePMSWord(uint8_t a,uint8_t b)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	460a      	mov	r2, r1
 800170e:	71fb      	strb	r3, [r7, #7]
 8001710:	4613      	mov	r3, r2
 8001712:	71bb      	strb	r3, [r7, #6]
	uint16_t p=(a<<8);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	b29b      	uxth	r3, r3
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	81fb      	strh	r3, [r7, #14]
	return p|b;
 800171c:	79bb      	ldrb	r3, [r7, #6]
 800171e:	b29a      	uxth	r2, r3
 8001720:	89fb      	ldrh	r3, [r7, #14]
 8001722:	4313      	orrs	r3, r2
 8001724:	b29b      	uxth	r3, r3
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of PMSData */
  PMSDataHandle = osMutexNew(&PMSData_attributes);
 8001738:	482f      	ldr	r0, [pc, #188]	; (80017f8 <MX_FREERTOS_Init+0xc4>)
 800173a:	f007 fa7d 	bl	8008c38 <osMutexNew>
 800173e:	4603      	mov	r3, r0
 8001740:	4a2e      	ldr	r2, [pc, #184]	; (80017fc <MX_FREERTOS_Init+0xc8>)
 8001742:	6013      	str	r3, [r2, #0]

  /* creation of EpapierData */
  EpapierDataHandle = osMutexNew(&EpapierData_attributes);
 8001744:	482e      	ldr	r0, [pc, #184]	; (8001800 <MX_FREERTOS_Init+0xcc>)
 8001746:	f007 fa77 	bl	8008c38 <osMutexNew>
 800174a:	4603      	mov	r3, r0
 800174c:	4a2d      	ldr	r2, [pc, #180]	; (8001804 <MX_FREERTOS_Init+0xd0>)
 800174e:	6013      	str	r3, [r2, #0]

  /* creation of hc12Data */
  hc12DataHandle = osMutexNew(&hc12Data_attributes);
 8001750:	482d      	ldr	r0, [pc, #180]	; (8001808 <MX_FREERTOS_Init+0xd4>)
 8001752:	f007 fa71 	bl	8008c38 <osMutexNew>
 8001756:	4603      	mov	r3, r0
 8001758:	4a2c      	ldr	r2, [pc, #176]	; (800180c <MX_FREERTOS_Init+0xd8>)
 800175a:	6013      	str	r3, [r2, #0]

  /* creation of AHT15Data */
  AHT15DataHandle = osMutexNew(&AHT15Data_attributes);
 800175c:	482c      	ldr	r0, [pc, #176]	; (8001810 <MX_FREERTOS_Init+0xdc>)
 800175e:	f007 fa6b 	bl	8008c38 <osMutexNew>
 8001762:	4603      	mov	r3, r0
 8001764:	4a2b      	ldr	r2, [pc, #172]	; (8001814 <MX_FREERTOS_Init+0xe0>)
 8001766:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ParseSemaphore */
  ParseSemaphoreHandle = osSemaphoreNew(1, 1, &ParseSemaphore_attributes);
 8001768:	4a2b      	ldr	r2, [pc, #172]	; (8001818 <MX_FREERTOS_Init+0xe4>)
 800176a:	2101      	movs	r1, #1
 800176c:	2001      	movs	r0, #1
 800176e:	f007 fb71 	bl	8008e54 <osSemaphoreNew>
 8001772:	4603      	mov	r3, r0
 8001774:	4a29      	ldr	r2, [pc, #164]	; (800181c <MX_FREERTOS_Init+0xe8>)
 8001776:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Time */
  TimeHandle = osMessageQueueNew (16, sizeof(uint32_t), &Time_attributes);
 8001778:	4a29      	ldr	r2, [pc, #164]	; (8001820 <MX_FREERTOS_Init+0xec>)
 800177a:	2104      	movs	r1, #4
 800177c:	2010      	movs	r0, #16
 800177e:	f007 fc89 	bl	8009094 <osMessageQueueNew>
 8001782:	4603      	mov	r3, r0
 8001784:	4a27      	ldr	r2, [pc, #156]	; (8001824 <MX_FREERTOS_Init+0xf0>)
 8001786:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBit */
  HeartBitHandle = osThreadNew(StartHeartBit, NULL, &HeartBit_attributes);
 8001788:	4a27      	ldr	r2, [pc, #156]	; (8001828 <MX_FREERTOS_Init+0xf4>)
 800178a:	2100      	movs	r1, #0
 800178c:	4827      	ldr	r0, [pc, #156]	; (800182c <MX_FREERTOS_Init+0xf8>)
 800178e:	f007 f85e 	bl	800884e <osThreadNew>
 8001792:	4603      	mov	r3, r0
 8001794:	4a26      	ldr	r2, [pc, #152]	; (8001830 <MX_FREERTOS_Init+0xfc>)
 8001796:	6013      	str	r3, [r2, #0]

  /* creation of TimeToEnd */
  TimeToEndHandle = osThreadNew(StartTimeToEnd, NULL, &TimeToEnd_attributes);
 8001798:	4a26      	ldr	r2, [pc, #152]	; (8001834 <MX_FREERTOS_Init+0x100>)
 800179a:	2100      	movs	r1, #0
 800179c:	4826      	ldr	r0, [pc, #152]	; (8001838 <MX_FREERTOS_Init+0x104>)
 800179e:	f007 f856 	bl	800884e <osThreadNew>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a25      	ldr	r2, [pc, #148]	; (800183c <MX_FREERTOS_Init+0x108>)
 80017a6:	6013      	str	r3, [r2, #0]

  /* creation of TimeToSend */
  TimeToSendHandle = osThreadNew(StartTimeToSend, NULL, &TimeToSend_attributes);
 80017a8:	4a25      	ldr	r2, [pc, #148]	; (8001840 <MX_FREERTOS_Init+0x10c>)
 80017aa:	2100      	movs	r1, #0
 80017ac:	4825      	ldr	r0, [pc, #148]	; (8001844 <MX_FREERTOS_Init+0x110>)
 80017ae:	f007 f84e 	bl	800884e <osThreadNew>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a24      	ldr	r2, [pc, #144]	; (8001848 <MX_FREERTOS_Init+0x114>)
 80017b6:	6013      	str	r3, [r2, #0]

  /* creation of EpapierTask */
  EpapierTaskHandle = osThreadNew(StartEpapierTask, NULL, &EpapierTask_attributes);
 80017b8:	4a24      	ldr	r2, [pc, #144]	; (800184c <MX_FREERTOS_Init+0x118>)
 80017ba:	2100      	movs	r1, #0
 80017bc:	4824      	ldr	r0, [pc, #144]	; (8001850 <MX_FREERTOS_Init+0x11c>)
 80017be:	f007 f846 	bl	800884e <osThreadNew>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4a23      	ldr	r2, [pc, #140]	; (8001854 <MX_FREERTOS_Init+0x120>)
 80017c6:	6013      	str	r3, [r2, #0]

  /* creation of Parse */
  ParseHandle = osThreadNew(StartParse, NULL, &Parse_attributes);
 80017c8:	4a23      	ldr	r2, [pc, #140]	; (8001858 <MX_FREERTOS_Init+0x124>)
 80017ca:	2100      	movs	r1, #0
 80017cc:	4823      	ldr	r0, [pc, #140]	; (800185c <MX_FREERTOS_Init+0x128>)
 80017ce:	f007 f83e 	bl	800884e <osThreadNew>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4a22      	ldr	r2, [pc, #136]	; (8001860 <MX_FREERTOS_Init+0x12c>)
 80017d6:	6013      	str	r3, [r2, #0]

  /* creation of AHT15Task */
  AHT15TaskHandle = osThreadNew(StartAHT15Task, NULL, &AHT15Task_attributes);
 80017d8:	4a22      	ldr	r2, [pc, #136]	; (8001864 <MX_FREERTOS_Init+0x130>)
 80017da:	2100      	movs	r1, #0
 80017dc:	4822      	ldr	r0, [pc, #136]	; (8001868 <MX_FREERTOS_Init+0x134>)
 80017de:	f007 f836 	bl	800884e <osThreadNew>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a21      	ldr	r2, [pc, #132]	; (800186c <MX_FREERTOS_Init+0x138>)
 80017e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of ProcesFlags */
  ProcesFlagsHandle = osEventFlagsNew(&ProcesFlags_attributes);
 80017e8:	4821      	ldr	r0, [pc, #132]	; (8001870 <MX_FREERTOS_Init+0x13c>)
 80017ea:	f007 f90a 	bl	8008a02 <osEventFlagsNew>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4a20      	ldr	r2, [pc, #128]	; (8001874 <MX_FREERTOS_Init+0x140>)
 80017f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	0800d29c 	.word	0x0800d29c
 80017fc:	20003b6c 	.word	0x20003b6c
 8001800:	0800d2ac 	.word	0x0800d2ac
 8001804:	20003b70 	.word	0x20003b70
 8001808:	0800d2bc 	.word	0x0800d2bc
 800180c:	20003b74 	.word	0x20003b74
 8001810:	0800d2cc 	.word	0x0800d2cc
 8001814:	20003b78 	.word	0x20003b78
 8001818:	0800d2dc 	.word	0x0800d2dc
 800181c:	20003b7c 	.word	0x20003b7c
 8001820:	0800d284 	.word	0x0800d284
 8001824:	20003b68 	.word	0x20003b68
 8001828:	0800d1ac 	.word	0x0800d1ac
 800182c:	08001879 	.word	0x08001879
 8001830:	20003b50 	.word	0x20003b50
 8001834:	0800d1d0 	.word	0x0800d1d0
 8001838:	080018ad 	.word	0x080018ad
 800183c:	20003b54 	.word	0x20003b54
 8001840:	0800d1f4 	.word	0x0800d1f4
 8001844:	08001bb5 	.word	0x08001bb5
 8001848:	20003b58 	.word	0x20003b58
 800184c:	0800d218 	.word	0x0800d218
 8001850:	08001c61 	.word	0x08001c61
 8001854:	20003b5c 	.word	0x20003b5c
 8001858:	0800d23c 	.word	0x0800d23c
 800185c:	08001d25 	.word	0x08001d25
 8001860:	20003b60 	.word	0x20003b60
 8001864:	0800d260 	.word	0x0800d260
 8001868:	08001f61 	.word	0x08001f61
 800186c:	20003b64 	.word	0x20003b64
 8001870:	0800d2ec 	.word	0x0800d2ec
 8001874:	20003b80 	.word	0x20003b80

08001878 <StartHeartBit>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHeartBit */
void StartHeartBit(void *argument)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHeartBit */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);
 8001880:	2201      	movs	r2, #1
 8001882:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001886:	4808      	ldr	r0, [pc, #32]	; (80018a8 <StartHeartBit+0x30>)
 8001888:	f003 fb80 	bl	8004f8c <HAL_GPIO_WritePin>
	  osDelay(100);
 800188c:	2064      	movs	r0, #100	; 0x64
 800188e:	f007 f870 	bl	8008972 <osDelay>
	  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001898:	4803      	ldr	r0, [pc, #12]	; (80018a8 <StartHeartBit+0x30>)
 800189a:	f003 fb77 	bl	8004f8c <HAL_GPIO_WritePin>
	  osDelay(100);
 800189e:	2064      	movs	r0, #100	; 0x64
 80018a0:	f007 f867 	bl	8008972 <osDelay>
	  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);
 80018a4:	e7ec      	b.n	8001880 <StartHeartBit+0x8>
 80018a6:	bf00      	nop
 80018a8:	40020c00 	.word	0x40020c00

080018ac <StartTimeToEnd>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTimeToEnd */
void StartTimeToEnd(void *argument)
{
 80018ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018b0:	b0a7      	sub	sp, #156	; 0x9c
 80018b2:	af08      	add	r7, sp, #32
 80018b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimeToEnd */
	char w[100];
	uint32_t t=0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60bb      	str	r3, [r7, #8]
	uint32_t timeToEnd;
	uint32_t time;
  /* Infinite loop */
  for(;;)
  {
	  time=osKernelGetTickCount();
 80018ba:	f006 ffb3 	bl	8008824 <osKernelGetTickCount>
 80018be:	6778      	str	r0, [r7, #116]	; 0x74
	  osEventFlagsWait(ProcesFlagsHandle, 0x00000001U, osFlagsWaitAny|osFlagsNoClear, osWaitForever);
 80018c0:	4bad      	ldr	r3, [pc, #692]	; (8001b78 <StartTimeToEnd+0x2cc>)
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	f04f 33ff 	mov.w	r3, #4294967295
 80018c8:	2202      	movs	r2, #2
 80018ca:	2101      	movs	r1, #1
 80018cc:	f007 f94e 	bl	8008b6c <osEventFlagsWait>
	  if(osOK==osMessageQueueGet(TimeHandle, &t, 0, 0))
 80018d0:	4baa      	ldr	r3, [pc, #680]	; (8001b7c <StartTimeToEnd+0x2d0>)
 80018d2:	6818      	ldr	r0, [r3, #0]
 80018d4:	f107 0108 	add.w	r1, r7, #8
 80018d8:	2300      	movs	r3, #0
 80018da:	2200      	movs	r2, #0
 80018dc:	f007 fcae 	bl	800923c <osMessageQueueGet>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f040 80a0 	bne.w	8001a28 <StartTimeToEnd+0x17c>
	  {
		  timeToEnd=180000-(osKernelGetTickCount()-t);
 80018e8:	68bc      	ldr	r4, [r7, #8]
 80018ea:	f006 ff9b 	bl	8008824 <osKernelGetTickCount>
 80018ee:	4603      	mov	r3, r0
 80018f0:	1ae3      	subs	r3, r4, r3
 80018f2:	f503 332f 	add.w	r3, r3, #179200	; 0x2bc00
 80018f6:	f503 7348 	add.w	r3, r3, #800	; 0x320
 80018fa:	673b      	str	r3, [r7, #112]	; 0x70
		  timeToEnd=timeToEnd/1000;
 80018fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018fe:	4aa0      	ldr	r2, [pc, #640]	; (8001b80 <StartTimeToEnd+0x2d4>)
 8001900:	fba2 2303 	umull	r2, r3, r2, r3
 8001904:	099b      	lsrs	r3, r3, #6
 8001906:	673b      	str	r3, [r7, #112]	; 0x70
		  sprintf(w,"%d",timeToEnd);
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800190e:	499d      	ldr	r1, [pc, #628]	; (8001b84 <StartTimeToEnd+0x2d8>)
 8001910:	4618      	mov	r0, r3
 8001912:	f002 fa01 	bl	8003d18 <sprintf_>
		  osMutexAcquire(EpapierDataHandle, osWaitForever);
 8001916:	4b9c      	ldr	r3, [pc, #624]	; (8001b88 <StartTimeToEnd+0x2dc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f04f 31ff 	mov.w	r1, #4294967295
 800191e:	4618      	mov	r0, r3
 8001920:	f007 fa10 	bl	8008d44 <osMutexAcquire>
		  osMutexAcquire(hc12DataHandle, osWaitForever);
 8001924:	4b99      	ldr	r3, [pc, #612]	; (8001b8c <StartTimeToEnd+0x2e0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	4618      	mov	r0, r3
 800192e:	f007 fa09 	bl	8008d44 <osMutexAcquire>
		  GFX_DrawString(0, 0, w, BLACK, 1);
 8001932:	f107 020c 	add.w	r2, r7, #12
 8001936:	2301      	movs	r3, #1
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2300      	movs	r3, #0
 800193c:	2100      	movs	r1, #0
 800193e:	2000      	movs	r0, #0
 8001940:	f7ff fb84 	bl	800104c <GFX_DrawString>
		  sprintf(w,"PM1: %d PM2.5: %d PM10: %d temp: %0.2f press: %0.2f hum: %0.2f",PMSData[0],PMSData[1],PMSData[2],temp,p,h);
 8001944:	4b92      	ldr	r3, [pc, #584]	; (8001b90 <StartTimeToEnd+0x2e4>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	469a      	mov	sl, r3
 800194a:	4b91      	ldr	r3, [pc, #580]	; (8001b90 <StartTimeToEnd+0x2e4>)
 800194c:	885b      	ldrh	r3, [r3, #2]
 800194e:	469b      	mov	fp, r3
 8001950:	4b8f      	ldr	r3, [pc, #572]	; (8001b90 <StartTimeToEnd+0x2e4>)
 8001952:	889b      	ldrh	r3, [r3, #4]
 8001954:	461e      	mov	r6, r3
 8001956:	4b8f      	ldr	r3, [pc, #572]	; (8001b94 <StartTimeToEnd+0x2e8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fda4 	bl	80004a8 <__aeabi_f2d>
 8001960:	4604      	mov	r4, r0
 8001962:	460d      	mov	r5, r1
 8001964:	4b8c      	ldr	r3, [pc, #560]	; (8001b98 <StartTimeToEnd+0x2ec>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fd9d 	bl	80004a8 <__aeabi_f2d>
 800196e:	4680      	mov	r8, r0
 8001970:	4689      	mov	r9, r1
 8001972:	4b8a      	ldr	r3, [pc, #552]	; (8001b9c <StartTimeToEnd+0x2f0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fd96 	bl	80004a8 <__aeabi_f2d>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	f107 000c 	add.w	r0, r7, #12
 8001984:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001988:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800198c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001990:	9600      	str	r6, [sp, #0]
 8001992:	465b      	mov	r3, fp
 8001994:	4652      	mov	r2, sl
 8001996:	4982      	ldr	r1, [pc, #520]	; (8001ba0 <StartTimeToEnd+0x2f4>)
 8001998:	f002 f9be 	bl	8003d18 <sprintf_>
		  GFX_DrawString(0, 20, w, BLACK, 1);
 800199c:	f107 020c 	add.w	r2, r7, #12
 80019a0:	2301      	movs	r3, #1
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2300      	movs	r3, #0
 80019a6:	2114      	movs	r1, #20
 80019a8:	2000      	movs	r0, #0
 80019aa:	f7ff fb4f 	bl	800104c <GFX_DrawString>
		  osMutexAcquire(AHT15DataHandle, osWaitForever);
 80019ae:	4b7d      	ldr	r3, [pc, #500]	; (8001ba4 <StartTimeToEnd+0x2f8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f04f 31ff 	mov.w	r1, #4294967295
 80019b6:	4618      	mov	r0, r3
 80019b8:	f007 f9c4 	bl	8008d44 <osMutexAcquire>
		  sprintf(w,"tempAHT: %0.2f humAHT: %0.2f",tempAHT15,humAHT15);
 80019bc:	4b7a      	ldr	r3, [pc, #488]	; (8001ba8 <StartTimeToEnd+0x2fc>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fd71 	bl	80004a8 <__aeabi_f2d>
 80019c6:	4604      	mov	r4, r0
 80019c8:	460d      	mov	r5, r1
 80019ca:	4b78      	ldr	r3, [pc, #480]	; (8001bac <StartTimeToEnd+0x300>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fd6a 	bl	80004a8 <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	f107 000c 	add.w	r0, r7, #12
 80019dc:	e9cd 2300 	strd	r2, r3, [sp]
 80019e0:	4622      	mov	r2, r4
 80019e2:	462b      	mov	r3, r5
 80019e4:	4972      	ldr	r1, [pc, #456]	; (8001bb0 <StartTimeToEnd+0x304>)
 80019e6:	f002 f997 	bl	8003d18 <sprintf_>
		  GFX_DrawString(0, 40, w, BLACK, 1);
 80019ea:	f107 020c 	add.w	r2, r7, #12
 80019ee:	2301      	movs	r3, #1
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2300      	movs	r3, #0
 80019f4:	2128      	movs	r1, #40	; 0x28
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff fb28 	bl	800104c <GFX_DrawString>
		  osMutexRelease(AHT15DataHandle);
 80019fc:	4b69      	ldr	r3, [pc, #420]	; (8001ba4 <StartTimeToEnd+0x2f8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f007 f9ea 	bl	8008dda <osMutexRelease>
		  osEventFlagsSet(ProcesFlagsHandle, 0x00000002U);
 8001a06:	4b5c      	ldr	r3, [pc, #368]	; (8001b78 <StartTimeToEnd+0x2cc>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f007 f837 	bl	8008a80 <osEventFlagsSet>
		  osMutexRelease(hc12DataHandle);
 8001a12:	4b5e      	ldr	r3, [pc, #376]	; (8001b8c <StartTimeToEnd+0x2e0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f007 f9df 	bl	8008dda <osMutexRelease>
		  osMutexRelease(EpapierDataHandle);
 8001a1c:	4b5a      	ldr	r3, [pc, #360]	; (8001b88 <StartTimeToEnd+0x2dc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f007 f9da 	bl	8008dda <osMutexRelease>
 8001a26:	e09e      	b.n	8001b66 <StartTimeToEnd+0x2ba>
	  }
	  else
	  {
		  timeToEnd=180000-(osKernelGetTickCount()-t);
 8001a28:	68bc      	ldr	r4, [r7, #8]
 8001a2a:	f006 fefb 	bl	8008824 <osKernelGetTickCount>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	1ae3      	subs	r3, r4, r3
 8001a32:	f503 332f 	add.w	r3, r3, #179200	; 0x2bc00
 8001a36:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001a3a:	673b      	str	r3, [r7, #112]	; 0x70
		  timeToEnd=timeToEnd/1000;
 8001a3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a3e:	4a50      	ldr	r2, [pc, #320]	; (8001b80 <StartTimeToEnd+0x2d4>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	099b      	lsrs	r3, r3, #6
 8001a46:	673b      	str	r3, [r7, #112]	; 0x70
		  sprintf(w,"%d",timeToEnd);
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001a4e:	494d      	ldr	r1, [pc, #308]	; (8001b84 <StartTimeToEnd+0x2d8>)
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 f961 	bl	8003d18 <sprintf_>
		  osMutexAcquire(EpapierDataHandle, osWaitForever);
 8001a56:	4b4c      	ldr	r3, [pc, #304]	; (8001b88 <StartTimeToEnd+0x2dc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f007 f970 	bl	8008d44 <osMutexAcquire>
		  osMutexAcquire(hc12DataHandle, osWaitForever);
 8001a64:	4b49      	ldr	r3, [pc, #292]	; (8001b8c <StartTimeToEnd+0x2e0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f007 f969 	bl	8008d44 <osMutexAcquire>
		  GFX_DrawString(0, 0, w, BLACK, 1);
 8001a72:	f107 020c 	add.w	r2, r7, #12
 8001a76:	2301      	movs	r3, #1
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff fae4 	bl	800104c <GFX_DrawString>
		  sprintf(w,"PM1: %d PM2.5: %d PM10: %d temp: %0.2f press: %0.2f hum: %0.2f",PMSData[0],PMSData[1],PMSData[2],temp,p,h);
 8001a84:	4b42      	ldr	r3, [pc, #264]	; (8001b90 <StartTimeToEnd+0x2e4>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	469a      	mov	sl, r3
 8001a8a:	4b41      	ldr	r3, [pc, #260]	; (8001b90 <StartTimeToEnd+0x2e4>)
 8001a8c:	885b      	ldrh	r3, [r3, #2]
 8001a8e:	469b      	mov	fp, r3
 8001a90:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <StartTimeToEnd+0x2e4>)
 8001a92:	889b      	ldrh	r3, [r3, #4]
 8001a94:	461e      	mov	r6, r3
 8001a96:	4b3f      	ldr	r3, [pc, #252]	; (8001b94 <StartTimeToEnd+0x2e8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fd04 	bl	80004a8 <__aeabi_f2d>
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	460d      	mov	r5, r1
 8001aa4:	4b3c      	ldr	r3, [pc, #240]	; (8001b98 <StartTimeToEnd+0x2ec>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fcfd 	bl	80004a8 <__aeabi_f2d>
 8001aae:	4680      	mov	r8, r0
 8001ab0:	4689      	mov	r9, r1
 8001ab2:	4b3a      	ldr	r3, [pc, #232]	; (8001b9c <StartTimeToEnd+0x2f0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fcf6 	bl	80004a8 <__aeabi_f2d>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	f107 000c 	add.w	r0, r7, #12
 8001ac4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001ac8:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001acc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001ad0:	9600      	str	r6, [sp, #0]
 8001ad2:	465b      	mov	r3, fp
 8001ad4:	4652      	mov	r2, sl
 8001ad6:	4932      	ldr	r1, [pc, #200]	; (8001ba0 <StartTimeToEnd+0x2f4>)
 8001ad8:	f002 f91e 	bl	8003d18 <sprintf_>
		  GFX_DrawString(0, 20, w, BLACK, 1);
 8001adc:	f107 020c 	add.w	r2, r7, #12
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	2114      	movs	r1, #20
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff faaf 	bl	800104c <GFX_DrawString>
		  osMutexAcquire(AHT15DataHandle, osWaitForever);
 8001aee:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <StartTimeToEnd+0x2f8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f04f 31ff 	mov.w	r1, #4294967295
 8001af6:	4618      	mov	r0, r3
 8001af8:	f007 f924 	bl	8008d44 <osMutexAcquire>
		  sprintf(w,"tempAHT: %0.2f humAHT: %0.2f",tempAHT15,humAHT15);
 8001afc:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <StartTimeToEnd+0x2fc>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fcd1 	bl	80004a8 <__aeabi_f2d>
 8001b06:	4604      	mov	r4, r0
 8001b08:	460d      	mov	r5, r1
 8001b0a:	4b28      	ldr	r3, [pc, #160]	; (8001bac <StartTimeToEnd+0x300>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fcca 	bl	80004a8 <__aeabi_f2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	f107 000c 	add.w	r0, r7, #12
 8001b1c:	e9cd 2300 	strd	r2, r3, [sp]
 8001b20:	4622      	mov	r2, r4
 8001b22:	462b      	mov	r3, r5
 8001b24:	4922      	ldr	r1, [pc, #136]	; (8001bb0 <StartTimeToEnd+0x304>)
 8001b26:	f002 f8f7 	bl	8003d18 <sprintf_>
		  GFX_DrawString(0, 40, w, BLACK, 1);
 8001b2a:	f107 020c 	add.w	r2, r7, #12
 8001b2e:	2301      	movs	r3, #1
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2300      	movs	r3, #0
 8001b34:	2128      	movs	r1, #40	; 0x28
 8001b36:	2000      	movs	r0, #0
 8001b38:	f7ff fa88 	bl	800104c <GFX_DrawString>
		  osMutexRelease(AHT15DataHandle);
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <StartTimeToEnd+0x2f8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f007 f94a 	bl	8008dda <osMutexRelease>
		  osEventFlagsSet(ProcesFlagsHandle, 0x00000002U);
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <StartTimeToEnd+0x2cc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f006 ff97 	bl	8008a80 <osEventFlagsSet>
		  osMutexRelease(hc12DataHandle);
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <StartTimeToEnd+0x2e0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f007 f93f 	bl	8008dda <osMutexRelease>
		  osMutexRelease(EpapierDataHandle);
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <StartTimeToEnd+0x2dc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f007 f93a 	bl	8008dda <osMutexRelease>
	  }
	  time+=10000;
 8001b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b68:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001b6c:	3310      	adds	r3, #16
 8001b6e:	677b      	str	r3, [r7, #116]	; 0x74
	  osDelayUntil(time);
 8001b70:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b72:	f006 ff19 	bl	80089a8 <osDelayUntil>
	  time=osKernelGetTickCount();
 8001b76:	e6a0      	b.n	80018ba <StartTimeToEnd+0xe>
 8001b78:	20003b80 	.word	0x20003b80
 8001b7c:	20003b68 	.word	0x20003b68
 8001b80:	10624dd3 	.word	0x10624dd3
 8001b84:	0800ce3c 	.word	0x0800ce3c
 8001b88:	20003b70 	.word	0x20003b70
 8001b8c:	20003b74 	.word	0x20003b74
 8001b90:	20003ad0 	.word	0x20003ad0
 8001b94:	20003b3c 	.word	0x20003b3c
 8001b98:	20003b40 	.word	0x20003b40
 8001b9c:	20003b44 	.word	0x20003b44
 8001ba0:	0800ce40 	.word	0x0800ce40
 8001ba4:	20003b78 	.word	0x20003b78
 8001ba8:	20003b48 	.word	0x20003b48
 8001bac:	20003b4c 	.word	0x20003b4c
 8001bb0:	0800ce80 	.word	0x0800ce80

08001bb4 <StartTimeToSend>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTimeToSend */
void StartTimeToSend(void *argument)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimeToSend */
uint32_t time;
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(ProcesFlagsHandle, 0x00000004U, osFlagsWaitAny, osWaitForever);
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <StartTimeToSend+0x90>)
 8001bbe:	6818      	ldr	r0, [r3, #0]
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2104      	movs	r1, #4
 8001bc8:	f006 ffd0 	bl	8008b6c <osEventFlagsWait>
	  time=osKernelGetTickCount();
 8001bcc:	f006 fe2a 	bl	8008824 <osKernelGetTickCount>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	60fb      	str	r3, [r7, #12]
	  osMessageQueuePut(TimeHandle, &time, 0, 0);
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <StartTimeToSend+0x94>)
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	f107 010c 	add.w	r1, r7, #12
 8001bdc:	2300      	movs	r3, #0
 8001bde:	2200      	movs	r2, #0
 8001be0:	f007 facc 	bl	800917c <osMessageQueuePut>
	  osEventFlagsSet(ProcesFlagsHandle, 0x00000001U);
 8001be4:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <StartTimeToSend+0x90>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2101      	movs	r1, #1
 8001bea:	4618      	mov	r0, r3
 8001bec:	f006 ff48 	bl	8008a80 <osEventFlagsSet>
	  osDelay(180000);
 8001bf0:	4816      	ldr	r0, [pc, #88]	; (8001c4c <StartTimeToSend+0x98>)
 8001bf2:	f006 febe 	bl	8008972 <osDelay>
	  osMutexAcquire(EpapierDataHandle, osWaitForever);
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <StartTimeToSend+0x9c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f007 f8a0 	bl	8008d44 <osMutexAcquire>
	  GFX_DrawString(0, 0, "wyslano zapytanie", BLACK, 1);
 8001c04:	2301      	movs	r3, #1
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <StartTimeToSend+0xa0>)
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff fa1c 	bl	800104c <GFX_DrawString>
	  osMutexRelease(EpapierDataHandle);
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <StartTimeToSend+0x9c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f007 f8de 	bl	8008dda <osMutexRelease>
	  osEventFlagsClear(ProcesFlagsHandle, 0x00000001U);
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <StartTimeToSend+0x90>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2101      	movs	r1, #1
 8001c24:	4618      	mov	r0, r3
 8001c26:	f006 ff6f 	bl	8008b08 <osEventFlagsClear>
	  osEventFlagsSet(ProcesFlagsHandle, 0x00000002U);
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <StartTimeToSend+0x90>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2102      	movs	r1, #2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f006 ff25 	bl	8008a80 <osEventFlagsSet>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"start", sizeof("start"), 100);
 8001c36:	2364      	movs	r3, #100	; 0x64
 8001c38:	2206      	movs	r2, #6
 8001c3a:	4907      	ldr	r1, [pc, #28]	; (8001c58 <StartTimeToSend+0xa4>)
 8001c3c:	4807      	ldr	r0, [pc, #28]	; (8001c5c <StartTimeToSend+0xa8>)
 8001c3e:	f005 fb7c 	bl	800733a <HAL_UART_Transmit>
	  osEventFlagsWait(ProcesFlagsHandle, 0x00000004U, osFlagsWaitAny, osWaitForever);
 8001c42:	e7bb      	b.n	8001bbc <StartTimeToSend+0x8>
 8001c44:	20003b80 	.word	0x20003b80
 8001c48:	20003b68 	.word	0x20003b68
 8001c4c:	0002bf20 	.word	0x0002bf20
 8001c50:	20003b70 	.word	0x20003b70
 8001c54:	0800cea0 	.word	0x0800cea0
 8001c58:	0800ceb4 	.word	0x0800ceb4
 8001c5c:	20003c78 	.word	0x20003c78

08001c60 <StartEpapierTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEpapierTask */
void StartEpapierTask(void *argument)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEpapierTask */
	e_papier_init(&hspi2);
 8001c68:	4825      	ldr	r0, [pc, #148]	; (8001d00 <StartEpapierTask+0xa0>)
 8001c6a:	f7ff fcd3 	bl	8001614 <e_papier_init>
	GFX_SetFont(font_8x5);
 8001c6e:	4825      	ldr	r0, [pc, #148]	; (8001d04 <StartEpapierTask+0xa4>)
 8001c70:	f7ff f926 	bl	8000ec0 <GFX_SetFont>
	osMutexAcquire(AHT15DataHandle, osWaitForever);
 8001c74:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <StartEpapierTask+0xa8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f007 f861 	bl	8008d44 <osMutexAcquire>
	HAL_I2C_Master_Transmit(&hi2c1, addr, (uint8_t*)0xe1, 1, 1000);
 8001c82:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <StartEpapierTask+0xac>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b299      	uxth	r1, r3
 8001c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	22e1      	movs	r2, #225	; 0xe1
 8001c92:	481f      	ldr	r0, [pc, #124]	; (8001d10 <StartEpapierTask+0xb0>)
 8001c94:	f003 fad8 	bl	8005248 <HAL_I2C_Master_Transmit>
	osDelay(100);
 8001c98:	2064      	movs	r0, #100	; 0x64
 8001c9a:	f006 fe6a 	bl	8008972 <osDelay>
	osMutexRelease(AHT15DataHandle);
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <StartEpapierTask+0xa8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f007 f899 	bl	8008dda <osMutexRelease>
	osMutexAcquire(EpapierDataHandle, osWaitForever);
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <StartEpapierTask+0xb4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f007 f847 	bl	8008d44 <osMutexAcquire>
	e_papier_display();
 8001cb6:	f7ff fc53 	bl	8001560 <e_papier_display>
	osMutexRelease(EpapierDataHandle);
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <StartEpapierTask+0xb4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f007 f88b 	bl	8008dda <osMutexRelease>
	//osEventFlagsSet(ProcesFlagsHandle, 0x00000004U);
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, hc12Data, 100);
 8001cc4:	2264      	movs	r2, #100	; 0x64
 8001cc6:	4914      	ldr	r1, [pc, #80]	; (8001d18 <StartEpapierTask+0xb8>)
 8001cc8:	4814      	ldr	r0, [pc, #80]	; (8001d1c <StartEpapierTask+0xbc>)
 8001cca:	f005 fbc8 	bl	800745e <HAL_UARTEx_ReceiveToIdle_DMA>
  /* Infinite loop */
  for(;;)
  {
	  //GFX_DrawString(0, 0, "abs", BLACK, 1);
	  osEventFlagsWait(ProcesFlagsHandle, 0x00000002U, osFlagsWaitAny, osWaitForever);
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <StartEpapierTask+0xc0>)
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2102      	movs	r1, #2
 8001cda:	f006 ff47 	bl	8008b6c <osEventFlagsWait>
	  osMutexAcquire(EpapierDataHandle, osWaitForever);
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <StartEpapierTask+0xb4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f007 f82c 	bl	8008d44 <osMutexAcquire>
	  e_papier_display();
 8001cec:	f7ff fc38 	bl	8001560 <e_papier_display>
	  e_papier_clear();
 8001cf0:	f7ff fc84 	bl	80015fc <e_papier_clear>
	  osMutexRelease(EpapierDataHandle);
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <StartEpapierTask+0xb4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f007 f86e 	bl	8008dda <osMutexRelease>
	  osEventFlagsWait(ProcesFlagsHandle, 0x00000002U, osFlagsWaitAny, osWaitForever);
 8001cfe:	e7e6      	b.n	8001cce <StartEpapierTask+0x6e>
 8001d00:	20003bd8 	.word	0x20003bd8
 8001d04:	0800cfcc 	.word	0x0800cfcc
 8001d08:	20003b78 	.word	0x20003b78
 8001d0c:	20000001 	.word	0x20000001
 8001d10:	20003b84 	.word	0x20003b84
 8001d14:	20003b70 	.word	0x20003b70
 8001d18:	20003ad8 	.word	0x20003ad8
 8001d1c:	20003c78 	.word	0x20003c78
 8001d20:	20003b80 	.word	0x20003b80

08001d24 <StartParse>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParse */
void StartParse(void *argument)
{
 8001d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d28:	b097      	sub	sp, #92	; 0x5c
 8001d2a:	af08      	add	r7, sp, #32
 8001d2c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParse */
	char w[30];
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(ParseSemaphoreHandle, osWaitForever);
 8001d2e:	4b7e      	ldr	r3, [pc, #504]	; (8001f28 <StartParse+0x204>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f04f 31ff 	mov.w	r1, #4294967295
 8001d36:	4618      	mov	r0, r3
 8001d38:	f007 f916 	bl	8008f68 <osSemaphoreAcquire>
	  if(hc12Data[0]=='t')
 8001d3c:	4b7b      	ldr	r3, [pc, #492]	; (8001f2c <StartParse+0x208>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b74      	cmp	r3, #116	; 0x74
 8001d42:	d17b      	bne.n	8001e3c <StartParse+0x118>
	  {
		  osMutexAcquire(EpapierDataHandle, osWaitForever);
 8001d44:	4b7a      	ldr	r3, [pc, #488]	; (8001f30 <StartParse+0x20c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f006 fff9 	bl	8008d44 <osMutexAcquire>
		  GFX_DrawString(0, 0, (char*)hc12Data, BLACK, 1);
 8001d52:	2301      	movs	r3, #1
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2300      	movs	r3, #0
 8001d58:	4a74      	ldr	r2, [pc, #464]	; (8001f2c <StartParse+0x208>)
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff f975 	bl	800104c <GFX_DrawString>
		  sprintf(w,"PM1: %d PM2.5: %d PM10: %d temp: %0.2f press: %0.2f hum: %0.2f",PMSData[0],PMSData[1],PMSData[2],temp,p,h);
 8001d62:	4b74      	ldr	r3, [pc, #464]	; (8001f34 <StartParse+0x210>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	469a      	mov	sl, r3
 8001d68:	4b72      	ldr	r3, [pc, #456]	; (8001f34 <StartParse+0x210>)
 8001d6a:	885b      	ldrh	r3, [r3, #2]
 8001d6c:	469b      	mov	fp, r3
 8001d6e:	4b71      	ldr	r3, [pc, #452]	; (8001f34 <StartParse+0x210>)
 8001d70:	889b      	ldrh	r3, [r3, #4]
 8001d72:	461e      	mov	r6, r3
 8001d74:	4b70      	ldr	r3, [pc, #448]	; (8001f38 <StartParse+0x214>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fb95 	bl	80004a8 <__aeabi_f2d>
 8001d7e:	4604      	mov	r4, r0
 8001d80:	460d      	mov	r5, r1
 8001d82:	4b6e      	ldr	r3, [pc, #440]	; (8001f3c <StartParse+0x218>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fb8e 	bl	80004a8 <__aeabi_f2d>
 8001d8c:	4680      	mov	r8, r0
 8001d8e:	4689      	mov	r9, r1
 8001d90:	4b6b      	ldr	r3, [pc, #428]	; (8001f40 <StartParse+0x21c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fb87 	bl	80004a8 <__aeabi_f2d>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	f107 0008 	add.w	r0, r7, #8
 8001da2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001da6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001daa:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001dae:	9600      	str	r6, [sp, #0]
 8001db0:	465b      	mov	r3, fp
 8001db2:	4652      	mov	r2, sl
 8001db4:	4963      	ldr	r1, [pc, #396]	; (8001f44 <StartParse+0x220>)
 8001db6:	f001 ffaf 	bl	8003d18 <sprintf_>
		  GFX_DrawString(0, 20, w, BLACK, 1);
 8001dba:	f107 0208 	add.w	r2, r7, #8
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2114      	movs	r1, #20
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff f940 	bl	800104c <GFX_DrawString>
		  osMutexAcquire(AHT15DataHandle, osWaitForever);
 8001dcc:	4b5e      	ldr	r3, [pc, #376]	; (8001f48 <StartParse+0x224>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f006 ffb5 	bl	8008d44 <osMutexAcquire>
		  sprintf(w,"tempAHT: %0.2f humAHT: %0.2f",tempAHT15,humAHT15);
 8001dda:	4b5c      	ldr	r3, [pc, #368]	; (8001f4c <StartParse+0x228>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fb62 	bl	80004a8 <__aeabi_f2d>
 8001de4:	4604      	mov	r4, r0
 8001de6:	460d      	mov	r5, r1
 8001de8:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <StartParse+0x22c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fb5b 	bl	80004a8 <__aeabi_f2d>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	f107 0008 	add.w	r0, r7, #8
 8001dfa:	e9cd 2300 	strd	r2, r3, [sp]
 8001dfe:	4622      	mov	r2, r4
 8001e00:	462b      	mov	r3, r5
 8001e02:	4954      	ldr	r1, [pc, #336]	; (8001f54 <StartParse+0x230>)
 8001e04:	f001 ff88 	bl	8003d18 <sprintf_>
		  GFX_DrawString(0, 40, w, BLACK, 1);
 8001e08:	f107 0208 	add.w	r2, r7, #8
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	2300      	movs	r3, #0
 8001e12:	2128      	movs	r1, #40	; 0x28
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7ff f919 	bl	800104c <GFX_DrawString>
		  osMutexRelease(AHT15DataHandle);
 8001e1a:	4b4b      	ldr	r3, [pc, #300]	; (8001f48 <StartParse+0x224>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f006 ffdb 	bl	8008dda <osMutexRelease>
		  osMutexRelease(EpapierDataHandle);
 8001e24:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <StartParse+0x20c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f006 ffd6 	bl	8008dda <osMutexRelease>
		  osEventFlagsSet(ProcesFlagsHandle, 0x00000002U);
 8001e2e:	4b4a      	ldr	r3, [pc, #296]	; (8001f58 <StartParse+0x234>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2102      	movs	r1, #2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f006 fe23 	bl	8008a80 <osEventFlagsSet>
 8001e3a:	e071      	b.n	8001f20 <StartParse+0x1fc>
	  }
	  else
	  {
		  osMutexAcquire(hc12DataHandle, osWaitForever);
 8001e3c:	4b47      	ldr	r3, [pc, #284]	; (8001f5c <StartParse+0x238>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	4618      	mov	r0, r3
 8001e46:	f006 ff7d 	bl	8008d44 <osMutexAcquire>
		  PMSData[0]=MakePMSWord(hc12Data[0], hc12Data[1]);
 8001e4a:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <StartParse+0x208>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	4a37      	ldr	r2, [pc, #220]	; (8001f2c <StartParse+0x208>)
 8001e50:	7852      	ldrb	r2, [r2, #1]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fc55 	bl	8001704 <MakePMSWord>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <StartParse+0x210>)
 8001e60:	801a      	strh	r2, [r3, #0]
		  PMSData[1]=MakePMSWord(hc12Data[2], hc12Data[3]);
 8001e62:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <StartParse+0x208>)
 8001e64:	789b      	ldrb	r3, [r3, #2]
 8001e66:	4a31      	ldr	r2, [pc, #196]	; (8001f2c <StartParse+0x208>)
 8001e68:	78d2      	ldrb	r2, [r2, #3]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fc49 	bl	8001704 <MakePMSWord>
 8001e72:	4603      	mov	r3, r0
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b2f      	ldr	r3, [pc, #188]	; (8001f34 <StartParse+0x210>)
 8001e78:	805a      	strh	r2, [r3, #2]
		  PMSData[2]=MakePMSWord(hc12Data[4], hc12Data[5]);
 8001e7a:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <StartParse+0x208>)
 8001e7c:	791b      	ldrb	r3, [r3, #4]
 8001e7e:	4a2b      	ldr	r2, [pc, #172]	; (8001f2c <StartParse+0x208>)
 8001e80:	7952      	ldrb	r2, [r2, #5]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fc3d 	bl	8001704 <MakePMSWord>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <StartParse+0x210>)
 8001e90:	809a      	strh	r2, [r3, #4]
		  uint8_t *j;
		  j=&temp;
 8001e92:	4b29      	ldr	r3, [pc, #164]	; (8001f38 <StartParse+0x214>)
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
		  for(int i=0;i<4;i++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	633b      	str	r3, [r7, #48]	; 0x30
 8001e9a:	e00b      	b.n	8001eb4 <StartParse+0x190>
		  {
			  *j=hc12Data[i+6];
 8001e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9e:	3306      	adds	r3, #6
 8001ea0:	4a22      	ldr	r2, [pc, #136]	; (8001f2c <StartParse+0x208>)
 8001ea2:	5cd2      	ldrb	r2, [r2, r3]
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea6:	701a      	strb	r2, [r3, #0]
			  j++;
 8001ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eaa:	3301      	adds	r3, #1
 8001eac:	637b      	str	r3, [r7, #52]	; 0x34
		  for(int i=0;i<4;i++)
 8001eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	ddf0      	ble.n	8001e9c <StartParse+0x178>
		  }
		  j=&p;
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <StartParse+0x218>)
 8001ebc:	637b      	str	r3, [r7, #52]	; 0x34
		  for(int i=0;i<4;i++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ec2:	e00b      	b.n	8001edc <StartParse+0x1b8>
		  {
			  *j=hc12Data[i+10];
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec6:	330a      	adds	r3, #10
 8001ec8:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <StartParse+0x208>)
 8001eca:	5cd2      	ldrb	r2, [r2, r3]
 8001ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ece:	701a      	strb	r2, [r3, #0]
			  j++;
 8001ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	637b      	str	r3, [r7, #52]	; 0x34
		  for(int i=0;i<4;i++)
 8001ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed8:	3301      	adds	r3, #1
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	ddf0      	ble.n	8001ec4 <StartParse+0x1a0>
		  }
		  j=&h;
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <StartParse+0x21c>)
 8001ee4:	637b      	str	r3, [r7, #52]	; 0x34
		  for(int i=0;i<4;i++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eea:	e00b      	b.n	8001f04 <StartParse+0x1e0>
		  {
			  *j=hc12Data[i+14];
 8001eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eee:	330e      	adds	r3, #14
 8001ef0:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <StartParse+0x208>)
 8001ef2:	5cd2      	ldrb	r2, [r2, r3]
 8001ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef6:	701a      	strb	r2, [r3, #0]
			  j++;
 8001ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efa:	3301      	adds	r3, #1
 8001efc:	637b      	str	r3, [r7, #52]	; 0x34
		  for(int i=0;i<4;i++)
 8001efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f00:	3301      	adds	r3, #1
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	ddf0      	ble.n	8001eec <StartParse+0x1c8>
		  }
		  osMutexRelease(hc12DataHandle);
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <StartParse+0x238>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f006 ff63 	bl	8008dda <osMutexRelease>
		  osEventFlagsSet(ProcesFlagsHandle, 0x00000004U);
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <StartParse+0x234>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2104      	movs	r1, #4
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f006 fdb0 	bl	8008a80 <osEventFlagsSet>
	  }
		buffer_clear();
 8001f20:	f7ff fbd6 	bl	80016d0 <buffer_clear>
	  osSemaphoreAcquire(ParseSemaphoreHandle, osWaitForever);
 8001f24:	e703      	b.n	8001d2e <StartParse+0xa>
 8001f26:	bf00      	nop
 8001f28:	20003b7c 	.word	0x20003b7c
 8001f2c:	20003ad8 	.word	0x20003ad8
 8001f30:	20003b70 	.word	0x20003b70
 8001f34:	20003ad0 	.word	0x20003ad0
 8001f38:	20003b3c 	.word	0x20003b3c
 8001f3c:	20003b40 	.word	0x20003b40
 8001f40:	20003b44 	.word	0x20003b44
 8001f44:	0800ce40 	.word	0x0800ce40
 8001f48:	20003b78 	.word	0x20003b78
 8001f4c:	20003b48 	.word	0x20003b48
 8001f50:	20003b4c 	.word	0x20003b4c
 8001f54:	0800ce80 	.word	0x0800ce80
 8001f58:	20003b80 	.word	0x20003b80
 8001f5c:	20003b74 	.word	0x20003b74

08001f60 <StartAHT15Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAHT15Task */
void StartAHT15Task(void *argument)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAHT15Task */
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(AHT15DataHandle, osWaitForever);
 8001f68:	4b42      	ldr	r3, [pc, #264]	; (8002074 <StartAHT15Task+0x114>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	4618      	mov	r0, r3
 8001f72:	f006 fee7 	bl	8008d44 <osMutexAcquire>
	  uint8_t data[3]={0xac,0x33,0x00};
 8001f76:	4a40      	ldr	r2, [pc, #256]	; (8002078 <StartAHT15Task+0x118>)
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	8019      	strh	r1, [r3, #0]
 8001f82:	3302      	adds	r3, #2
 8001f84:	0c12      	lsrs	r2, r2, #16
 8001f86:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1, addr, data, 3, 1000);
 8001f88:	4b3c      	ldr	r3, [pc, #240]	; (800207c <StartAHT15Task+0x11c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	b299      	uxth	r1, r3
 8001f8e:	f107 0214 	add.w	r2, r7, #20
 8001f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2303      	movs	r3, #3
 8001f9a:	4839      	ldr	r0, [pc, #228]	; (8002080 <StartAHT15Task+0x120>)
 8001f9c:	f003 f954 	bl	8005248 <HAL_I2C_Master_Transmit>
	  osDelay(300);
 8001fa0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001fa4:	f006 fce5 	bl	8008972 <osDelay>
	  uint8_t dataRx[6];
	  HAL_I2C_Master_Receive(&hi2c1, addr, dataRx, 6, 1000);
 8001fa8:	4b34      	ldr	r3, [pc, #208]	; (800207c <StartAHT15Task+0x11c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	b299      	uxth	r1, r3
 8001fae:	f107 020c 	add.w	r2, r7, #12
 8001fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2306      	movs	r3, #6
 8001fba:	4831      	ldr	r0, [pc, #196]	; (8002080 <StartAHT15Task+0x120>)
 8001fbc:	f003 fa42 	bl	8005444 <HAL_I2C_Master_Receive>
	  uint32_t TempRaw=(((dataRx[3]&0x0f)<<16)|(dataRx[4]<<8)|dataRx[5]);
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	041b      	lsls	r3, r3, #16
 8001fc4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001fc8:	7c3b      	ldrb	r3, [r7, #16]
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	7c7a      	ldrb	r2, [r7, #17]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61fb      	str	r3, [r7, #28]
	  tempAHT15=((TempRaw*200.00)/1048576.00) - 50;
 8001fd4:	69f8      	ldr	r0, [r7, #28]
 8001fd6:	f7fe fa45 	bl	8000464 <__aeabi_ui2d>
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <StartAHT15Task+0x124>)
 8001fe0:	f7fe faba 	bl	8000558 <__aeabi_dmul>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <StartAHT15Task+0x128>)
 8001ff2:	f7fe fbdb 	bl	80007ac <__aeabi_ddiv>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	4b22      	ldr	r3, [pc, #136]	; (800208c <StartAHT15Task+0x12c>)
 8002004:	f7fe f8f0 	bl	80001e8 <__aeabi_dsub>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fd84 	bl	8000b1c <__aeabi_d2f>
 8002014:	4603      	mov	r3, r0
 8002016:	4a1e      	ldr	r2, [pc, #120]	; (8002090 <StartAHT15Task+0x130>)
 8002018:	6013      	str	r3, [r2, #0]
	  uint32_t HumRaw=(((dataRx[1]<<16)|(dataRx[2]<<8)|dataRx[3])>>4);
 800201a:	7b7b      	ldrb	r3, [r7, #13]
 800201c:	041a      	lsls	r2, r3, #16
 800201e:	7bbb      	ldrb	r3, [r7, #14]
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	4313      	orrs	r3, r2
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	4313      	orrs	r3, r2
 8002028:	111b      	asrs	r3, r3, #4
 800202a:	61bb      	str	r3, [r7, #24]
	  humAHT15=HumRaw*100.00/1048576.00;
 800202c:	69b8      	ldr	r0, [r7, #24]
 800202e:	f7fe fa19 	bl	8000464 <__aeabi_ui2d>
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <StartAHT15Task+0x134>)
 8002038:	f7fe fa8e 	bl	8000558 <__aeabi_dmul>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <StartAHT15Task+0x128>)
 800204a:	f7fe fbaf 	bl	80007ac <__aeabi_ddiv>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f7fe fd61 	bl	8000b1c <__aeabi_d2f>
 800205a:	4603      	mov	r3, r0
 800205c:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <StartAHT15Task+0x138>)
 800205e:	6013      	str	r3, [r2, #0]
	  osMutexRelease(AHT15DataHandle);
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <StartAHT15Task+0x114>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f006 feb8 	bl	8008dda <osMutexRelease>
	  osDelay(20000);
 800206a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800206e:	f006 fc80 	bl	8008972 <osDelay>
  {
 8002072:	e779      	b.n	8001f68 <StartAHT15Task+0x8>
 8002074:	20003b78 	.word	0x20003b78
 8002078:	0800cebc 	.word	0x0800cebc
 800207c:	20000001 	.word	0x20000001
 8002080:	20003b84 	.word	0x20003b84
 8002084:	40690000 	.word	0x40690000
 8002088:	41300000 	.word	0x41300000
 800208c:	40490000 	.word	0x40490000
 8002090:	20003b48 	.word	0x20003b48
 8002094:	40590000 	.word	0x40590000
 8002098:	20003b4c 	.word	0x20003b4c

0800209c <HAL_UARTEx_RxEventCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, hc12Data, 100);
 80020a8:	2264      	movs	r2, #100	; 0x64
 80020aa:	4906      	ldr	r1, [pc, #24]	; (80020c4 <HAL_UARTEx_RxEventCallback+0x28>)
 80020ac:	4806      	ldr	r0, [pc, #24]	; (80020c8 <HAL_UARTEx_RxEventCallback+0x2c>)
 80020ae:	f005 f9d6 	bl	800745e <HAL_UARTEx_ReceiveToIdle_DMA>
	osSemaphoreRelease(ParseSemaphoreHandle);
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_UARTEx_RxEventCallback+0x30>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f006 ffa8 	bl	800900c <osSemaphoreRelease>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20003ad8 	.word	0x20003ad8
 80020c8:	20003c78 	.word	0x20003c78
 80020cc:	20003b7c 	.word	0x20003b7c

080020d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	4b54      	ldr	r3, [pc, #336]	; (800223c <MX_GPIO_Init+0x16c>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a53      	ldr	r2, [pc, #332]	; (800223c <MX_GPIO_Init+0x16c>)
 80020f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b51      	ldr	r3, [pc, #324]	; (800223c <MX_GPIO_Init+0x16c>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b4d      	ldr	r3, [pc, #308]	; (800223c <MX_GPIO_Init+0x16c>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a4c      	ldr	r2, [pc, #304]	; (800223c <MX_GPIO_Init+0x16c>)
 800210c:	f043 0304 	orr.w	r3, r3, #4
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b4a      	ldr	r3, [pc, #296]	; (800223c <MX_GPIO_Init+0x16c>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b46      	ldr	r3, [pc, #280]	; (800223c <MX_GPIO_Init+0x16c>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a45      	ldr	r2, [pc, #276]	; (800223c <MX_GPIO_Init+0x16c>)
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b43      	ldr	r3, [pc, #268]	; (800223c <MX_GPIO_Init+0x16c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	4b3f      	ldr	r3, [pc, #252]	; (800223c <MX_GPIO_Init+0x16c>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a3e      	ldr	r2, [pc, #248]	; (800223c <MX_GPIO_Init+0x16c>)
 8002144:	f043 0308 	orr.w	r3, r3, #8
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b3c      	ldr	r3, [pc, #240]	; (800223c <MX_GPIO_Init+0x16c>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	4b38      	ldr	r3, [pc, #224]	; (800223c <MX_GPIO_Init+0x16c>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a37      	ldr	r2, [pc, #220]	; (800223c <MX_GPIO_Init+0x16c>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b35      	ldr	r3, [pc, #212]	; (800223c <MX_GPIO_Init+0x16c>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(e_papier_cs_GPIO_Port, e_papier_cs_Pin, GPIO_PIN_SET);
 8002172:	2201      	movs	r2, #1
 8002174:	2110      	movs	r1, #16
 8002176:	4832      	ldr	r0, [pc, #200]	; (8002240 <MX_GPIO_Init+0x170>)
 8002178:	f002 ff08 	bl	8004f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(e_papier_dc_GPIO_Port, e_papier_dc_Pin, GPIO_PIN_RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	2120      	movs	r1, #32
 8002180:	482f      	ldr	r0, [pc, #188]	; (8002240 <MX_GPIO_Init+0x170>)
 8002182:	f002 ff03 	bl	8004f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(e_papier_rst_GPIO_Port, e_papier_rst_Pin, GPIO_PIN_SET);
 8002186:	2201      	movs	r2, #1
 8002188:	2102      	movs	r1, #2
 800218a:	482e      	ldr	r0, [pc, #184]	; (8002244 <MX_GPIO_Init+0x174>)
 800218c:	f002 fefe 	bl	8004f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, led2_Pin|led3_Pin|led_Pin|led4_Pin, GPIO_PIN_RESET);
 8002190:	2200      	movs	r2, #0
 8002192:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002196:	482c      	ldr	r0, [pc, #176]	; (8002248 <MX_GPIO_Init+0x178>)
 8002198:	f002 fef8 	bl	8004f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(hc12_set_GPIO_Port, hc12_set_Pin, GPIO_PIN_SET);
 800219c:	2201      	movs	r2, #1
 800219e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021a2:	482a      	ldr	r0, [pc, #168]	; (800224c <MX_GPIO_Init+0x17c>)
 80021a4:	f002 fef2 	bl	8004f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = e_papier_cs_Pin|e_papier_dc_Pin;
 80021a8:	2330      	movs	r3, #48	; 0x30
 80021aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ac:	2301      	movs	r3, #1
 80021ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4619      	mov	r1, r3
 80021be:	4820      	ldr	r0, [pc, #128]	; (8002240 <MX_GPIO_Init+0x170>)
 80021c0:	f002 fd48 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = e_papier_rst_Pin;
 80021c4:	2302      	movs	r3, #2
 80021c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c8:	2301      	movs	r3, #1
 80021ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(e_papier_rst_GPIO_Port, &GPIO_InitStruct);
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	4619      	mov	r1, r3
 80021da:	481a      	ldr	r0, [pc, #104]	; (8002244 <MX_GPIO_Init+0x174>)
 80021dc:	f002 fd3a 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = e_papier_busy_Pin;
 80021e0:	2304      	movs	r3, #4
 80021e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(e_papier_busy_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4619      	mov	r1, r3
 80021f2:	4814      	ldr	r0, [pc, #80]	; (8002244 <MX_GPIO_Init+0x174>)
 80021f4:	f002 fd2e 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = led2_Pin|led3_Pin|led_Pin|led4_Pin;
 80021f8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80021fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021fe:	2301      	movs	r3, #1
 8002200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	480d      	ldr	r0, [pc, #52]	; (8002248 <MX_GPIO_Init+0x178>)
 8002212:	f002 fd1f 	bl	8004c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = hc12_set_Pin;
 8002216:	f44f 7380 	mov.w	r3, #256	; 0x100
 800221a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221c:	2301      	movs	r3, #1
 800221e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(hc12_set_GPIO_Port, &GPIO_InitStruct);
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4619      	mov	r1, r3
 800222e:	4807      	ldr	r0, [pc, #28]	; (800224c <MX_GPIO_Init+0x17c>)
 8002230:	f002 fd10 	bl	8004c54 <HAL_GPIO_Init>

}
 8002234:	bf00      	nop
 8002236:	3728      	adds	r7, #40	; 0x28
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40023800 	.word	0x40023800
 8002240:	40020800 	.word	0x40020800
 8002244:	40020400 	.word	0x40020400
 8002248:	40020c00 	.word	0x40020c00
 800224c:	40020000 	.word	0x40020000

08002250 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <MX_I2C1_Init+0x50>)
 8002256:	4a13      	ldr	r2, [pc, #76]	; (80022a4 <MX_I2C1_Init+0x54>)
 8002258:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <MX_I2C1_Init+0x50>)
 800225c:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <MX_I2C1_Init+0x58>)
 800225e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <MX_I2C1_Init+0x50>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <MX_I2C1_Init+0x50>)
 8002268:	2200      	movs	r2, #0
 800226a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <MX_I2C1_Init+0x50>)
 800226e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002272:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <MX_I2C1_Init+0x50>)
 8002276:	2200      	movs	r2, #0
 8002278:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <MX_I2C1_Init+0x50>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <MX_I2C1_Init+0x50>)
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <MX_I2C1_Init+0x50>)
 8002288:	2200      	movs	r2, #0
 800228a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800228c:	4804      	ldr	r0, [pc, #16]	; (80022a0 <MX_I2C1_Init+0x50>)
 800228e:	f002 fe97 	bl	8004fc0 <HAL_I2C_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002298:	f000 f8f8 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20003b84 	.word	0x20003b84
 80022a4:	40005400 	.word	0x40005400
 80022a8:	000186a0 	.word	0x000186a0

080022ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a19      	ldr	r2, [pc, #100]	; (8002330 <HAL_I2C_MspInit+0x84>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d12b      	bne.n	8002326 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	4b18      	ldr	r3, [pc, #96]	; (8002334 <HAL_I2C_MspInit+0x88>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a17      	ldr	r2, [pc, #92]	; (8002334 <HAL_I2C_MspInit+0x88>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_I2C_MspInit+0x88>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ea:	23c0      	movs	r3, #192	; 0xc0
 80022ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ee:	2312      	movs	r3, #18
 80022f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f6:	2303      	movs	r3, #3
 80022f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022fa:	2304      	movs	r3, #4
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fe:	f107 0314 	add.w	r3, r7, #20
 8002302:	4619      	mov	r1, r3
 8002304:	480c      	ldr	r0, [pc, #48]	; (8002338 <HAL_I2C_MspInit+0x8c>)
 8002306:	f002 fca5 	bl	8004c54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <HAL_I2C_MspInit+0x88>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a08      	ldr	r2, [pc, #32]	; (8002334 <HAL_I2C_MspInit+0x88>)
 8002314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_I2C_MspInit+0x88>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002326:	bf00      	nop
 8002328:	3728      	adds	r7, #40	; 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40005400 	.word	0x40005400
 8002334:	40023800 	.word	0x40023800
 8002338:	40020400 	.word	0x40020400

0800233c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002340:	f001 ff3e 	bl	80041c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002344:	f000 f814 	bl	8002370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002348:	f7ff fec2 	bl	80020d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800234c:	f7fe ffa2 	bl	8001294 <MX_DMA_Init>
  MX_SPI2_Init();
 8002350:	f001 fcfe 	bl	8003d50 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8002354:	f001 fe66 	bl	8004024 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002358:	f7ff ff7a 	bl	8002250 <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800235c:	f000 f870 	bl	8002440 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002360:	f006 fa16 	bl	8008790 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002364:	f7ff f9e6 	bl	8001734 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002368:	f006 fa36 	bl	80087d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800236c:	e7fe      	b.n	800236c <main+0x30>
	...

08002370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b094      	sub	sp, #80	; 0x50
 8002374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002376:	f107 0320 	add.w	r3, r7, #32
 800237a:	2230      	movs	r2, #48	; 0x30
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f00a fcfe 	bl	800cd80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	4b27      	ldr	r3, [pc, #156]	; (8002438 <SystemClock_Config+0xc8>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	4a26      	ldr	r2, [pc, #152]	; (8002438 <SystemClock_Config+0xc8>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a2:	6413      	str	r3, [r2, #64]	; 0x40
 80023a4:	4b24      	ldr	r3, [pc, #144]	; (8002438 <SystemClock_Config+0xc8>)
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023b0:	2300      	movs	r3, #0
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	4b21      	ldr	r3, [pc, #132]	; (800243c <SystemClock_Config+0xcc>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a20      	ldr	r2, [pc, #128]	; (800243c <SystemClock_Config+0xcc>)
 80023ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	4b1e      	ldr	r3, [pc, #120]	; (800243c <SystemClock_Config+0xcc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023cc:	2301      	movs	r3, #1
 80023ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d6:	2302      	movs	r3, #2
 80023d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023e0:	2304      	movs	r3, #4
 80023e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80023e4:	2364      	movs	r3, #100	; 0x64
 80023e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023e8:	2302      	movs	r3, #2
 80023ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023ec:	2304      	movs	r3, #4
 80023ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f0:	f107 0320 	add.w	r3, r7, #32
 80023f4:	4618      	mov	r0, r3
 80023f6:	f003 fd79 	bl	8005eec <HAL_RCC_OscConfig>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002400:	f000 f844 	bl	800248c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002404:	230f      	movs	r3, #15
 8002406:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002408:	2302      	movs	r3, #2
 800240a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002414:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800241a:	f107 030c 	add.w	r3, r7, #12
 800241e:	2103      	movs	r1, #3
 8002420:	4618      	mov	r0, r3
 8002422:	f003 ffdb 	bl	80063dc <HAL_RCC_ClockConfig>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800242c:	f000 f82e 	bl	800248c <Error_Handler>
  }
}
 8002430:	bf00      	nop
 8002432:	3750      	adds	r7, #80	; 0x50
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40023800 	.word	0x40023800
 800243c:	40007000 	.word	0x40007000

08002440 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002444:	2200      	movs	r2, #0
 8002446:	2105      	movs	r1, #5
 8002448:	203a      	movs	r0, #58	; 0x3a
 800244a:	f001 ffd7 	bl	80043fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800244e:	203a      	movs	r0, #58	; 0x3a
 8002450:	f001 fff0 	bl	8004434 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	2105      	movs	r1, #5
 8002458:	2025      	movs	r0, #37	; 0x25
 800245a:	f001 ffcf 	bl	80043fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800245e:	2025      	movs	r0, #37	; 0x25
 8002460:	f001 ffe8 	bl	8004434 <HAL_NVIC_EnableIRQ>
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a04      	ldr	r2, [pc, #16]	; (8002488 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d101      	bne.n	800247e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800247a:	f001 fec3 	bl	8004204 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40014800 	.word	0x40014800

0800248c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002490:	b672      	cpsid	i
}
 8002492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002494:	e7fe      	b.n	8002494 <Error_Handler+0x8>

08002496 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8002496:	b480      	push	{r7}
 8002498:	b085      	sub	sp, #20
 800249a:	af00      	add	r7, sp, #0
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	4603      	mov	r3, r0
 80024a4:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d204      	bcs.n	80024b8 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4413      	add	r3, r2
 80024b4:	7bfa      	ldrb	r2, [r7, #15]
 80024b6:	701a      	strb	r2, [r3, #0]
  }
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	4603      	mov	r3, r0
 80024d2:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	e002      	b.n	80024f6 <_strnlen_s+0x16>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3301      	adds	r3, #1
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d004      	beq.n	8002508 <_strnlen_s+0x28>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	1e5a      	subs	r2, r3, #1
 8002502:	603a      	str	r2, [r7, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f3      	bne.n	80024f0 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	1ad3      	subs	r3, r2, r3
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	2b2f      	cmp	r3, #47	; 0x2f
 8002528:	d904      	bls.n	8002534 <_is_digit+0x1a>
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	2b39      	cmp	r3, #57	; 0x39
 800252e:	d801      	bhi.n	8002534 <_is_digit+0x1a>
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <_is_digit+0x1c>
 8002534:	2300      	movs	r3, #0
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	b2db      	uxtb	r3, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002554:	e00e      	b.n	8002574 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4618      	mov	r0, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	1c59      	adds	r1, r3, #1
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6011      	str	r1, [r2, #0]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	4403      	add	r3, r0
 8002570:	3b30      	subs	r3, #48	; 0x30
 8002572:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff ffcd 	bl	800251a <_is_digit>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1e7      	bne.n	8002556 <_atoi+0xe>
  }
  return i;
 8002586:	68fb      	ldr	r3, [r7, #12]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80025a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d125      	bne.n	80025f8 <_out_rev+0x68>
 80025ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d120      	bne.n	80025f8 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80025b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	e00a      	b.n	80025d2 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	1c53      	adds	r3, r2, #1
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	68fc      	ldr	r4, [r7, #12]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	2020      	movs	r0, #32
 80025ca:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3301      	adds	r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d3f0      	bcc.n	80025bc <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 80025da:	e00d      	b.n	80025f8 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 80025dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025de:	3b01      	subs	r3, #1
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e6:	4413      	add	r3, r2
 80025e8:	7818      	ldrb	r0, [r3, #0]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	1c53      	adds	r3, r2, #1
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	68fc      	ldr	r4, [r7, #12]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	47a0      	blx	r4
  while (len) {
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1ee      	bne.n	80025dc <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80025fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00e      	beq.n	8002626 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8002608:	e007      	b.n	800261a <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	1c53      	adds	r3, r2, #1
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	68fc      	ldr	r4, [r7, #12]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	2020      	movs	r0, #32
 8002618:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002622:	429a      	cmp	r2, r3
 8002624:	d8f1      	bhi.n	800260a <_out_rev+0x7a>
    }
  }

  return idx;
 8002626:	687b      	ldr	r3, [r7, #4]
}
 8002628:	4618      	mov	r0, r3
 800262a:	371c      	adds	r7, #28
 800262c:	46bd      	mov	sp, r7
 800262e:	bd90      	pop	{r4, r7, pc}

08002630 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b088      	sub	sp, #32
 8002634:	af04      	add	r7, sp, #16
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d136      	bne.n	80026b6 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264a:	2b00      	cmp	r3, #0
 800264c:	d018      	beq.n	8002680 <_ntoa_format+0x50>
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <_ntoa_format+0x50>
 8002658:	f897 3020 	ldrb.w	r3, [r7, #32]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d104      	bne.n	800266a <_ntoa_format+0x3a>
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <_ntoa_format+0x50>
      width--;
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	3b01      	subs	r3, #1
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002670:	e006      	b.n	8002680 <_ntoa_format+0x50>
      buf[len++] = '0';
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	61fa      	str	r2, [r7, #28]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4413      	add	r3, r2
 800267c:	2230      	movs	r2, #48	; 0x30
 800267e:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002684:	429a      	cmp	r2, r3
 8002686:	d20a      	bcs.n	800269e <_ntoa_format+0x6e>
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	2b1f      	cmp	r3, #31
 800268c:	d9f1      	bls.n	8002672 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800268e:	e006      	b.n	800269e <_ntoa_format+0x6e>
      buf[len++] = '0';
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	61fa      	str	r2, [r7, #28]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4413      	add	r3, r2
 800269a:	2230      	movs	r2, #48	; 0x30
 800269c:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d006      	beq.n	80026b6 <_ntoa_format+0x86>
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d202      	bcs.n	80026b6 <_ntoa_format+0x86>
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	2b1f      	cmp	r3, #31
 80026b4:	d9ec      	bls.n	8002690 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d058      	beq.n	8002772 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80026c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <_ntoa_format+0xc8>
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <_ntoa_format+0xc8>
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d003      	beq.n	80026e0 <_ntoa_format+0xb0>
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	429a      	cmp	r2, r3
 80026de:	d10b      	bne.n	80026f8 <_ntoa_format+0xc8>
      len--;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d005      	beq.n	80026f8 <_ntoa_format+0xc8>
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	d102      	bne.n	80026f8 <_ntoa_format+0xc8>
        len--;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d10f      	bne.n	800271e <_ntoa_format+0xee>
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <_ntoa_format+0xee>
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	2b1f      	cmp	r3, #31
 800270c:	d807      	bhi.n	800271e <_ntoa_format+0xee>
      buf[len++] = 'x';
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	61fa      	str	r2, [r7, #28]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4413      	add	r3, r2
 8002718:	2278      	movs	r2, #120	; 0x78
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	e01f      	b.n	800275e <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	2b10      	cmp	r3, #16
 8002722:	d10f      	bne.n	8002744 <_ntoa_format+0x114>
 8002724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <_ntoa_format+0x114>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	2b1f      	cmp	r3, #31
 8002732:	d807      	bhi.n	8002744 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	61fa      	str	r2, [r7, #28]
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4413      	add	r3, r2
 800273e:	2258      	movs	r2, #88	; 0x58
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	e00c      	b.n	800275e <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	2b02      	cmp	r3, #2
 8002748:	d109      	bne.n	800275e <_ntoa_format+0x12e>
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	2b1f      	cmp	r3, #31
 800274e:	d806      	bhi.n	800275e <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	61fa      	str	r2, [r7, #28]
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4413      	add	r3, r2
 800275a:	2262      	movs	r2, #98	; 0x62
 800275c:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	2b1f      	cmp	r3, #31
 8002762:	d806      	bhi.n	8002772 <_ntoa_format+0x142>
      buf[len++] = '0';
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	61fa      	str	r2, [r7, #28]
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4413      	add	r3, r2
 800276e:	2230      	movs	r2, #48	; 0x30
 8002770:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	2b1f      	cmp	r3, #31
 8002776:	d824      	bhi.n	80027c2 <_ntoa_format+0x192>
    if (negative) {
 8002778:	f897 3020 	ldrb.w	r3, [r7, #32]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <_ntoa_format+0x160>
      buf[len++] = '-';
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	61fa      	str	r2, [r7, #28]
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4413      	add	r3, r2
 800278a:	222d      	movs	r2, #45	; 0x2d
 800278c:	701a      	strb	r2, [r3, #0]
 800278e:	e018      	b.n	80027c2 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8002790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	61fa      	str	r2, [r7, #28]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4413      	add	r3, r2
 80027a4:	222b      	movs	r2, #43	; 0x2b
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e00b      	b.n	80027c2 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80027aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d006      	beq.n	80027c2 <_ntoa_format+0x192>
      buf[len++] = ' ';
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	61fa      	str	r2, [r7, #28]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4413      	add	r3, r2
 80027be:	2220      	movs	r2, #32
 80027c0:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	9303      	str	r3, [sp, #12]
 80027c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f7ff fed9 	bl	8002590 <_out_rev>
 80027de:	4603      	mov	r3, r0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b096      	sub	sp, #88	; 0x58
 80027ec:	af08      	add	r7, sp, #32
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80027fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d103      	bne.n	8002808 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002802:	f023 0310 	bic.w	r3, r3, #16
 8002806:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <_ntoa_long+0x30>
 8002812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002814:	2b00      	cmp	r3, #0
 8002816:	d032      	beq.n	800287e <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8002818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800281a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800281c:	fbb3 f2f2 	udiv	r2, r3, r2
 8002820:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002822:	fb01 f202 	mul.w	r2, r1, r2
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800282c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002830:	2b09      	cmp	r3, #9
 8002832:	d804      	bhi.n	800283e <_ntoa_long+0x56>
 8002834:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002838:	3330      	adds	r3, #48	; 0x30
 800283a:	b2da      	uxtb	r2, r3
 800283c:	e00d      	b.n	800285a <_ntoa_long+0x72>
 800283e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <_ntoa_long+0x64>
 8002848:	2241      	movs	r2, #65	; 0x41
 800284a:	e000      	b.n	800284e <_ntoa_long+0x66>
 800284c:	2261      	movs	r2, #97	; 0x61
 800284e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002852:	4413      	add	r3, r2
 8002854:	b2db      	uxtb	r3, r3
 8002856:	3b0a      	subs	r3, #10
 8002858:	b2da      	uxtb	r2, r3
 800285a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285c:	1c59      	adds	r1, r3, #1
 800285e:	6379      	str	r1, [r7, #52]	; 0x34
 8002860:	3338      	adds	r3, #56	; 0x38
 8002862:	443b      	add	r3, r7
 8002864:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002868:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800286a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <_ntoa_long+0x96>
 8002878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800287a:	2b1f      	cmp	r3, #31
 800287c:	d9cc      	bls.n	8002818 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800287e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002880:	9306      	str	r3, [sp, #24]
 8002882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002884:	9305      	str	r3, [sp, #20]
 8002886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002888:	9304      	str	r3, [sp, #16]
 800288a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800288c:	9303      	str	r3, [sp, #12]
 800288e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002892:	9302      	str	r3, [sp, #8]
 8002894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	f107 0310 	add.w	r3, r7, #16
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7ff fec3 	bl	8002630 <_ntoa_format>
 80028aa:	4603      	mov	r3, r0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3738      	adds	r7, #56	; 0x38
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b096      	sub	sp, #88	; 0x58
 80028b8:	af08      	add	r7, sp, #32
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
 80028c0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80028c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028ca:	4313      	orrs	r3, r2
 80028cc:	d103      	bne.n	80028d6 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80028ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028d0:	f023 0310 	bic.w	r3, r3, #16
 80028d4:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80028d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <_ntoa_long_long+0x34>
 80028e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028e4:	4313      	orrs	r3, r2
 80028e6:	d037      	beq.n	8002958 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 80028e8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80028ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028f0:	f7fe f964 	bl	8000bbc <__aeabi_uldivmod>
 80028f4:	4613      	mov	r3, r2
 80028f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80028fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028fe:	2b09      	cmp	r3, #9
 8002900:	d804      	bhi.n	800290c <_ntoa_long_long+0x58>
 8002902:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002906:	3330      	adds	r3, #48	; 0x30
 8002908:	b2da      	uxtb	r2, r3
 800290a:	e00d      	b.n	8002928 <_ntoa_long_long+0x74>
 800290c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <_ntoa_long_long+0x66>
 8002916:	2241      	movs	r2, #65	; 0x41
 8002918:	e000      	b.n	800291c <_ntoa_long_long+0x68>
 800291a:	2261      	movs	r2, #97	; 0x61
 800291c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002920:	4413      	add	r3, r2
 8002922:	b2db      	uxtb	r3, r3
 8002924:	3b0a      	subs	r3, #10
 8002926:	b2da      	uxtb	r2, r3
 8002928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292a:	1c59      	adds	r1, r3, #1
 800292c:	6379      	str	r1, [r7, #52]	; 0x34
 800292e:	3338      	adds	r3, #56	; 0x38
 8002930:	443b      	add	r3, r7
 8002932:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8002936:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800293a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800293e:	f7fe f93d 	bl	8000bbc <__aeabi_uldivmod>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800294a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800294e:	4313      	orrs	r3, r2
 8002950:	d002      	beq.n	8002958 <_ntoa_long_long+0xa4>
 8002952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002954:	2b1f      	cmp	r3, #31
 8002956:	d9c7      	bls.n	80028e8 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800295a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800295c:	9206      	str	r2, [sp, #24]
 800295e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002960:	9205      	str	r2, [sp, #20]
 8002962:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002964:	9204      	str	r2, [sp, #16]
 8002966:	9303      	str	r3, [sp, #12]
 8002968:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800296c:	9302      	str	r3, [sp, #8]
 800296e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	f107 0310 	add.w	r3, r7, #16
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7ff fe56 	bl	8002630 <_ntoa_format>
 8002984:	4603      	mov	r3, r0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3738      	adds	r7, #56	; 0x38
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b09d      	sub	sp, #116	; 0x74
 8002994:	af04      	add	r7, sp, #16
 8002996:	6178      	str	r0, [r7, #20]
 8002998:	6139      	str	r1, [r7, #16]
 800299a:	60fa      	str	r2, [r7, #12]
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80029b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029ba:	f7fe f835 	bl	8000a28 <__aeabi_dcmpeq>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10f      	bne.n	80029e4 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80029c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029c6:	9303      	str	r3, [sp, #12]
 80029c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ca:	9302      	str	r3, [sp, #8]
 80029cc:	2303      	movs	r3, #3
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	4ba7      	ldr	r3, [pc, #668]	; (8002c70 <_ftoa+0x2e0>)
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	6939      	ldr	r1, [r7, #16]
 80029da:	6978      	ldr	r0, [r7, #20]
 80029dc:	f7ff fdd8 	bl	8002590 <_out_rev>
 80029e0:	4603      	mov	r3, r0
 80029e2:	e222      	b.n	8002e2a <_ftoa+0x49a>
  if (value < -DBL_MAX)
 80029e4:	f04f 32ff 	mov.w	r2, #4294967295
 80029e8:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80029ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029f0:	f7fe f824 	bl	8000a3c <__aeabi_dcmplt>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00f      	beq.n	8002a1a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80029fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029fc:	9303      	str	r3, [sp, #12]
 80029fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a00:	9302      	str	r3, [sp, #8]
 8002a02:	2304      	movs	r3, #4
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	4b9b      	ldr	r3, [pc, #620]	; (8002c74 <_ftoa+0x2e4>)
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	6939      	ldr	r1, [r7, #16]
 8002a10:	6978      	ldr	r0, [r7, #20]
 8002a12:	f7ff fdbd 	bl	8002590 <_out_rev>
 8002a16:	4603      	mov	r3, r0
 8002a18:	e207      	b.n	8002e2a <_ftoa+0x49a>
  if (value > DBL_MAX)
 8002a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a1e:	4b96      	ldr	r3, [pc, #600]	; (8002c78 <_ftoa+0x2e8>)
 8002a20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a24:	f7fe f828 	bl	8000a78 <__aeabi_dcmpgt>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d01d      	beq.n	8002a6a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <_ftoa+0xac>
 8002a38:	4b90      	ldr	r3, [pc, #576]	; (8002c7c <_ftoa+0x2ec>)
 8002a3a:	e000      	b.n	8002a3e <_ftoa+0xae>
 8002a3c:	4b90      	ldr	r3, [pc, #576]	; (8002c80 <_ftoa+0x2f0>)
 8002a3e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002a40:	f002 0204 	and.w	r2, r2, #4
 8002a44:	2a00      	cmp	r2, #0
 8002a46:	d001      	beq.n	8002a4c <_ftoa+0xbc>
 8002a48:	2204      	movs	r2, #4
 8002a4a:	e000      	b.n	8002a4e <_ftoa+0xbe>
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002a50:	9103      	str	r1, [sp, #12]
 8002a52:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002a54:	9102      	str	r1, [sp, #8]
 8002a56:	9201      	str	r2, [sp, #4]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	6939      	ldr	r1, [r7, #16]
 8002a60:	6978      	ldr	r0, [r7, #20]
 8002a62:	f7ff fd95 	bl	8002590 <_out_rev>
 8002a66:	4603      	mov	r3, r0
 8002a68:	e1df      	b.n	8002e2a <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002a6a:	a37d      	add	r3, pc, #500	; (adr r3, 8002c60 <_ftoa+0x2d0>)
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a74:	f7fe f800 	bl	8000a78 <__aeabi_dcmpgt>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <_ftoa+0x102>
 8002a7e:	a37a      	add	r3, pc, #488	; (adr r3, 8002c68 <_ftoa+0x2d8>)
 8002a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a88:	f7fd ffd8 	bl	8000a3c <__aeabi_dcmplt>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00f      	beq.n	8002ab2 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a94:	9302      	str	r3, [sp, #8]
 8002a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	ed97 0b00 	vldr	d0, [r7]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	6939      	ldr	r1, [r7, #16]
 8002aa8:	6978      	ldr	r0, [r7, #20]
 8002aaa:	f000 f9c9 	bl	8002e40 <_etoa>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	e1bb      	b.n	8002e2a <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ac4:	f7fd ffba 	bl	8000a3c <__aeabi_dcmplt>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00e      	beq.n	8002aec <_ftoa+0x15c>
    negative = true;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8002ad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ad8:	f04f 0000 	mov.w	r0, #0
 8002adc:	f04f 0100 	mov.w	r1, #0
 8002ae0:	f7fd fb82 	bl	80001e8 <__aeabi_dsub>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8002aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10d      	bne.n	8002b12 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002af6:	2306      	movs	r3, #6
 8002af8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002afa:	e00a      	b.n	8002b12 <_ftoa+0x182>
    buf[len++] = '0';
 8002afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b02:	3360      	adds	r3, #96	; 0x60
 8002b04:	443b      	add	r3, r7
 8002b06:	2230      	movs	r2, #48	; 0x30
 8002b08:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002b0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8002b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b14:	2b1f      	cmp	r3, #31
 8002b16:	d802      	bhi.n	8002b1e <_ftoa+0x18e>
 8002b18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b1a:	2b09      	cmp	r3, #9
 8002b1c:	d8ee      	bhi.n	8002afc <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002b1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b22:	f7fd ffb3 	bl	8000a8c <__aeabi_d2iz>
 8002b26:	4603      	mov	r3, r0
 8002b28:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8002b2a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002b2c:	f7fd fcaa 	bl	8000484 <__aeabi_i2d>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b38:	f7fd fb56 	bl	80001e8 <__aeabi_dsub>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	4a4f      	ldr	r2, [pc, #316]	; (8002c84 <_ftoa+0x2f4>)
 8002b46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b50:	f7fd fd02 	bl	8000558 <__aeabi_dmul>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8002b5c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b60:	f7fd ffbc 	bl	8000adc <__aeabi_d2uiz>
 8002b64:	4603      	mov	r3, r0
 8002b66:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8002b68:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002b6a:	f7fd fc7b 	bl	8000464 <__aeabi_ui2d>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b76:	f7fd fb37 	bl	80001e8 <__aeabi_dsub>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	4b40      	ldr	r3, [pc, #256]	; (8002c88 <_ftoa+0x2f8>)
 8002b88:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002b8c:	f7fd ff74 	bl	8000a78 <__aeabi_dcmpgt>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d016      	beq.n	8002bc4 <_ftoa+0x234>
    ++frac;
 8002b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b98:	3301      	adds	r3, #1
 8002b9a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8002b9c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002b9e:	f7fd fc61 	bl	8000464 <__aeabi_ui2d>
 8002ba2:	4a38      	ldr	r2, [pc, #224]	; (8002c84 <_ftoa+0x2f4>)
 8002ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	f7fd ff59 	bl	8000a64 <__aeabi_dcmpge>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01a      	beq.n	8002bee <_ftoa+0x25e>
      frac = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8002bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	657b      	str	r3, [r7, #84]	; 0x54
 8002bc2:	e014      	b.n	8002bee <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	4b2f      	ldr	r3, [pc, #188]	; (8002c88 <_ftoa+0x2f8>)
 8002bca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002bce:	f7fd ff35 	bl	8000a3c <__aeabi_dcmplt>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10a      	bne.n	8002bee <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8002bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <_ftoa+0x258>
 8002bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d002      	beq.n	8002bee <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8002be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bea:	3301      	adds	r3, #1
 8002bec:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8002bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d14b      	bne.n	8002c8c <_ftoa+0x2fc>
    diff = value - (double)whole;
 8002bf4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002bf6:	f7fd fc45 	bl	8000484 <__aeabi_i2d>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c02:	f7fd faf1 	bl	80001e8 <__aeabi_dsub>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002c0e:	2301      	movs	r3, #1
 8002c10:	461c      	mov	r4, r3
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	4b1c      	ldr	r3, [pc, #112]	; (8002c88 <_ftoa+0x2f8>)
 8002c18:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002c1c:	f7fd ff0e 	bl	8000a3c <__aeabi_dcmplt>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <_ftoa+0x29a>
 8002c26:	2300      	movs	r3, #0
 8002c28:	461c      	mov	r4, r3
 8002c2a:	b2e3      	uxtb	r3, r4
 8002c2c:	f083 0301 	eor.w	r3, r3, #1
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <_ftoa+0x2ba>
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <_ftoa+0x2f8>)
 8002c3c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002c40:	f7fd ff1a 	bl	8000a78 <__aeabi_dcmpgt>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d064      	beq.n	8002d14 <_ftoa+0x384>
 8002c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8081 	beq.w	8002d58 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8002c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c58:	3301      	adds	r3, #1
 8002c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c5c:	e07c      	b.n	8002d58 <_ftoa+0x3c8>
 8002c5e:	bf00      	nop
 8002c60:	00000000 	.word	0x00000000
 8002c64:	41cdcd65 	.word	0x41cdcd65
 8002c68:	00000000 	.word	0x00000000
 8002c6c:	c1cdcd65 	.word	0xc1cdcd65
 8002c70:	0800cec0 	.word	0x0800cec0
 8002c74:	0800cec4 	.word	0x0800cec4
 8002c78:	7fefffff 	.word	0x7fefffff
 8002c7c:	0800cecc 	.word	0x0800cecc
 8002c80:	0800ced4 	.word	0x0800ced4
 8002c84:	0800d300 	.word	0x0800d300
 8002c88:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8002c8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002c90:	e01f      	b.n	8002cd2 <_ftoa+0x342>
      --count;
 8002c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c94:	3b01      	subs	r3, #1
 8002c96:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8002c98:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002c9a:	4b66      	ldr	r3, [pc, #408]	; (8002e34 <_ftoa+0x4a4>)
 8002c9c:	fba3 2301 	umull	r2, r3, r3, r1
 8002ca0:	08da      	lsrs	r2, r3, #3
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	1aca      	subs	r2, r1, r3
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb0:	1c59      	adds	r1, r3, #1
 8002cb2:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002cb4:	3230      	adds	r2, #48	; 0x30
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	3360      	adds	r3, #96	; 0x60
 8002cba:	443b      	add	r3, r7
 8002cbc:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8002cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc2:	4a5c      	ldr	r2, [pc, #368]	; (8002e34 <_ftoa+0x4a4>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	08db      	lsrs	r3, r3, #3
 8002cca:	653b      	str	r3, [r7, #80]	; 0x50
 8002ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cd4:	2b1f      	cmp	r3, #31
 8002cd6:	d9dc      	bls.n	8002c92 <_ftoa+0x302>
 8002cd8:	e009      	b.n	8002cee <_ftoa+0x35e>
        break;
 8002cda:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002cdc:	e007      	b.n	8002cee <_ftoa+0x35e>
      buf[len++] = '0';
 8002cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ce4:	3360      	adds	r3, #96	; 0x60
 8002ce6:	443b      	add	r3, r7
 8002ce8:	2230      	movs	r2, #48	; 0x30
 8002cea:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf0:	2b1f      	cmp	r3, #31
 8002cf2:	d804      	bhi.n	8002cfe <_ftoa+0x36e>
 8002cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf6:	1e5a      	subs	r2, r3, #1
 8002cf8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1ef      	bne.n	8002cde <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d00:	2b1f      	cmp	r3, #31
 8002d02:	d829      	bhi.n	8002d58 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8002d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d0a:	3360      	adds	r3, #96	; 0x60
 8002d0c:	443b      	add	r3, r7
 8002d0e:	222e      	movs	r2, #46	; 0x2e
 8002d10:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002d14:	e020      	b.n	8002d58 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8002d16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d18:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <_ftoa+0x4a8>)
 8002d1a:	fb83 1302 	smull	r1, r3, r3, r2
 8002d1e:	1099      	asrs	r1, r3, #2
 8002d20:	17d3      	asrs	r3, r2, #31
 8002d22:	1ac9      	subs	r1, r1, r3
 8002d24:	460b      	mov	r3, r1
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	1ad1      	subs	r1, r2, r3
 8002d2e:	b2ca      	uxtb	r2, r1
 8002d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d32:	1c59      	adds	r1, r3, #1
 8002d34:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002d36:	3230      	adds	r2, #48	; 0x30
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	3360      	adds	r3, #96	; 0x60
 8002d3c:	443b      	add	r3, r7
 8002d3e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8002d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d44:	4a3c      	ldr	r2, [pc, #240]	; (8002e38 <_ftoa+0x4a8>)
 8002d46:	fb82 1203 	smull	r1, r2, r2, r3
 8002d4a:	1092      	asrs	r2, r2, #2
 8002d4c:	17db      	asrs	r3, r3, #31
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	657b      	str	r3, [r7, #84]	; 0x54
 8002d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d5a:	2b1f      	cmp	r3, #31
 8002d5c:	d9db      	bls.n	8002d16 <_ftoa+0x386>
 8002d5e:	e000      	b.n	8002d62 <_ftoa+0x3d2>
      break;
 8002d60:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d123      	bne.n	8002db4 <_ftoa+0x424>
 8002d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d01e      	beq.n	8002db4 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d014      	beq.n	8002da6 <_ftoa+0x416>
 8002d7c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d104      	bne.n	8002d8e <_ftoa+0x3fe>
 8002d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <_ftoa+0x416>
      width--;
 8002d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d90:	3b01      	subs	r3, #1
 8002d92:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002d94:	e007      	b.n	8002da6 <_ftoa+0x416>
      buf[len++] = '0';
 8002d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002d9c:	3360      	adds	r3, #96	; 0x60
 8002d9e:	443b      	add	r3, r7
 8002da0:	2230      	movs	r2, #48	; 0x30
 8002da2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002da6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d202      	bcs.n	8002db4 <_ftoa+0x424>
 8002dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db0:	2b1f      	cmp	r3, #31
 8002db2:	d9f0      	bls.n	8002d96 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db6:	2b1f      	cmp	r3, #31
 8002db8:	d827      	bhi.n	8002e0a <_ftoa+0x47a>
    if (negative) {
 8002dba:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <_ftoa+0x444>
      buf[len++] = '-';
 8002dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc4:	1c5a      	adds	r2, r3, #1
 8002dc6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002dc8:	3360      	adds	r3, #96	; 0x60
 8002dca:	443b      	add	r3, r7
 8002dcc:	222d      	movs	r2, #45	; 0x2d
 8002dce:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002dd2:	e01a      	b.n	8002e0a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8002dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002de4:	3360      	adds	r3, #96	; 0x60
 8002de6:	443b      	add	r3, r7
 8002de8:	222b      	movs	r2, #43	; 0x2b
 8002dea:	f803 2c48 	strb.w	r2, [r3, #-72]
 8002dee:	e00c      	b.n	8002e0a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8002df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <_ftoa+0x47a>
      buf[len++] = ' ';
 8002dfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002e00:	3360      	adds	r3, #96	; 0x60
 8002e02:	443b      	add	r3, r7
 8002e04:	2220      	movs	r2, #32
 8002e06:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e0c:	9303      	str	r3, [sp, #12]
 8002e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e10:	9302      	str	r3, [sp, #8]
 8002e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	f107 0318 	add.w	r3, r7, #24
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	6939      	ldr	r1, [r7, #16]
 8002e22:	6978      	ldr	r0, [r7, #20]
 8002e24:	f7ff fbb4 	bl	8002590 <_out_rev>
 8002e28:	4603      	mov	r3, r0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3764      	adds	r7, #100	; 0x64
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd90      	pop	{r4, r7, pc}
 8002e32:	bf00      	nop
 8002e34:	cccccccd 	.word	0xcccccccd
 8002e38:	66666667 	.word	0x66666667
 8002e3c:	00000000 	.word	0x00000000

08002e40 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e44:	b09f      	sub	sp, #124	; 0x7c
 8002e46:	af06      	add	r7, sp, #24
 8002e48:	6278      	str	r0, [r7, #36]	; 0x24
 8002e4a:	6239      	str	r1, [r7, #32]
 8002e4c:	61fa      	str	r2, [r7, #28]
 8002e4e:	61bb      	str	r3, [r7, #24]
 8002e50:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8002e54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e5c:	f7fd fde4 	bl	8000a28 <__aeabi_dcmpeq>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d014      	beq.n	8002e90 <_etoa+0x50>
 8002e66:	f04f 32ff 	mov.w	r2, #4294967295
 8002e6a:	4bc1      	ldr	r3, [pc, #772]	; (8003170 <_etoa+0x330>)
 8002e6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e70:	f7fd fe02 	bl	8000a78 <__aeabi_dcmpgt>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10a      	bne.n	8002e90 <_etoa+0x50>
 8002e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002e82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e86:	f7fd fdd9 	bl	8000a3c <__aeabi_dcmplt>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d012      	beq.n	8002eb6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002e90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e94:	9302      	str	r3, [sp, #8]
 8002e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	ed97 0b04 	vldr	d0, [r7, #16]
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	6a39      	ldr	r1, [r7, #32]
 8002eac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eae:	f7ff fd6f 	bl	8002990 <_ftoa>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	e23f      	b.n	8003336 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	461e      	mov	r6, r3
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ec6:	f7fd fdb9 	bl	8000a3c <__aeabi_dcmplt>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <_etoa+0x94>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	461e      	mov	r6, r3
 8002ed4:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8002ed8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <_etoa+0xb4>
    value = -value;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002eea:	607b      	str	r3, [r7, #4]
 8002eec:	ed97 7b00 	vldr	d7, [r7]
 8002ef0:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8002ef4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002f00:	2306      	movs	r3, #6
 8002f02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8002f06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f0a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002f0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	0d0a      	lsrs	r2, r1, #20
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	4613      	mov	r3, r2
 8002f20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f24:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002f28:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f2e:	4690      	mov	r8, r2
 8002f30:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8002f34:	4644      	mov	r4, r8
 8002f36:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8002f3a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002f3e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8002f42:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f44:	f7fd fa9e 	bl	8000484 <__aeabi_i2d>
 8002f48:	a37d      	add	r3, pc, #500	; (adr r3, 8003140 <_etoa+0x300>)
 8002f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4e:	f7fd fb03 	bl	8000558 <__aeabi_dmul>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	a37b      	add	r3, pc, #492	; (adr r3, 8003148 <_etoa+0x308>)
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f7fd f944 	bl	80001ec <__adddf3>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4614      	mov	r4, r2
 8002f6a:	461d      	mov	r5, r3
 8002f6c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	4b7f      	ldr	r3, [pc, #508]	; (8003174 <_etoa+0x334>)
 8002f76:	f7fd f937 	bl	80001e8 <__aeabi_dsub>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	a373      	add	r3, pc, #460	; (adr r3, 8003150 <_etoa+0x310>)
 8002f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f88:	f7fd fae6 	bl	8000558 <__aeabi_dmul>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4620      	mov	r0, r4
 8002f92:	4629      	mov	r1, r5
 8002f94:	f7fd f92a 	bl	80001ec <__adddf3>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f7fd fd74 	bl	8000a8c <__aeabi_d2iz>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8002fa8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002faa:	f7fd fa6b 	bl	8000484 <__aeabi_i2d>
 8002fae:	a36a      	add	r3, pc, #424	; (adr r3, 8003158 <_etoa+0x318>)
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f7fd fad0 	bl	8000558 <__aeabi_dmul>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	4b6c      	ldr	r3, [pc, #432]	; (8003178 <_etoa+0x338>)
 8002fc6:	f7fd f911 	bl	80001ec <__adddf3>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f7fd fd5b 	bl	8000a8c <__aeabi_d2iz>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002fda:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002fdc:	f7fd fa52 	bl	8000484 <__aeabi_i2d>
 8002fe0:	a35f      	add	r3, pc, #380	; (adr r3, 8003160 <_etoa+0x320>)
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f7fd fab7 	bl	8000558 <__aeabi_dmul>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4614      	mov	r4, r2
 8002ff0:	461d      	mov	r5, r3
 8002ff2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002ff4:	f7fd fa46 	bl	8000484 <__aeabi_i2d>
 8002ff8:	a35b      	add	r3, pc, #364	; (adr r3, 8003168 <_etoa+0x328>)
 8002ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffe:	f7fd faab 	bl	8000558 <__aeabi_dmul>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4620      	mov	r0, r4
 8003008:	4629      	mov	r1, r5
 800300a:	f7fd f8ed 	bl	80001e8 <__aeabi_dsub>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8003016:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800301a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800301e:	f7fd fa9b 	bl	8000558 <__aeabi_dmul>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800302a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800302c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8003030:	17da      	asrs	r2, r3, #31
 8003032:	469a      	mov	sl, r3
 8003034:	4693      	mov	fp, r2
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8003042:	2200      	movs	r2, #0
 8003044:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003048:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800304c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	f7fd f8ca 	bl	80001ec <__adddf3>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4690      	mov	r8, r2
 800305e:	4699      	mov	r9, r3
 8003060:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003064:	f04f 0000 	mov.w	r0, #0
 8003068:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800306c:	f7fd f8bc 	bl	80001e8 <__aeabi_dsub>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4692      	mov	sl, r2
 8003076:	469b      	mov	fp, r3
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	4b3f      	ldr	r3, [pc, #252]	; (800317c <_etoa+0x33c>)
 800307e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003082:	f7fd fb93 	bl	80007ac <__aeabi_ddiv>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4610      	mov	r0, r2
 800308c:	4619      	mov	r1, r3
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <_etoa+0x340>)
 8003094:	f7fd f8aa 	bl	80001ec <__adddf3>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80030a0:	f7fd fb84 	bl	80007ac <__aeabi_ddiv>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4610      	mov	r0, r2
 80030aa:	4619      	mov	r1, r3
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	4b34      	ldr	r3, [pc, #208]	; (8003184 <_etoa+0x344>)
 80030b2:	f7fd f89b 	bl	80001ec <__adddf3>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80030be:	f7fd fb75 	bl	80007ac <__aeabi_ddiv>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4650      	mov	r0, sl
 80030c8:	4659      	mov	r1, fp
 80030ca:	f7fd f88f 	bl	80001ec <__adddf3>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4640      	mov	r0, r8
 80030d4:	4649      	mov	r1, r9
 80030d6:	f7fd fb69 	bl	80007ac <__aeabi_ddiv>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	4610      	mov	r0, r2
 80030e0:	4619      	mov	r1, r3
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	4b28      	ldr	r3, [pc, #160]	; (8003188 <_etoa+0x348>)
 80030e8:	f7fd f880 	bl	80001ec <__adddf3>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4620      	mov	r0, r4
 80030f2:	4629      	mov	r1, r5
 80030f4:	f7fd fa30 	bl	8000558 <__aeabi_dmul>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8003100:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003104:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003108:	f7fd fc98 	bl	8000a3c <__aeabi_dcmplt>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00d      	beq.n	800312e <_etoa+0x2ee>
    expval--;
 8003112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003114:	3b01      	subs	r3, #1
 8003116:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8003118:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	4b17      	ldr	r3, [pc, #92]	; (8003180 <_etoa+0x340>)
 8003122:	f7fd fb43 	bl	80007ac <__aeabi_ddiv>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800312e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003130:	2b63      	cmp	r3, #99	; 0x63
 8003132:	dc2b      	bgt.n	800318c <_etoa+0x34c>
 8003134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003136:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800313a:	db27      	blt.n	800318c <_etoa+0x34c>
 800313c:	2304      	movs	r3, #4
 800313e:	e026      	b.n	800318e <_etoa+0x34e>
 8003140:	509f79fb 	.word	0x509f79fb
 8003144:	3fd34413 	.word	0x3fd34413
 8003148:	8b60c8b3 	.word	0x8b60c8b3
 800314c:	3fc68a28 	.word	0x3fc68a28
 8003150:	636f4361 	.word	0x636f4361
 8003154:	3fd287a7 	.word	0x3fd287a7
 8003158:	0979a371 	.word	0x0979a371
 800315c:	400a934f 	.word	0x400a934f
 8003160:	bbb55516 	.word	0xbbb55516
 8003164:	40026bb1 	.word	0x40026bb1
 8003168:	fefa39ef 	.word	0xfefa39ef
 800316c:	3fe62e42 	.word	0x3fe62e42
 8003170:	7fefffff 	.word	0x7fefffff
 8003174:	3ff80000 	.word	0x3ff80000
 8003178:	3fe00000 	.word	0x3fe00000
 800317c:	402c0000 	.word	0x402c0000
 8003180:	40240000 	.word	0x40240000
 8003184:	40180000 	.word	0x40180000
 8003188:	3ff00000 	.word	0x3ff00000
 800318c:	2305      	movs	r3, #5
 800318e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8003190:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003198:	2b00      	cmp	r3, #0
 800319a:	d03d      	beq.n	8003218 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800319c:	a368      	add	r3, pc, #416	; (adr r3, 8003340 <_etoa+0x500>)
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031a6:	f7fd fc5d 	bl	8000a64 <__aeabi_dcmpge>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d024      	beq.n	80031fa <_etoa+0x3ba>
 80031b0:	a365      	add	r3, pc, #404	; (adr r3, 8003348 <_etoa+0x508>)
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031ba:	f7fd fc3f 	bl	8000a3c <__aeabi_dcmplt>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01a      	beq.n	80031fa <_etoa+0x3ba>
      if ((int)prec > expval) {
 80031c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031ca:	429a      	cmp	r2, r3
 80031cc:	da07      	bge.n	80031de <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 80031ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80031d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031dc:	e002      	b.n	80031e4 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80031e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031f8:	e00e      	b.n	8003218 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80031fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <_etoa+0x3d8>
 8003202:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320a:	2b00      	cmp	r3, #0
 800320c:	d004      	beq.n	8003218 <_etoa+0x3d8>
        --prec;
 800320e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003212:	3b01      	subs	r3, #1
 8003214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003218:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800321c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800321e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003224:	429a      	cmp	r2, r3
 8003226:	d904      	bls.n	8003232 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003228:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800322a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	657b      	str	r3, [r7, #84]	; 0x54
 8003230:	e001      	b.n	8003236 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003236:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d004      	beq.n	800324c <_etoa+0x40c>
 8003242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800324c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <_etoa+0x426>
    value /= conv.F;
 8003252:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003256:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800325a:	f7fd faa7 	bl	80007ac <__aeabi_ddiv>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800326a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <_etoa+0x440>
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	e003      	b.n	8003288 <_etoa+0x448>
 8003280:	ed97 7b04 	vldr	d7, [r7, #16]
 8003284:	ed87 7b02 	vstr	d7, [r7, #8]
 8003288:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800328c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003290:	9302      	str	r3, [sp, #8]
 8003292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	ed97 0b02 	vldr	d0, [r7, #8]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	6a39      	ldr	r1, [r7, #32]
 80032a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032a8:	f7ff fb72 	bl	8002990 <_ftoa>
 80032ac:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 80032ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d03f      	beq.n	8003334 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80032b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <_etoa+0x484>
 80032c0:	2045      	movs	r0, #69	; 0x45
 80032c2:	e000      	b.n	80032c6 <_etoa+0x486>
 80032c4:	2065      	movs	r0, #101	; 0x65
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	1c53      	adds	r3, r2, #1
 80032ca:	61fb      	str	r3, [r7, #28]
 80032cc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	6a39      	ldr	r1, [r7, #32]
 80032d2:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80032d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	bfb8      	it	lt
 80032da:	425b      	neglt	r3, r3
 80032dc:	4618      	mov	r0, r3
 80032de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032e0:	0fdb      	lsrs	r3, r3, #31
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032e6:	3a01      	subs	r2, #1
 80032e8:	2105      	movs	r1, #5
 80032ea:	9105      	str	r1, [sp, #20]
 80032ec:	9204      	str	r2, [sp, #16]
 80032ee:	2200      	movs	r2, #0
 80032f0:	9203      	str	r2, [sp, #12]
 80032f2:	220a      	movs	r2, #10
 80032f4:	9202      	str	r2, [sp, #8]
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	9000      	str	r0, [sp, #0]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	6a39      	ldr	r1, [r7, #32]
 8003300:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003302:	f7ff fa71 	bl	80027e8 <_ntoa_long>
 8003306:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003308:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00f      	beq.n	8003334 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003314:	e007      	b.n	8003326 <_etoa+0x4e6>
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	1c53      	adds	r3, r2, #1
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	6a39      	ldr	r1, [r7, #32]
 8003322:	2020      	movs	r0, #32
 8003324:	47a0      	blx	r4
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003330:	429a      	cmp	r2, r3
 8003332:	d8f0      	bhi.n	8003316 <_etoa+0x4d6>
    }
  }
  return idx;
 8003334:	69fb      	ldr	r3, [r7, #28]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3764      	adds	r7, #100	; 0x64
 800333a:	46bd      	mov	sp, r7
 800333c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003340:	eb1c432d 	.word	0xeb1c432d
 8003344:	3f1a36e2 	.word	0x3f1a36e2
 8003348:	00000000 	.word	0x00000000
 800334c:	412e8480 	.word	0x412e8480

08003350 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8003350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003354:	b0a3      	sub	sp, #140	; 0x8c
 8003356:	af0a      	add	r7, sp, #40	; 0x28
 8003358:	6178      	str	r0, [r7, #20]
 800335a:	6139      	str	r1, [r7, #16]
 800335c:	60fa      	str	r2, [r7, #12]
 800335e:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 84be 	bne.w	8003ce8 <_vsnprintf+0x998>
    // use null output function
    out = _out_null;
 800336c:	4ba3      	ldr	r3, [pc, #652]	; (80035fc <_vsnprintf+0x2ac>)
 800336e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8003370:	f000 bcba 	b.w	8003ce8 <_vsnprintf+0x998>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b25      	cmp	r3, #37	; 0x25
 800337a:	d00d      	beq.n	8003398 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	7818      	ldrb	r0, [r3, #0]
 8003380:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003382:	1c53      	adds	r3, r2, #1
 8003384:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003386:	697c      	ldr	r4, [r7, #20]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6939      	ldr	r1, [r7, #16]
 800338c:	47a0      	blx	r4
      format++;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	3301      	adds	r3, #1
 8003392:	60bb      	str	r3, [r7, #8]
      continue;
 8003394:	f000 bca8 	b.w	8003ce8 <_vsnprintf+0x998>
    }
    else {
      // yes, evaluate it
      format++;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	3301      	adds	r3, #1
 800339c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	3b20      	subs	r3, #32
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d857      	bhi.n	800345c <_vsnprintf+0x10c>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <_vsnprintf+0x64>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	08003435 	.word	0x08003435
 80033b8:	0800345d 	.word	0x0800345d
 80033bc:	0800345d 	.word	0x0800345d
 80033c0:	08003449 	.word	0x08003449
 80033c4:	0800345d 	.word	0x0800345d
 80033c8:	0800345d 	.word	0x0800345d
 80033cc:	0800345d 	.word	0x0800345d
 80033d0:	0800345d 	.word	0x0800345d
 80033d4:	0800345d 	.word	0x0800345d
 80033d8:	0800345d 	.word	0x0800345d
 80033dc:	0800345d 	.word	0x0800345d
 80033e0:	08003421 	.word	0x08003421
 80033e4:	0800345d 	.word	0x0800345d
 80033e8:	0800340d 	.word	0x0800340d
 80033ec:	0800345d 	.word	0x0800345d
 80033f0:	0800345d 	.word	0x0800345d
 80033f4:	080033f9 	.word	0x080033f9
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80033f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	3301      	adds	r3, #1
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	2301      	movs	r3, #1
 8003408:	653b      	str	r3, [r7, #80]	; 0x50
 800340a:	e02a      	b.n	8003462 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800340c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800340e:	f043 0302 	orr.w	r3, r3, #2
 8003412:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	3301      	adds	r3, #1
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	2301      	movs	r3, #1
 800341c:	653b      	str	r3, [r7, #80]	; 0x50
 800341e:	e020      	b.n	8003462 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003422:	f043 0304 	orr.w	r3, r3, #4
 8003426:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	3301      	adds	r3, #1
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	2301      	movs	r3, #1
 8003430:	653b      	str	r3, [r7, #80]	; 0x50
 8003432:	e016      	b.n	8003462 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003436:	f043 0308 	orr.w	r3, r3, #8
 800343a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	3301      	adds	r3, #1
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	2301      	movs	r3, #1
 8003444:	653b      	str	r3, [r7, #80]	; 0x50
 8003446:	e00c      	b.n	8003462 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344a:	f043 0310 	orr.w	r3, r3, #16
 800344e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	3301      	adds	r3, #1
 8003454:	60bb      	str	r3, [r7, #8]
 8003456:	2301      	movs	r3, #1
 8003458:	653b      	str	r3, [r7, #80]	; 0x50
 800345a:	e002      	b.n	8003462 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 800345c:	2300      	movs	r3, #0
 800345e:	653b      	str	r3, [r7, #80]	; 0x50
 8003460:	bf00      	nop
      }
    } while (n);
 8003462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003464:	2b00      	cmp	r3, #0
 8003466:	d19c      	bne.n	80033a2 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff f852 	bl	800251a <_is_digit>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d006      	beq.n	800348a <_vsnprintf+0x13a>
      width = _atoi(&format);
 800347c:	f107 0308 	add.w	r3, r7, #8
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff f861 	bl	8002548 <_atoi>
 8003486:	65b8      	str	r0, [r7, #88]	; 0x58
 8003488:	e01a      	b.n	80034c0 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b2a      	cmp	r3, #42	; 0x2a
 8003490:	d116      	bne.n	80034c0 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8003492:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003496:	1d1a      	adds	r2, r3, #4
 8003498:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 80034a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	da07      	bge.n	80034b6 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 80034a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a8:	f043 0302 	orr.w	r3, r3, #2
 80034ac:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b0:	425b      	negs	r3, r3
 80034b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80034b4:	e001      	b.n	80034ba <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b8:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	3301      	adds	r3, #1
 80034be:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b2e      	cmp	r3, #46	; 0x2e
 80034ca:	d127      	bne.n	800351c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 80034cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034d2:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	3301      	adds	r3, #1
 80034d8:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff f81b 	bl	800251a <_is_digit>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d006      	beq.n	80034f8 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 80034ea:	f107 0308 	add.w	r3, r7, #8
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff f82a 	bl	8002548 <_atoi>
 80034f4:	6578      	str	r0, [r7, #84]	; 0x54
 80034f6:	e011      	b.n	800351c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b2a      	cmp	r3, #42	; 0x2a
 80034fe:	d10d      	bne.n	800351c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8003500:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003504:	1d1a      	adds	r2, r3, #4
 8003506:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800350e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003510:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003514:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	3301      	adds	r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	3b68      	subs	r3, #104	; 0x68
 8003522:	2b12      	cmp	r3, #18
 8003524:	d866      	bhi.n	80035f4 <_vsnprintf+0x2a4>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <_vsnprintf+0x1dc>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	0800359f 	.word	0x0800359f
 8003530:	080035f5 	.word	0x080035f5
 8003534:	080035d5 	.word	0x080035d5
 8003538:	080035f5 	.word	0x080035f5
 800353c:	08003579 	.word	0x08003579
 8003540:	080035f5 	.word	0x080035f5
 8003544:	080035f5 	.word	0x080035f5
 8003548:	080035f5 	.word	0x080035f5
 800354c:	080035f5 	.word	0x080035f5
 8003550:	080035f5 	.word	0x080035f5
 8003554:	080035f5 	.word	0x080035f5
 8003558:	080035f5 	.word	0x080035f5
 800355c:	080035c5 	.word	0x080035c5
 8003560:	080035f5 	.word	0x080035f5
 8003564:	080035f5 	.word	0x080035f5
 8003568:	080035f5 	.word	0x080035f5
 800356c:	080035f5 	.word	0x080035f5
 8003570:	080035f5 	.word	0x080035f5
 8003574:	080035e5 	.word	0x080035e5
      case 'l' :
        flags |= FLAGS_LONG;
 8003578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800357a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	3301      	adds	r3, #1
 8003584:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b6c      	cmp	r3, #108	; 0x6c
 800358c:	d134      	bne.n	80035f8 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 800358e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003590:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003594:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3301      	adds	r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
        }
        break;
 800359c:	e02c      	b.n	80035f8 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800359e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a4:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	3301      	adds	r3, #1
 80035aa:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b68      	cmp	r3, #104	; 0x68
 80035b2:	d125      	bne.n	8003600 <_vsnprintf+0x2b0>
          flags |= FLAGS_CHAR;
 80035b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ba:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	3301      	adds	r3, #1
 80035c0:	60bb      	str	r3, [r7, #8]
        }
        break;
 80035c2:	e01d      	b.n	8003600 <_vsnprintf+0x2b0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80035c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ca:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	3301      	adds	r3, #1
 80035d0:	60bb      	str	r3, [r7, #8]
        break;
 80035d2:	e016      	b.n	8003602 <_vsnprintf+0x2b2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80035d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035da:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	3301      	adds	r3, #1
 80035e0:	60bb      	str	r3, [r7, #8]
        break;
 80035e2:	e00e      	b.n	8003602 <_vsnprintf+0x2b2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80035e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ea:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	3301      	adds	r3, #1
 80035f0:	60bb      	str	r3, [r7, #8]
        break;
 80035f2:	e006      	b.n	8003602 <_vsnprintf+0x2b2>
      default :
        break;
 80035f4:	bf00      	nop
 80035f6:	e004      	b.n	8003602 <_vsnprintf+0x2b2>
        break;
 80035f8:	bf00      	nop
 80035fa:	e002      	b.n	8003602 <_vsnprintf+0x2b2>
 80035fc:	080024c5 	.word	0x080024c5
        break;
 8003600:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	3b25      	subs	r3, #37	; 0x25
 8003608:	2b53      	cmp	r3, #83	; 0x53
 800360a:	f200 8360 	bhi.w	8003cce <_vsnprintf+0x97e>
 800360e:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <_vsnprintf+0x2c4>)
 8003610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003614:	08003cb7 	.word	0x08003cb7
 8003618:	08003ccf 	.word	0x08003ccf
 800361c:	08003ccf 	.word	0x08003ccf
 8003620:	08003ccf 	.word	0x08003ccf
 8003624:	08003ccf 	.word	0x08003ccf
 8003628:	08003ccf 	.word	0x08003ccf
 800362c:	08003ccf 	.word	0x08003ccf
 8003630:	08003ccf 	.word	0x08003ccf
 8003634:	08003ccf 	.word	0x08003ccf
 8003638:	08003ccf 	.word	0x08003ccf
 800363c:	08003ccf 	.word	0x08003ccf
 8003640:	08003ccf 	.word	0x08003ccf
 8003644:	08003ccf 	.word	0x08003ccf
 8003648:	08003ccf 	.word	0x08003ccf
 800364c:	08003ccf 	.word	0x08003ccf
 8003650:	08003ccf 	.word	0x08003ccf
 8003654:	08003ccf 	.word	0x08003ccf
 8003658:	08003ccf 	.word	0x08003ccf
 800365c:	08003ccf 	.word	0x08003ccf
 8003660:	08003ccf 	.word	0x08003ccf
 8003664:	08003ccf 	.word	0x08003ccf
 8003668:	08003ccf 	.word	0x08003ccf
 800366c:	08003ccf 	.word	0x08003ccf
 8003670:	08003ccf 	.word	0x08003ccf
 8003674:	08003ccf 	.word	0x08003ccf
 8003678:	08003ccf 	.word	0x08003ccf
 800367c:	08003ccf 	.word	0x08003ccf
 8003680:	08003ccf 	.word	0x08003ccf
 8003684:	08003ccf 	.word	0x08003ccf
 8003688:	08003ccf 	.word	0x08003ccf
 800368c:	08003ccf 	.word	0x08003ccf
 8003690:	08003ccf 	.word	0x08003ccf
 8003694:	08003a6b 	.word	0x08003a6b
 8003698:	08003a1b 	.word	0x08003a1b
 800369c:	08003a6b 	.word	0x08003a6b
 80036a0:	08003ccf 	.word	0x08003ccf
 80036a4:	08003ccf 	.word	0x08003ccf
 80036a8:	08003ccf 	.word	0x08003ccf
 80036ac:	08003ccf 	.word	0x08003ccf
 80036b0:	08003ccf 	.word	0x08003ccf
 80036b4:	08003ccf 	.word	0x08003ccf
 80036b8:	08003ccf 	.word	0x08003ccf
 80036bc:	08003ccf 	.word	0x08003ccf
 80036c0:	08003ccf 	.word	0x08003ccf
 80036c4:	08003ccf 	.word	0x08003ccf
 80036c8:	08003ccf 	.word	0x08003ccf
 80036cc:	08003ccf 	.word	0x08003ccf
 80036d0:	08003ccf 	.word	0x08003ccf
 80036d4:	08003ccf 	.word	0x08003ccf
 80036d8:	08003ccf 	.word	0x08003ccf
 80036dc:	08003ccf 	.word	0x08003ccf
 80036e0:	08003765 	.word	0x08003765
 80036e4:	08003ccf 	.word	0x08003ccf
 80036e8:	08003ccf 	.word	0x08003ccf
 80036ec:	08003ccf 	.word	0x08003ccf
 80036f0:	08003ccf 	.word	0x08003ccf
 80036f4:	08003ccf 	.word	0x08003ccf
 80036f8:	08003ccf 	.word	0x08003ccf
 80036fc:	08003ccf 	.word	0x08003ccf
 8003700:	08003ccf 	.word	0x08003ccf
 8003704:	08003ccf 	.word	0x08003ccf
 8003708:	08003765 	.word	0x08003765
 800370c:	08003adb 	.word	0x08003adb
 8003710:	08003765 	.word	0x08003765
 8003714:	08003a6b 	.word	0x08003a6b
 8003718:	08003a1b 	.word	0x08003a1b
 800371c:	08003a6b 	.word	0x08003a6b
 8003720:	08003ccf 	.word	0x08003ccf
 8003724:	08003765 	.word	0x08003765
 8003728:	08003ccf 	.word	0x08003ccf
 800372c:	08003ccf 	.word	0x08003ccf
 8003730:	08003ccf 	.word	0x08003ccf
 8003734:	08003ccf 	.word	0x08003ccf
 8003738:	08003ccf 	.word	0x08003ccf
 800373c:	08003765 	.word	0x08003765
 8003740:	08003c1b 	.word	0x08003c1b
 8003744:	08003ccf 	.word	0x08003ccf
 8003748:	08003ccf 	.word	0x08003ccf
 800374c:	08003b53 	.word	0x08003b53
 8003750:	08003ccf 	.word	0x08003ccf
 8003754:	08003765 	.word	0x08003765
 8003758:	08003ccf 	.word	0x08003ccf
 800375c:	08003ccf 	.word	0x08003ccf
 8003760:	08003765 	.word	0x08003765
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b78      	cmp	r3, #120	; 0x78
 800376a:	d003      	beq.n	8003774 <_vsnprintf+0x424>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b58      	cmp	r3, #88	; 0x58
 8003772:	d102      	bne.n	800377a <_vsnprintf+0x42a>
          base = 16U;
 8003774:	2310      	movs	r3, #16
 8003776:	64bb      	str	r3, [r7, #72]	; 0x48
 8003778:	e013      	b.n	80037a2 <_vsnprintf+0x452>
        }
        else if (*format == 'o') {
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b6f      	cmp	r3, #111	; 0x6f
 8003780:	d102      	bne.n	8003788 <_vsnprintf+0x438>
          base =  8U;
 8003782:	2308      	movs	r3, #8
 8003784:	64bb      	str	r3, [r7, #72]	; 0x48
 8003786:	e00c      	b.n	80037a2 <_vsnprintf+0x452>
        }
        else if (*format == 'b') {
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b62      	cmp	r3, #98	; 0x62
 800378e:	d102      	bne.n	8003796 <_vsnprintf+0x446>
          base =  2U;
 8003790:	2302      	movs	r3, #2
 8003792:	64bb      	str	r3, [r7, #72]	; 0x48
 8003794:	e005      	b.n	80037a2 <_vsnprintf+0x452>
        }
        else {
          base = 10U;
 8003796:	230a      	movs	r3, #10
 8003798:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800379a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800379c:	f023 0310 	bic.w	r3, r3, #16
 80037a0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b58      	cmp	r3, #88	; 0x58
 80037a8:	d103      	bne.n	80037b2 <_vsnprintf+0x462>
          flags |= FLAGS_UPPERCASE;
 80037aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ac:	f043 0320 	orr.w	r3, r3, #32
 80037b0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b69      	cmp	r3, #105	; 0x69
 80037b8:	d007      	beq.n	80037ca <_vsnprintf+0x47a>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b64      	cmp	r3, #100	; 0x64
 80037c0:	d003      	beq.n	80037ca <_vsnprintf+0x47a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80037c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037c4:	f023 030c 	bic.w	r3, r3, #12
 80037c8:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80037ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <_vsnprintf+0x48c>
          flags &= ~FLAGS_ZEROPAD;
 80037d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b69      	cmp	r3, #105	; 0x69
 80037e2:	d004      	beq.n	80037ee <_vsnprintf+0x49e>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	2b64      	cmp	r3, #100	; 0x64
 80037ea:	f040 8098 	bne.w	800391e <_vsnprintf+0x5ce>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80037ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d031      	beq.n	800385c <_vsnprintf+0x50c>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80037f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037fc:	3307      	adds	r3, #7
 80037fe:	f023 0307 	bic.w	r3, r3, #7
 8003802:	f103 0208 	add.w	r2, r3, #8
 8003806:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003812:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	da06      	bge.n	8003828 <_vsnprintf+0x4d8>
 800381a:	2100      	movs	r1, #0
 800381c:	f1d2 0800 	rsbs	r8, r2, #0
 8003820:	eb61 0903 	sbc.w	r9, r1, r3
 8003824:	4642      	mov	r2, r8
 8003826:	464b      	mov	r3, r9
 8003828:	69f9      	ldr	r1, [r7, #28]
 800382a:	0fc9      	lsrs	r1, r1, #31
 800382c:	b2c9      	uxtb	r1, r1
 800382e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003830:	2400      	movs	r4, #0
 8003832:	4682      	mov	sl, r0
 8003834:	46a3      	mov	fp, r4
 8003836:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003838:	9008      	str	r0, [sp, #32]
 800383a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800383c:	9007      	str	r0, [sp, #28]
 800383e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003840:	9006      	str	r0, [sp, #24]
 8003842:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003846:	9102      	str	r1, [sp, #8]
 8003848:	e9cd 2300 	strd	r2, r3, [sp]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003850:	6939      	ldr	r1, [r7, #16]
 8003852:	6978      	ldr	r0, [r7, #20]
 8003854:	f7ff f82e 	bl	80028b4 <_ntoa_long_long>
 8003858:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800385a:	e0da      	b.n	8003a12 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800385c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d020      	beq.n	80038a8 <_vsnprintf+0x558>
            const long value = va_arg(va, long);
 8003866:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800386a:	1d1a      	adds	r2, r3, #4
 800386c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	2b00      	cmp	r3, #0
 8003878:	bfb8      	it	lt
 800387a:	425b      	neglt	r3, r3
 800387c:	4619      	mov	r1, r3
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	0fdb      	lsrs	r3, r3, #31
 8003882:	b2db      	uxtb	r3, r3
 8003884:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003886:	9205      	str	r2, [sp, #20]
 8003888:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800388a:	9204      	str	r2, [sp, #16]
 800388c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800388e:	9203      	str	r2, [sp, #12]
 8003890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003892:	9202      	str	r2, [sp, #8]
 8003894:	9301      	str	r3, [sp, #4]
 8003896:	9100      	str	r1, [sp, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800389c:	6939      	ldr	r1, [r7, #16]
 800389e:	6978      	ldr	r0, [r7, #20]
 80038a0:	f7fe ffa2 	bl	80027e8 <_ntoa_long>
 80038a4:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80038a6:	e0b4      	b.n	8003a12 <_vsnprintf+0x6c2>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80038a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <_vsnprintf+0x572>
 80038b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038b6:	1d1a      	adds	r2, r3, #4
 80038b8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	e012      	b.n	80038e8 <_vsnprintf+0x598>
 80038c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d007      	beq.n	80038dc <_vsnprintf+0x58c>
 80038cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038d0:	1d1a      	adds	r2, r3, #4
 80038d2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	b21b      	sxth	r3, r3
 80038da:	e005      	b.n	80038e8 <_vsnprintf+0x598>
 80038dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038e0:	1d1a      	adds	r2, r3, #4
 80038e2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bfb8      	it	lt
 80038f0:	425b      	neglt	r3, r3
 80038f2:	4619      	mov	r1, r3
 80038f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f6:	0fdb      	lsrs	r3, r3, #31
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038fc:	9205      	str	r2, [sp, #20]
 80038fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003900:	9204      	str	r2, [sp, #16]
 8003902:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003904:	9203      	str	r2, [sp, #12]
 8003906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003908:	9202      	str	r2, [sp, #8]
 800390a:	9301      	str	r3, [sp, #4]
 800390c:	9100      	str	r1, [sp, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003912:	6939      	ldr	r1, [r7, #16]
 8003914:	6978      	ldr	r0, [r7, #20]
 8003916:	f7fe ff67 	bl	80027e8 <_ntoa_long>
 800391a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800391c:	e079      	b.n	8003a12 <_vsnprintf+0x6c2>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800391e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003924:	2b00      	cmp	r3, #0
 8003926:	d022      	beq.n	800396e <_vsnprintf+0x61e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003928:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800392c:	3307      	adds	r3, #7
 800392e:	f023 0307 	bic.w	r3, r3, #7
 8003932:	f103 0208 	add.w	r2, r3, #8
 8003936:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003940:	2000      	movs	r0, #0
 8003942:	460d      	mov	r5, r1
 8003944:	4606      	mov	r6, r0
 8003946:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003948:	9108      	str	r1, [sp, #32]
 800394a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800394c:	9107      	str	r1, [sp, #28]
 800394e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003950:	9106      	str	r1, [sp, #24]
 8003952:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8003956:	2100      	movs	r1, #0
 8003958:	9102      	str	r1, [sp, #8]
 800395a:	e9cd 2300 	strd	r2, r3, [sp]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003962:	6939      	ldr	r1, [r7, #16]
 8003964:	6978      	ldr	r0, [r7, #20]
 8003966:	f7fe ffa5 	bl	80028b4 <_ntoa_long_long>
 800396a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800396c:	e051      	b.n	8003a12 <_vsnprintf+0x6c2>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800396e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d018      	beq.n	80039aa <_vsnprintf+0x65a>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003978:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800397c:	1d1a      	adds	r2, r3, #4
 800397e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003986:	9205      	str	r2, [sp, #20]
 8003988:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800398a:	9204      	str	r2, [sp, #16]
 800398c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800398e:	9203      	str	r2, [sp, #12]
 8003990:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003992:	9202      	str	r2, [sp, #8]
 8003994:	2200      	movs	r2, #0
 8003996:	9201      	str	r2, [sp, #4]
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800399e:	6939      	ldr	r1, [r7, #16]
 80039a0:	6978      	ldr	r0, [r7, #20]
 80039a2:	f7fe ff21 	bl	80027e8 <_ntoa_long>
 80039a6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80039a8:	e033      	b.n	8003a12 <_vsnprintf+0x6c2>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80039aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <_vsnprintf+0x674>
 80039b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039b8:	1d1a      	adds	r2, r3, #4
 80039ba:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e012      	b.n	80039ea <_vsnprintf+0x69a>
 80039c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <_vsnprintf+0x68e>
 80039ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039d2:	1d1a      	adds	r2, r3, #4
 80039d4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	e005      	b.n	80039ea <_vsnprintf+0x69a>
 80039de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039e2:	1d1a      	adds	r2, r3, #4
 80039e4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80039ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ee:	9305      	str	r3, [sp, #20]
 80039f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039f2:	9304      	str	r3, [sp, #16]
 80039f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f6:	9303      	str	r3, [sp, #12]
 80039f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039fa:	9302      	str	r3, [sp, #8]
 80039fc:	2300      	movs	r3, #0
 80039fe:	9301      	str	r3, [sp, #4]
 8003a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a08:	6939      	ldr	r1, [r7, #16]
 8003a0a:	6978      	ldr	r0, [r7, #20]
 8003a0c:	f7fe feec 	bl	80027e8 <_ntoa_long>
 8003a10:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	3301      	adds	r3, #1
 8003a16:	60bb      	str	r3, [r7, #8]
        break;
 8003a18:	e166      	b.n	8003ce8 <_vsnprintf+0x998>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b46      	cmp	r3, #70	; 0x46
 8003a20:	d103      	bne.n	8003a2a <_vsnprintf+0x6da>
 8003a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a24:	f043 0320 	orr.w	r3, r3, #32
 8003a28:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a2e:	3307      	adds	r3, #7
 8003a30:	f023 0307 	bic.w	r3, r3, #7
 8003a34:	f103 0208 	add.w	r2, r3, #8
 8003a38:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003a3c:	ed93 7b00 	vldr	d7, [r3]
 8003a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a42:	9302      	str	r3, [sp, #8]
 8003a44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	eeb0 0a47 	vmov.f32	s0, s14
 8003a50:	eef0 0a67 	vmov.f32	s1, s15
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a58:	6939      	ldr	r1, [r7, #16]
 8003a5a:	6978      	ldr	r0, [r7, #20]
 8003a5c:	f7fe ff98 	bl	8002990 <_ftoa>
 8003a60:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	3301      	adds	r3, #1
 8003a66:	60bb      	str	r3, [r7, #8]
        break;
 8003a68:	e13e      	b.n	8003ce8 <_vsnprintf+0x998>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b67      	cmp	r3, #103	; 0x67
 8003a70:	d003      	beq.n	8003a7a <_vsnprintf+0x72a>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b47      	cmp	r3, #71	; 0x47
 8003a78:	d103      	bne.n	8003a82 <_vsnprintf+0x732>
 8003a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a80:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b45      	cmp	r3, #69	; 0x45
 8003a88:	d003      	beq.n	8003a92 <_vsnprintf+0x742>
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b47      	cmp	r3, #71	; 0x47
 8003a90:	d103      	bne.n	8003a9a <_vsnprintf+0x74a>
 8003a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a94:	f043 0320 	orr.w	r3, r3, #32
 8003a98:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003a9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a9e:	3307      	adds	r3, #7
 8003aa0:	f023 0307 	bic.w	r3, r3, #7
 8003aa4:	f103 0208 	add.w	r2, r3, #8
 8003aa8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003aac:	ed93 7b00 	vldr	d7, [r3]
 8003ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ab2:	9302      	str	r3, [sp, #8]
 8003ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ab6:	9301      	str	r3, [sp, #4]
 8003ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	eeb0 0a47 	vmov.f32	s0, s14
 8003ac0:	eef0 0a67 	vmov.f32	s1, s15
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ac8:	6939      	ldr	r1, [r7, #16]
 8003aca:	6978      	ldr	r0, [r7, #20]
 8003acc:	f7ff f9b8 	bl	8002e40 <_etoa>
 8003ad0:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	60bb      	str	r3, [r7, #8]
        break;
 8003ad8:	e106      	b.n	8003ce8 <_vsnprintf+0x998>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8003ada:	2301      	movs	r3, #1
 8003adc:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10e      	bne.n	8003b06 <_vsnprintf+0x7b6>
          while (l++ < width) {
 8003ae8:	e007      	b.n	8003afa <_vsnprintf+0x7aa>
            out(' ', buffer, idx++, maxlen);
 8003aea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aec:	1c53      	adds	r3, r2, #1
 8003aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af0:	697c      	ldr	r4, [r7, #20]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6939      	ldr	r1, [r7, #16]
 8003af6:	2020      	movs	r0, #32
 8003af8:	47a0      	blx	r4
          while (l++ < width) {
 8003afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	647a      	str	r2, [r7, #68]	; 0x44
 8003b00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d8f1      	bhi.n	8003aea <_vsnprintf+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003b06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b0a:	1d1a      	adds	r2, r3, #4
 8003b0c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	b2d8      	uxtb	r0, r3
 8003b14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b16:	1c53      	adds	r3, r2, #1
 8003b18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b1a:	697c      	ldr	r4, [r7, #20]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6939      	ldr	r1, [r7, #16]
 8003b20:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00e      	beq.n	8003b4a <_vsnprintf+0x7fa>
          while (l++ < width) {
 8003b2c:	e007      	b.n	8003b3e <_vsnprintf+0x7ee>
            out(' ', buffer, idx++, maxlen);
 8003b2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b30:	1c53      	adds	r3, r2, #1
 8003b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b34:	697c      	ldr	r4, [r7, #20]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6939      	ldr	r1, [r7, #16]
 8003b3a:	2020      	movs	r0, #32
 8003b3c:	47a0      	blx	r4
          while (l++ < width) {
 8003b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	647a      	str	r2, [r7, #68]	; 0x44
 8003b44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d8f1      	bhi.n	8003b2e <_vsnprintf+0x7de>
          }
        }
        format++;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	60bb      	str	r3, [r7, #8]
        break;
 8003b50:	e0ca      	b.n	8003ce8 <_vsnprintf+0x998>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003b52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b56:	1d1a      	adds	r2, r3, #4
 8003b58:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <_vsnprintf+0x81a>
 8003b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b68:	e001      	b.n	8003b6e <_vsnprintf+0x81e>
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003b72:	f7fe fcb5 	bl	80024e0 <_strnlen_s>
 8003b76:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <_vsnprintf+0x83e>
          l = (l < precision ? l : precision);
 8003b82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b86:	4293      	cmp	r3, r2
 8003b88:	bf28      	it	cs
 8003b8a:	4613      	movcs	r3, r2
 8003b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8003b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d11a      	bne.n	8003bce <_vsnprintf+0x87e>
          while (l++ < width) {
 8003b98:	e007      	b.n	8003baa <_vsnprintf+0x85a>
            out(' ', buffer, idx++, maxlen);
 8003b9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b9c:	1c53      	adds	r3, r2, #1
 8003b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba0:	697c      	ldr	r4, [r7, #20]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6939      	ldr	r1, [r7, #16]
 8003ba6:	2020      	movs	r0, #32
 8003ba8:	47a0      	blx	r4
          while (l++ < width) {
 8003baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003bb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d8f1      	bhi.n	8003b9a <_vsnprintf+0x84a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003bb6:	e00a      	b.n	8003bce <_vsnprintf+0x87e>
          out(*(p++), buffer, idx++, maxlen);
 8003bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	643a      	str	r2, [r7, #64]	; 0x40
 8003bbe:	7818      	ldrb	r0, [r3, #0]
 8003bc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bc2:	1c53      	adds	r3, r2, #1
 8003bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc6:	697c      	ldr	r4, [r7, #20]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6939      	ldr	r1, [r7, #16]
 8003bcc:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <_vsnprintf+0x89a>
 8003bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0eb      	beq.n	8003bb8 <_vsnprintf+0x868>
 8003be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be2:	1e5a      	subs	r2, r3, #1
 8003be4:	657a      	str	r2, [r7, #84]	; 0x54
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e6      	bne.n	8003bb8 <_vsnprintf+0x868>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003bea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00e      	beq.n	8003c12 <_vsnprintf+0x8c2>
          while (l++ < width) {
 8003bf4:	e007      	b.n	8003c06 <_vsnprintf+0x8b6>
            out(' ', buffer, idx++, maxlen);
 8003bf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bf8:	1c53      	adds	r3, r2, #1
 8003bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bfc:	697c      	ldr	r4, [r7, #20]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6939      	ldr	r1, [r7, #16]
 8003c02:	2020      	movs	r0, #32
 8003c04:	47a0      	blx	r4
          while (l++ < width) {
 8003c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d8f1      	bhi.n	8003bf6 <_vsnprintf+0x8a6>
          }
        }
        format++;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	3301      	adds	r3, #1
 8003c16:	60bb      	str	r3, [r7, #8]
        break;
 8003c18:	e066      	b.n	8003ce8 <_vsnprintf+0x998>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c20:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8003c24:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003c26:	2300      	movs	r3, #0
 8003c28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8003c2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d023      	beq.n	8003c7c <_vsnprintf+0x92c>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8003c34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c38:	1d1a      	adds	r2, r3, #4
 8003c3a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	461a      	mov	r2, r3
 8003c42:	2300      	movs	r3, #0
 8003c44:	603a      	str	r2, [r7, #0]
 8003c46:	607b      	str	r3, [r7, #4]
 8003c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c4a:	9308      	str	r3, [sp, #32]
 8003c4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c4e:	9307      	str	r3, [sp, #28]
 8003c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c52:	9306      	str	r3, [sp, #24]
 8003c54:	f04f 0210 	mov.w	r2, #16
 8003c58:	f04f 0300 	mov.w	r3, #0
 8003c5c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c60:	2300      	movs	r3, #0
 8003c62:	9302      	str	r3, [sp, #8]
 8003c64:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003c68:	e9cd 3400 	strd	r3, r4, [sp]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c70:	6939      	ldr	r1, [r7, #16]
 8003c72:	6978      	ldr	r0, [r7, #20]
 8003c74:	f7fe fe1e 	bl	80028b4 <_ntoa_long_long>
 8003c78:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003c7a:	e018      	b.n	8003cae <_vsnprintf+0x95e>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8003c7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c80:	1d1a      	adds	r2, r3, #4
 8003c82:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c8c:	9305      	str	r3, [sp, #20]
 8003c8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c90:	9304      	str	r3, [sp, #16]
 8003c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c94:	9303      	str	r3, [sp, #12]
 8003c96:	2310      	movs	r3, #16
 8003c98:	9302      	str	r3, [sp, #8]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	9200      	str	r2, [sp, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ca4:	6939      	ldr	r1, [r7, #16]
 8003ca6:	6978      	ldr	r0, [r7, #20]
 8003ca8:	f7fe fd9e 	bl	80027e8 <_ntoa_long>
 8003cac:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	60bb      	str	r3, [r7, #8]
        break;
 8003cb4:	e018      	b.n	8003ce8 <_vsnprintf+0x998>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8003cb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cb8:	1c53      	adds	r3, r2, #1
 8003cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cbc:	697c      	ldr	r4, [r7, #20]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6939      	ldr	r1, [r7, #16]
 8003cc2:	2025      	movs	r0, #37	; 0x25
 8003cc4:	47a0      	blx	r4
        format++;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	60bb      	str	r3, [r7, #8]
        break;
 8003ccc:	e00c      	b.n	8003ce8 <_vsnprintf+0x998>

      default :
        out(*format, buffer, idx++, maxlen);
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	7818      	ldrb	r0, [r3, #0]
 8003cd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cd4:	1c53      	adds	r3, r2, #1
 8003cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd8:	697c      	ldr	r4, [r7, #20]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6939      	ldr	r1, [r7, #16]
 8003cde:	47a0      	blx	r4
        format++;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	60bb      	str	r3, [r7, #8]
        break;
 8003ce6:	bf00      	nop
  while (*format)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f47f ab41 	bne.w	8003374 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003cf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <_vsnprintf+0x9b0>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1e5a      	subs	r2, r3, #1
 8003cfe:	e000      	b.n	8003d02 <_vsnprintf+0x9b2>
 8003d00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d02:	697c      	ldr	r4, [r7, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6939      	ldr	r1, [r7, #16]
 8003d08:	2000      	movs	r0, #0
 8003d0a:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3764      	adds	r7, #100	; 0x64
 8003d12:	46bd      	mov	sp, r7
 8003d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003d18 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8003d18:	b40e      	push	{r1, r2, r3}
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b087      	sub	sp, #28
 8003d1e:	af02      	add	r7, sp, #8
 8003d20:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8003d22:	f107 0320 	add.w	r3, r7, #32
 8003d26:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	4805      	ldr	r0, [pc, #20]	; (8003d4c <sprintf_+0x34>)
 8003d36:	f7ff fb0b 	bl	8003350 <_vsnprintf>
 8003d3a:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d48:	b003      	add	sp, #12
 8003d4a:	4770      	bx	lr
 8003d4c:	08002497 	.word	0x08002497

08003d50 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003d54:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <MX_SPI2_Init+0x68>)
 8003d56:	4a19      	ldr	r2, [pc, #100]	; (8003dbc <MX_SPI2_Init+0x6c>)
 8003d58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d5a:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <MX_SPI2_Init+0x68>)
 8003d5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <MX_SPI2_Init+0x68>)
 8003d64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d68:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d6a:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <MX_SPI2_Init+0x68>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d70:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <MX_SPI2_Init+0x68>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d76:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <MX_SPI2_Init+0x68>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003d7c:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <MX_SPI2_Init+0x68>)
 8003d7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d82:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <MX_SPI2_Init+0x68>)
 8003d86:	2210      	movs	r2, #16
 8003d88:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <MX_SPI2_Init+0x68>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <MX_SPI2_Init+0x68>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <MX_SPI2_Init+0x68>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <MX_SPI2_Init+0x68>)
 8003d9e:	220a      	movs	r2, #10
 8003da0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003da2:	4805      	ldr	r0, [pc, #20]	; (8003db8 <MX_SPI2_Init+0x68>)
 8003da4:	f002 fd6c 	bl	8006880 <HAL_SPI_Init>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8003dae:	f7fe fb6d 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20003bd8 	.word	0x20003bd8
 8003dbc:	40003800 	.word	0x40003800

08003dc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08a      	sub	sp, #40	; 0x28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc8:	f107 0314 	add.w	r3, r7, #20
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	609a      	str	r2, [r3, #8]
 8003dd4:	60da      	str	r2, [r3, #12]
 8003dd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a28      	ldr	r2, [pc, #160]	; (8003e80 <HAL_SPI_MspInit+0xc0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d14a      	bne.n	8003e78 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	4b27      	ldr	r3, [pc, #156]	; (8003e84 <HAL_SPI_MspInit+0xc4>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	4a26      	ldr	r2, [pc, #152]	; (8003e84 <HAL_SPI_MspInit+0xc4>)
 8003dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df0:	6413      	str	r3, [r2, #64]	; 0x40
 8003df2:	4b24      	ldr	r3, [pc, #144]	; (8003e84 <HAL_SPI_MspInit+0xc4>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dfa:	613b      	str	r3, [r7, #16]
 8003dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	4b20      	ldr	r3, [pc, #128]	; (8003e84 <HAL_SPI_MspInit+0xc4>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	4a1f      	ldr	r2, [pc, #124]	; (8003e84 <HAL_SPI_MspInit+0xc4>)
 8003e08:	f043 0304 	orr.w	r3, r3, #4
 8003e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0e:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <HAL_SPI_MspInit+0xc4>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <HAL_SPI_MspInit+0xc4>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	4a18      	ldr	r2, [pc, #96]	; (8003e84 <HAL_SPI_MspInit+0xc4>)
 8003e24:	f043 0302 	orr.w	r3, r3, #2
 8003e28:	6313      	str	r3, [r2, #48]	; 0x30
 8003e2a:	4b16      	ldr	r3, [pc, #88]	; (8003e84 <HAL_SPI_MspInit+0xc4>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e36:	2308      	movs	r3, #8
 8003e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e42:	2303      	movs	r3, #3
 8003e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e46:	2305      	movs	r3, #5
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e4a:	f107 0314 	add.w	r3, r7, #20
 8003e4e:	4619      	mov	r1, r3
 8003e50:	480d      	ldr	r0, [pc, #52]	; (8003e88 <HAL_SPI_MspInit+0xc8>)
 8003e52:	f000 feff 	bl	8004c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e64:	2303      	movs	r3, #3
 8003e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e68:	2305      	movs	r3, #5
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e6c:	f107 0314 	add.w	r3, r7, #20
 8003e70:	4619      	mov	r1, r3
 8003e72:	4806      	ldr	r0, [pc, #24]	; (8003e8c <HAL_SPI_MspInit+0xcc>)
 8003e74:	f000 feee 	bl	8004c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003e78:	bf00      	nop
 8003e7a:	3728      	adds	r7, #40	; 0x28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40003800 	.word	0x40003800
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40020800 	.word	0x40020800
 8003e8c:	40020400 	.word	0x40020400

08003e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	607b      	str	r3, [r7, #4]
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <HAL_MspInit+0x54>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	4a11      	ldr	r2, [pc, #68]	; (8003ee4 <HAL_MspInit+0x54>)
 8003ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ea6:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <HAL_MspInit+0x54>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eae:	607b      	str	r3, [r7, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	603b      	str	r3, [r7, #0]
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_MspInit+0x54>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <HAL_MspInit+0x54>)
 8003ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <HAL_MspInit+0x54>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ece:	2200      	movs	r2, #0
 8003ed0:	210f      	movs	r1, #15
 8003ed2:	f06f 0001 	mvn.w	r0, #1
 8003ed6:	f000 fa91 	bl	80043fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800

08003ee8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08c      	sub	sp, #48	; 0x30
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8003ef8:	2200      	movs	r2, #0
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	201a      	movs	r0, #26
 8003efe:	f000 fa7d 	bl	80043fc <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003f02:	201a      	movs	r0, #26
 8003f04:	f000 fa96 	bl	8004434 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <HAL_InitTick+0xa0>)
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <HAL_InitTick+0xa0>)
 8003f12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f16:	6453      	str	r3, [r2, #68]	; 0x44
 8003f18:	4b1b      	ldr	r3, [pc, #108]	; (8003f88 <HAL_InitTick+0xa0>)
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f24:	f107 0210 	add.w	r2, r7, #16
 8003f28:	f107 0314 	add.w	r3, r7, #20
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f002 fc74 	bl	800681c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003f34:	f002 fc5e 	bl	80067f4 <HAL_RCC_GetPCLK2Freq>
 8003f38:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	4a13      	ldr	r2, [pc, #76]	; (8003f8c <HAL_InitTick+0xa4>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	0c9b      	lsrs	r3, r3, #18
 8003f44:	3b01      	subs	r3, #1
 8003f46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8003f48:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <HAL_InitTick+0xa8>)
 8003f4a:	4a12      	ldr	r2, [pc, #72]	; (8003f94 <HAL_InitTick+0xac>)
 8003f4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8003f4e:	4b10      	ldr	r3, [pc, #64]	; (8003f90 <HAL_InitTick+0xa8>)
 8003f50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f54:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8003f56:	4a0e      	ldr	r2, [pc, #56]	; (8003f90 <HAL_InitTick+0xa8>)
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <HAL_InitTick+0xa8>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f62:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_InitTick+0xa8>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8003f68:	4809      	ldr	r0, [pc, #36]	; (8003f90 <HAL_InitTick+0xa8>)
 8003f6a:	f002 ff19 	bl	8006da0 <HAL_TIM_Base_Init>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d104      	bne.n	8003f7e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8003f74:	4806      	ldr	r0, [pc, #24]	; (8003f90 <HAL_InitTick+0xa8>)
 8003f76:	f002 ff6d 	bl	8006e54 <HAL_TIM_Base_Start_IT>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	e000      	b.n	8003f80 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3730      	adds	r7, #48	; 0x30
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	431bde83 	.word	0x431bde83
 8003f90:	20003c30 	.word	0x20003c30
 8003f94:	40014800 	.word	0x40014800

08003f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f9c:	e7fe      	b.n	8003f9c <NMI_Handler+0x4>

08003f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fa2:	e7fe      	b.n	8003fa2 <HardFault_Handler+0x4>

08003fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fa8:	e7fe      	b.n	8003fa8 <MemManage_Handler+0x4>

08003faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003faa:	b480      	push	{r7}
 8003fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fae:	e7fe      	b.n	8003fae <BusFault_Handler+0x4>

08003fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fb4:	e7fe      	b.n	8003fb4 <UsageFault_Handler+0x4>

08003fb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003fba:	bf00      	nop
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8003fc8:	4802      	ldr	r0, [pc, #8]	; (8003fd4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003fca:	f002 ffa5 	bl	8006f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20003c30 	.word	0x20003c30

08003fd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003fdc:	4802      	ldr	r0, [pc, #8]	; (8003fe8 <USART1_IRQHandler+0x10>)
 8003fde:	f003 faa3 	bl	8007528 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20003c78 	.word	0x20003c78

08003fec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003ff0:	4802      	ldr	r0, [pc, #8]	; (8003ffc <DMA2_Stream2_IRQHandler+0x10>)
 8003ff2:	f000 fbc5 	bl	8004780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003ff6:	bf00      	nop
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20003cbc 	.word	0x20003cbc

08004000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <SystemInit+0x20>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	4a05      	ldr	r2, [pc, #20]	; (8004020 <SystemInit+0x20>)
 800400c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	e000ed00 	.word	0xe000ed00

08004024 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004028:	4b11      	ldr	r3, [pc, #68]	; (8004070 <MX_USART1_UART_Init+0x4c>)
 800402a:	4a12      	ldr	r2, [pc, #72]	; (8004074 <MX_USART1_UART_Init+0x50>)
 800402c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 800402e:	4b10      	ldr	r3, [pc, #64]	; (8004070 <MX_USART1_UART_Init+0x4c>)
 8004030:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8004034:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004036:	4b0e      	ldr	r3, [pc, #56]	; (8004070 <MX_USART1_UART_Init+0x4c>)
 8004038:	2200      	movs	r2, #0
 800403a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800403c:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <MX_USART1_UART_Init+0x4c>)
 800403e:	2200      	movs	r2, #0
 8004040:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004042:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <MX_USART1_UART_Init+0x4c>)
 8004044:	2200      	movs	r2, #0
 8004046:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004048:	4b09      	ldr	r3, [pc, #36]	; (8004070 <MX_USART1_UART_Init+0x4c>)
 800404a:	220c      	movs	r2, #12
 800404c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <MX_USART1_UART_Init+0x4c>)
 8004050:	2200      	movs	r2, #0
 8004052:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004054:	4b06      	ldr	r3, [pc, #24]	; (8004070 <MX_USART1_UART_Init+0x4c>)
 8004056:	2200      	movs	r2, #0
 8004058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800405a:	4805      	ldr	r0, [pc, #20]	; (8004070 <MX_USART1_UART_Init+0x4c>)
 800405c:	f003 f920 	bl	80072a0 <HAL_UART_Init>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004066:	f7fe fa11 	bl	800248c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20003c78 	.word	0x20003c78
 8004074:	40011000 	.word	0x40011000

08004078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b08a      	sub	sp, #40	; 0x28
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004080:	f107 0314 	add.w	r3, r7, #20
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a30      	ldr	r2, [pc, #192]	; (8004158 <HAL_UART_MspInit+0xe0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d15a      	bne.n	8004150 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	4b2f      	ldr	r3, [pc, #188]	; (800415c <HAL_UART_MspInit+0xe4>)
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	4a2e      	ldr	r2, [pc, #184]	; (800415c <HAL_UART_MspInit+0xe4>)
 80040a4:	f043 0310 	orr.w	r3, r3, #16
 80040a8:	6453      	str	r3, [r2, #68]	; 0x44
 80040aa:	4b2c      	ldr	r3, [pc, #176]	; (800415c <HAL_UART_MspInit+0xe4>)
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	4b28      	ldr	r3, [pc, #160]	; (800415c <HAL_UART_MspInit+0xe4>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040be:	4a27      	ldr	r2, [pc, #156]	; (800415c <HAL_UART_MspInit+0xe4>)
 80040c0:	f043 0301 	orr.w	r3, r3, #1
 80040c4:	6313      	str	r3, [r2, #48]	; 0x30
 80040c6:	4b25      	ldr	r3, [pc, #148]	; (800415c <HAL_UART_MspInit+0xe4>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80040d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80040d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d8:	2302      	movs	r3, #2
 80040da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e0:	2303      	movs	r3, #3
 80040e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040e4:	2307      	movs	r3, #7
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e8:	f107 0314 	add.w	r3, r7, #20
 80040ec:	4619      	mov	r1, r3
 80040ee:	481c      	ldr	r0, [pc, #112]	; (8004160 <HAL_UART_MspInit+0xe8>)
 80040f0:	f000 fdb0 	bl	8004c54 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80040f4:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <HAL_UART_MspInit+0xec>)
 80040f6:	4a1c      	ldr	r2, [pc, #112]	; (8004168 <HAL_UART_MspInit+0xf0>)
 80040f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80040fa:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <HAL_UART_MspInit+0xec>)
 80040fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004100:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004102:	4b18      	ldr	r3, [pc, #96]	; (8004164 <HAL_UART_MspInit+0xec>)
 8004104:	2200      	movs	r2, #0
 8004106:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004108:	4b16      	ldr	r3, [pc, #88]	; (8004164 <HAL_UART_MspInit+0xec>)
 800410a:	2200      	movs	r2, #0
 800410c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800410e:	4b15      	ldr	r3, [pc, #84]	; (8004164 <HAL_UART_MspInit+0xec>)
 8004110:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004114:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004116:	4b13      	ldr	r3, [pc, #76]	; (8004164 <HAL_UART_MspInit+0xec>)
 8004118:	2200      	movs	r2, #0
 800411a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800411c:	4b11      	ldr	r3, [pc, #68]	; (8004164 <HAL_UART_MspInit+0xec>)
 800411e:	2200      	movs	r2, #0
 8004120:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004122:	4b10      	ldr	r3, [pc, #64]	; (8004164 <HAL_UART_MspInit+0xec>)
 8004124:	2200      	movs	r2, #0
 8004126:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <HAL_UART_MspInit+0xec>)
 800412a:	2200      	movs	r2, #0
 800412c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800412e:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <HAL_UART_MspInit+0xec>)
 8004130:	2200      	movs	r2, #0
 8004132:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004134:	480b      	ldr	r0, [pc, #44]	; (8004164 <HAL_UART_MspInit+0xec>)
 8004136:	f000 f98b 	bl	8004450 <HAL_DMA_Init>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004140:	f7fe f9a4 	bl	800248c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a07      	ldr	r2, [pc, #28]	; (8004164 <HAL_UART_MspInit+0xec>)
 8004148:	639a      	str	r2, [r3, #56]	; 0x38
 800414a:	4a06      	ldr	r2, [pc, #24]	; (8004164 <HAL_UART_MspInit+0xec>)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004150:	bf00      	nop
 8004152:	3728      	adds	r7, #40	; 0x28
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40011000 	.word	0x40011000
 800415c:	40023800 	.word	0x40023800
 8004160:	40020000 	.word	0x40020000
 8004164:	20003cbc 	.word	0x20003cbc
 8004168:	40026440 	.word	0x40026440

0800416c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800416c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004170:	480d      	ldr	r0, [pc, #52]	; (80041a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004172:	490e      	ldr	r1, [pc, #56]	; (80041ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004174:	4a0e      	ldr	r2, [pc, #56]	; (80041b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004178:	e002      	b.n	8004180 <LoopCopyDataInit>

0800417a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800417a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800417c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800417e:	3304      	adds	r3, #4

08004180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004184:	d3f9      	bcc.n	800417a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004186:	4a0b      	ldr	r2, [pc, #44]	; (80041b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004188:	4c0b      	ldr	r4, [pc, #44]	; (80041b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800418a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800418c:	e001      	b.n	8004192 <LoopFillZerobss>

0800418e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800418e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004190:	3204      	adds	r2, #4

08004192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004194:	d3fb      	bcc.n	800418e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004196:	f7ff ff33 	bl	8004000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800419a:	f008 fdbf 	bl	800cd1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800419e:	f7fe f8cd 	bl	800233c <main>
  bx  lr    
 80041a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80041a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041ac:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80041b0:	0800d380 	.word	0x0800d380
  ldr r2, =_sbss
 80041b4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80041b8:	20008670 	.word	0x20008670

080041bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041bc:	e7fe      	b.n	80041bc <ADC_IRQHandler>
	...

080041c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041c4:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <HAL_Init+0x40>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a0d      	ldr	r2, [pc, #52]	; (8004200 <HAL_Init+0x40>)
 80041ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <HAL_Init+0x40>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <HAL_Init+0x40>)
 80041d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041dc:	4b08      	ldr	r3, [pc, #32]	; (8004200 <HAL_Init+0x40>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a07      	ldr	r2, [pc, #28]	; (8004200 <HAL_Init+0x40>)
 80041e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041e8:	2003      	movs	r0, #3
 80041ea:	f000 f8fc 	bl	80043e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041ee:	200f      	movs	r0, #15
 80041f0:	f7ff fe7a 	bl	8003ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041f4:	f7ff fe4c 	bl	8003e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40023c00 	.word	0x40023c00

08004204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004208:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_IncTick+0x20>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <HAL_IncTick+0x24>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4413      	add	r3, r2
 8004214:	4a04      	ldr	r2, [pc, #16]	; (8004228 <HAL_IncTick+0x24>)
 8004216:	6013      	str	r3, [r2, #0]
}
 8004218:	bf00      	nop
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	2000000c 	.word	0x2000000c
 8004228:	20003d1c 	.word	0x20003d1c

0800422c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  return uwTick;
 8004230:	4b03      	ldr	r3, [pc, #12]	; (8004240 <HAL_GetTick+0x14>)
 8004232:	681b      	ldr	r3, [r3, #0]
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20003d1c 	.word	0x20003d1c

08004244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800424c:	f7ff ffee 	bl	800422c <HAL_GetTick>
 8004250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425c:	d005      	beq.n	800426a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800425e:	4b0a      	ldr	r3, [pc, #40]	; (8004288 <HAL_Delay+0x44>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800426a:	bf00      	nop
 800426c:	f7ff ffde 	bl	800422c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	429a      	cmp	r2, r3
 800427a:	d8f7      	bhi.n	800426c <HAL_Delay+0x28>
  {
  }
}
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	2000000c 	.word	0x2000000c

0800428c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800429c:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <__NVIC_SetPriorityGrouping+0x44>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042a8:	4013      	ands	r3, r2
 80042aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042be:	4a04      	ldr	r2, [pc, #16]	; (80042d0 <__NVIC_SetPriorityGrouping+0x44>)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	60d3      	str	r3, [r2, #12]
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	e000ed00 	.word	0xe000ed00

080042d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <__NVIC_GetPriorityGrouping+0x18>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	0a1b      	lsrs	r3, r3, #8
 80042de:	f003 0307 	and.w	r3, r3, #7
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	e000ed00 	.word	0xe000ed00

080042f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	db0b      	blt.n	800431a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	f003 021f 	and.w	r2, r3, #31
 8004308:	4907      	ldr	r1, [pc, #28]	; (8004328 <__NVIC_EnableIRQ+0x38>)
 800430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	2001      	movs	r0, #1
 8004312:	fa00 f202 	lsl.w	r2, r0, r2
 8004316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	e000e100 	.word	0xe000e100

0800432c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	6039      	str	r1, [r7, #0]
 8004336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433c:	2b00      	cmp	r3, #0
 800433e:	db0a      	blt.n	8004356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	b2da      	uxtb	r2, r3
 8004344:	490c      	ldr	r1, [pc, #48]	; (8004378 <__NVIC_SetPriority+0x4c>)
 8004346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434a:	0112      	lsls	r2, r2, #4
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	440b      	add	r3, r1
 8004350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004354:	e00a      	b.n	800436c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	b2da      	uxtb	r2, r3
 800435a:	4908      	ldr	r1, [pc, #32]	; (800437c <__NVIC_SetPriority+0x50>)
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	3b04      	subs	r3, #4
 8004364:	0112      	lsls	r2, r2, #4
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	440b      	add	r3, r1
 800436a:	761a      	strb	r2, [r3, #24]
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	e000e100 	.word	0xe000e100
 800437c:	e000ed00 	.word	0xe000ed00

08004380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004380:	b480      	push	{r7}
 8004382:	b089      	sub	sp, #36	; 0x24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f1c3 0307 	rsb	r3, r3, #7
 800439a:	2b04      	cmp	r3, #4
 800439c:	bf28      	it	cs
 800439e:	2304      	movcs	r3, #4
 80043a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3304      	adds	r3, #4
 80043a6:	2b06      	cmp	r3, #6
 80043a8:	d902      	bls.n	80043b0 <NVIC_EncodePriority+0x30>
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	3b03      	subs	r3, #3
 80043ae:	e000      	b.n	80043b2 <NVIC_EncodePriority+0x32>
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b4:	f04f 32ff 	mov.w	r2, #4294967295
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43da      	mvns	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	401a      	ands	r2, r3
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043c8:	f04f 31ff 	mov.w	r1, #4294967295
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	fa01 f303 	lsl.w	r3, r1, r3
 80043d2:	43d9      	mvns	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d8:	4313      	orrs	r3, r2
         );
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3724      	adds	r7, #36	; 0x24
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b082      	sub	sp, #8
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff ff4c 	bl	800428c <__NVIC_SetPriorityGrouping>
}
 80043f4:	bf00      	nop
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800440e:	f7ff ff61 	bl	80042d4 <__NVIC_GetPriorityGrouping>
 8004412:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	6978      	ldr	r0, [r7, #20]
 800441a:	f7ff ffb1 	bl	8004380 <NVIC_EncodePriority>
 800441e:	4602      	mov	r2, r0
 8004420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004424:	4611      	mov	r1, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff ff80 	bl	800432c <__NVIC_SetPriority>
}
 800442c:	bf00      	nop
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800443e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff ff54 	bl	80042f0 <__NVIC_EnableIRQ>
}
 8004448:	bf00      	nop
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800445c:	f7ff fee6 	bl	800422c <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e099      	b.n	80045a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0201 	bic.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800448c:	e00f      	b.n	80044ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800448e:	f7ff fecd 	bl	800422c <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b05      	cmp	r3, #5
 800449a:	d908      	bls.n	80044ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2203      	movs	r2, #3
 80044a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e078      	b.n	80045a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e8      	bne.n	800448e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4b38      	ldr	r3, [pc, #224]	; (80045a8 <HAL_DMA_Init+0x158>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	2b04      	cmp	r3, #4
 8004506:	d107      	bne.n	8004518 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	4313      	orrs	r3, r2
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f023 0307 	bic.w	r3, r3, #7
 800452e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	2b04      	cmp	r3, #4
 8004540:	d117      	bne.n	8004572 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00e      	beq.n	8004572 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 fb01 	bl	8004b5c <DMA_CheckFifoParam>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2240      	movs	r2, #64	; 0x40
 8004564:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800456e:	2301      	movs	r3, #1
 8004570:	e016      	b.n	80045a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fab8 	bl	8004af0 <DMA_CalcBaseAndBitshift>
 8004580:	4603      	mov	r3, r0
 8004582:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004588:	223f      	movs	r2, #63	; 0x3f
 800458a:	409a      	lsls	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	f010803f 	.word	0xf010803f

080045ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ba:	2300      	movs	r3, #0
 80045bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_DMA_Start_IT+0x26>
 80045ce:	2302      	movs	r3, #2
 80045d0:	e040      	b.n	8004654 <HAL_DMA_Start_IT+0xa8>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d12f      	bne.n	8004646 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2202      	movs	r2, #2
 80045ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fa4a 	bl	8004a94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004604:	223f      	movs	r2, #63	; 0x3f
 8004606:	409a      	lsls	r2, r3
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0216 	orr.w	r2, r2, #22
 800461a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d007      	beq.n	8004634 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0208 	orr.w	r2, r2, #8
 8004632:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	e005      	b.n	8004652 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800464e:	2302      	movs	r3, #2
 8004650:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004652:	7dfb      	ldrb	r3, [r7, #23]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004668:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800466a:	f7ff fddf 	bl	800422c <HAL_GetTick>
 800466e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d008      	beq.n	800468e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2280      	movs	r2, #128	; 0x80
 8004680:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e052      	b.n	8004734 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0216 	bic.w	r2, r2, #22
 800469c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d103      	bne.n	80046be <HAL_DMA_Abort+0x62>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d007      	beq.n	80046ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0208 	bic.w	r2, r2, #8
 80046cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0201 	bic.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046de:	e013      	b.n	8004708 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046e0:	f7ff fda4 	bl	800422c <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b05      	cmp	r3, #5
 80046ec:	d90c      	bls.n	8004708 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2203      	movs	r2, #3
 80046f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e015      	b.n	8004734 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e4      	bne.n	80046e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471a:	223f      	movs	r2, #63	; 0x3f
 800471c:	409a      	lsls	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d004      	beq.n	800475a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2280      	movs	r2, #128	; 0x80
 8004754:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e00c      	b.n	8004774 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2205      	movs	r2, #5
 800475e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0201 	bic.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800478c:	4b8e      	ldr	r3, [pc, #568]	; (80049c8 <HAL_DMA_IRQHandler+0x248>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a8e      	ldr	r2, [pc, #568]	; (80049cc <HAL_DMA_IRQHandler+0x24c>)
 8004792:	fba2 2303 	umull	r2, r3, r2, r3
 8004796:	0a9b      	lsrs	r3, r3, #10
 8004798:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047aa:	2208      	movs	r2, #8
 80047ac:	409a      	lsls	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4013      	ands	r3, r2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01a      	beq.n	80047ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0304 	and.w	r3, r3, #4
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d013      	beq.n	80047ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0204 	bic.w	r2, r2, #4
 80047d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d8:	2208      	movs	r2, #8
 80047da:	409a      	lsls	r2, r3
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	f043 0201 	orr.w	r2, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f0:	2201      	movs	r2, #1
 80047f2:	409a      	lsls	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d012      	beq.n	8004822 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800480e:	2201      	movs	r2, #1
 8004810:	409a      	lsls	r2, r3
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481a:	f043 0202 	orr.w	r2, r3, #2
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004826:	2204      	movs	r2, #4
 8004828:	409a      	lsls	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4013      	ands	r3, r2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d012      	beq.n	8004858 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00b      	beq.n	8004858 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004844:	2204      	movs	r2, #4
 8004846:	409a      	lsls	r2, r3
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004850:	f043 0204 	orr.w	r2, r3, #4
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800485c:	2210      	movs	r2, #16
 800485e:	409a      	lsls	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4013      	ands	r3, r2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d043      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d03c      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487a:	2210      	movs	r2, #16
 800487c:	409a      	lsls	r2, r3
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d018      	beq.n	80048c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d108      	bne.n	80048b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d024      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	4798      	blx	r3
 80048ae:	e01f      	b.n	80048f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01b      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	4798      	blx	r3
 80048c0:	e016      	b.n	80048f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d107      	bne.n	80048e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0208 	bic.w	r2, r2, #8
 80048de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f4:	2220      	movs	r2, #32
 80048f6:	409a      	lsls	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 808f 	beq.w	8004a20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 8087 	beq.w	8004a20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004916:	2220      	movs	r2, #32
 8004918:	409a      	lsls	r2, r3
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b05      	cmp	r3, #5
 8004928:	d136      	bne.n	8004998 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0216 	bic.w	r2, r2, #22
 8004938:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004948:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	2b00      	cmp	r3, #0
 8004950:	d103      	bne.n	800495a <HAL_DMA_IRQHandler+0x1da>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0208 	bic.w	r2, r2, #8
 8004968:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496e:	223f      	movs	r2, #63	; 0x3f
 8004970:	409a      	lsls	r2, r3
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498a:	2b00      	cmp	r3, #0
 800498c:	d07e      	beq.n	8004a8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
        }
        return;
 8004996:	e079      	b.n	8004a8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d01d      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10d      	bne.n	80049d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d031      	beq.n	8004a20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	4798      	blx	r3
 80049c4:	e02c      	b.n	8004a20 <HAL_DMA_IRQHandler+0x2a0>
 80049c6:	bf00      	nop
 80049c8:	20000004 	.word	0x20000004
 80049cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d023      	beq.n	8004a20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	4798      	blx	r3
 80049e0:	e01e      	b.n	8004a20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10f      	bne.n	8004a10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f022 0210 	bic.w	r2, r2, #16
 80049fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d032      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d022      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2205      	movs	r2, #5
 8004a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0201 	bic.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d307      	bcc.n	8004a68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f2      	bne.n	8004a4c <HAL_DMA_IRQHandler+0x2cc>
 8004a66:	e000      	b.n	8004a6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	4798      	blx	r3
 8004a8a:	e000      	b.n	8004a8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a8c:	bf00      	nop
    }
  }
}
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ab0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b40      	cmp	r3, #64	; 0x40
 8004ac0:	d108      	bne.n	8004ad4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ad2:	e007      	b.n	8004ae4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	60da      	str	r2, [r3, #12]
}
 8004ae4:	bf00      	nop
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	3b10      	subs	r3, #16
 8004b00:	4a14      	ldr	r2, [pc, #80]	; (8004b54 <DMA_CalcBaseAndBitshift+0x64>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	091b      	lsrs	r3, r3, #4
 8004b08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b0a:	4a13      	ldr	r2, [pc, #76]	; (8004b58 <DMA_CalcBaseAndBitshift+0x68>)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4413      	add	r3, r2
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d909      	bls.n	8004b32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b26:	f023 0303 	bic.w	r3, r3, #3
 8004b2a:	1d1a      	adds	r2, r3, #4
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	659a      	str	r2, [r3, #88]	; 0x58
 8004b30:	e007      	b.n	8004b42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b3a:	f023 0303 	bic.w	r3, r3, #3
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	aaaaaaab 	.word	0xaaaaaaab
 8004b58:	0800d368 	.word	0x0800d368

08004b5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d11f      	bne.n	8004bb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b03      	cmp	r3, #3
 8004b7a:	d856      	bhi.n	8004c2a <DMA_CheckFifoParam+0xce>
 8004b7c:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <DMA_CheckFifoParam+0x28>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004b95 	.word	0x08004b95
 8004b88:	08004ba7 	.word	0x08004ba7
 8004b8c:	08004b95 	.word	0x08004b95
 8004b90:	08004c2b 	.word	0x08004c2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d046      	beq.n	8004c2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ba4:	e043      	b.n	8004c2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bae:	d140      	bne.n	8004c32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bb4:	e03d      	b.n	8004c32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbe:	d121      	bne.n	8004c04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d837      	bhi.n	8004c36 <DMA_CheckFifoParam+0xda>
 8004bc6:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <DMA_CheckFifoParam+0x70>)
 8004bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bcc:	08004bdd 	.word	0x08004bdd
 8004bd0:	08004be3 	.word	0x08004be3
 8004bd4:	08004bdd 	.word	0x08004bdd
 8004bd8:	08004bf5 	.word	0x08004bf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	73fb      	strb	r3, [r7, #15]
      break;
 8004be0:	e030      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d025      	beq.n	8004c3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf2:	e022      	b.n	8004c3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bfc:	d11f      	bne.n	8004c3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c02:	e01c      	b.n	8004c3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d903      	bls.n	8004c12 <DMA_CheckFifoParam+0xb6>
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d003      	beq.n	8004c18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c10:	e018      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
      break;
 8004c16:	e015      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00e      	beq.n	8004c42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
      break;
 8004c28:	e00b      	b.n	8004c42 <DMA_CheckFifoParam+0xe6>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e00a      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
      break;
 8004c2e:	bf00      	nop
 8004c30:	e008      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
      break;
 8004c32:	bf00      	nop
 8004c34:	e006      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
      break;
 8004c36:	bf00      	nop
 8004c38:	e004      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
      break;
 8004c3a:	bf00      	nop
 8004c3c:	e002      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c3e:	bf00      	nop
 8004c40:	e000      	b.n	8004c44 <DMA_CheckFifoParam+0xe8>
      break;
 8004c42:	bf00      	nop
    }
  } 
  
  return status; 
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop

08004c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b089      	sub	sp, #36	; 0x24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	e159      	b.n	8004f24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c70:	2201      	movs	r2, #1
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4013      	ands	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	f040 8148 	bne.w	8004f1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d005      	beq.n	8004ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d130      	bne.n	8004d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	2203      	movs	r2, #3
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	43db      	mvns	r3, r3
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cdc:	2201      	movs	r2, #1
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	091b      	lsrs	r3, r3, #4
 8004cf2:	f003 0201 	and.w	r2, r3, #1
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f003 0303 	and.w	r3, r3, #3
 8004d10:	2b03      	cmp	r3, #3
 8004d12:	d017      	beq.n	8004d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	2203      	movs	r2, #3
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	43db      	mvns	r3, r3
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f003 0303 	and.w	r3, r3, #3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d123      	bne.n	8004d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	08da      	lsrs	r2, r3, #3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3208      	adds	r2, #8
 8004d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	220f      	movs	r2, #15
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	4013      	ands	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	fa02 f303 	lsl.w	r3, r2, r3
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	08da      	lsrs	r2, r3, #3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3208      	adds	r2, #8
 8004d92:	69b9      	ldr	r1, [r7, #24]
 8004d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	2203      	movs	r2, #3
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	43db      	mvns	r3, r3
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	4013      	ands	r3, r2
 8004dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f003 0203 	and.w	r2, r3, #3
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 80a2 	beq.w	8004f1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	4b57      	ldr	r3, [pc, #348]	; (8004f3c <HAL_GPIO_Init+0x2e8>)
 8004de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de2:	4a56      	ldr	r2, [pc, #344]	; (8004f3c <HAL_GPIO_Init+0x2e8>)
 8004de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004de8:	6453      	str	r3, [r2, #68]	; 0x44
 8004dea:	4b54      	ldr	r3, [pc, #336]	; (8004f3c <HAL_GPIO_Init+0x2e8>)
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004df6:	4a52      	ldr	r2, [pc, #328]	; (8004f40 <HAL_GPIO_Init+0x2ec>)
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	089b      	lsrs	r3, r3, #2
 8004dfc:	3302      	adds	r3, #2
 8004dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	220f      	movs	r2, #15
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	43db      	mvns	r3, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4013      	ands	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a49      	ldr	r2, [pc, #292]	; (8004f44 <HAL_GPIO_Init+0x2f0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d019      	beq.n	8004e56 <HAL_GPIO_Init+0x202>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a48      	ldr	r2, [pc, #288]	; (8004f48 <HAL_GPIO_Init+0x2f4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d013      	beq.n	8004e52 <HAL_GPIO_Init+0x1fe>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a47      	ldr	r2, [pc, #284]	; (8004f4c <HAL_GPIO_Init+0x2f8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d00d      	beq.n	8004e4e <HAL_GPIO_Init+0x1fa>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a46      	ldr	r2, [pc, #280]	; (8004f50 <HAL_GPIO_Init+0x2fc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d007      	beq.n	8004e4a <HAL_GPIO_Init+0x1f6>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a45      	ldr	r2, [pc, #276]	; (8004f54 <HAL_GPIO_Init+0x300>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d101      	bne.n	8004e46 <HAL_GPIO_Init+0x1f2>
 8004e42:	2304      	movs	r3, #4
 8004e44:	e008      	b.n	8004e58 <HAL_GPIO_Init+0x204>
 8004e46:	2307      	movs	r3, #7
 8004e48:	e006      	b.n	8004e58 <HAL_GPIO_Init+0x204>
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e004      	b.n	8004e58 <HAL_GPIO_Init+0x204>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e002      	b.n	8004e58 <HAL_GPIO_Init+0x204>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <HAL_GPIO_Init+0x204>
 8004e56:	2300      	movs	r3, #0
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	f002 0203 	and.w	r2, r2, #3
 8004e5e:	0092      	lsls	r2, r2, #2
 8004e60:	4093      	lsls	r3, r2
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e68:	4935      	ldr	r1, [pc, #212]	; (8004f40 <HAL_GPIO_Init+0x2ec>)
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	089b      	lsrs	r3, r3, #2
 8004e6e:	3302      	adds	r3, #2
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e76:	4b38      	ldr	r3, [pc, #224]	; (8004f58 <HAL_GPIO_Init+0x304>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4013      	ands	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e9a:	4a2f      	ldr	r2, [pc, #188]	; (8004f58 <HAL_GPIO_Init+0x304>)
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ea0:	4b2d      	ldr	r3, [pc, #180]	; (8004f58 <HAL_GPIO_Init+0x304>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4013      	ands	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ec4:	4a24      	ldr	r2, [pc, #144]	; (8004f58 <HAL_GPIO_Init+0x304>)
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004eca:	4b23      	ldr	r3, [pc, #140]	; (8004f58 <HAL_GPIO_Init+0x304>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004eee:	4a1a      	ldr	r2, [pc, #104]	; (8004f58 <HAL_GPIO_Init+0x304>)
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ef4:	4b18      	ldr	r3, [pc, #96]	; (8004f58 <HAL_GPIO_Init+0x304>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	43db      	mvns	r3, r3
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4013      	ands	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f18:	4a0f      	ldr	r2, [pc, #60]	; (8004f58 <HAL_GPIO_Init+0x304>)
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	3301      	adds	r3, #1
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	2b0f      	cmp	r3, #15
 8004f28:	f67f aea2 	bls.w	8004c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	3724      	adds	r7, #36	; 0x24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	40013800 	.word	0x40013800
 8004f44:	40020000 	.word	0x40020000
 8004f48:	40020400 	.word	0x40020400
 8004f4c:	40020800 	.word	0x40020800
 8004f50:	40020c00 	.word	0x40020c00
 8004f54:	40021000 	.word	0x40021000
 8004f58:	40013c00 	.word	0x40013c00

08004f5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	887b      	ldrh	r3, [r7, #2]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f74:	2301      	movs	r3, #1
 8004f76:	73fb      	strb	r3, [r7, #15]
 8004f78:	e001      	b.n	8004f7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	460b      	mov	r3, r1
 8004f96:	807b      	strh	r3, [r7, #2]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f9c:	787b      	ldrb	r3, [r7, #1]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fa2:	887a      	ldrh	r2, [r7, #2]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004fa8:	e003      	b.n	8004fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004faa:	887b      	ldrh	r3, [r7, #2]
 8004fac:	041a      	lsls	r2, r3, #16
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	619a      	str	r2, [r3, #24]
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
	...

08004fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e12b      	b.n	800522a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d106      	bne.n	8004fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fd f960 	bl	80022ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2224      	movs	r2, #36	; 0x24
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0201 	bic.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005024:	f001 fbd2 	bl	80067cc <HAL_RCC_GetPCLK1Freq>
 8005028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	4a81      	ldr	r2, [pc, #516]	; (8005234 <HAL_I2C_Init+0x274>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d807      	bhi.n	8005044 <HAL_I2C_Init+0x84>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4a80      	ldr	r2, [pc, #512]	; (8005238 <HAL_I2C_Init+0x278>)
 8005038:	4293      	cmp	r3, r2
 800503a:	bf94      	ite	ls
 800503c:	2301      	movls	r3, #1
 800503e:	2300      	movhi	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	e006      	b.n	8005052 <HAL_I2C_Init+0x92>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4a7d      	ldr	r2, [pc, #500]	; (800523c <HAL_I2C_Init+0x27c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	bf94      	ite	ls
 800504c:	2301      	movls	r3, #1
 800504e:	2300      	movhi	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e0e7      	b.n	800522a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4a78      	ldr	r2, [pc, #480]	; (8005240 <HAL_I2C_Init+0x280>)
 800505e:	fba2 2303 	umull	r2, r3, r2, r3
 8005062:	0c9b      	lsrs	r3, r3, #18
 8005064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	430a      	orrs	r2, r1
 8005078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	4a6a      	ldr	r2, [pc, #424]	; (8005234 <HAL_I2C_Init+0x274>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d802      	bhi.n	8005094 <HAL_I2C_Init+0xd4>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	3301      	adds	r3, #1
 8005092:	e009      	b.n	80050a8 <HAL_I2C_Init+0xe8>
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800509a:	fb02 f303 	mul.w	r3, r2, r3
 800509e:	4a69      	ldr	r2, [pc, #420]	; (8005244 <HAL_I2C_Init+0x284>)
 80050a0:	fba2 2303 	umull	r2, r3, r2, r3
 80050a4:	099b      	lsrs	r3, r3, #6
 80050a6:	3301      	adds	r3, #1
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	430b      	orrs	r3, r1
 80050ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	495c      	ldr	r1, [pc, #368]	; (8005234 <HAL_I2C_Init+0x274>)
 80050c4:	428b      	cmp	r3, r1
 80050c6:	d819      	bhi.n	80050fc <HAL_I2C_Init+0x13c>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	1e59      	subs	r1, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80050d6:	1c59      	adds	r1, r3, #1
 80050d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80050dc:	400b      	ands	r3, r1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <HAL_I2C_Init+0x138>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	1e59      	subs	r1, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80050f0:	3301      	adds	r3, #1
 80050f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f6:	e051      	b.n	800519c <HAL_I2C_Init+0x1dc>
 80050f8:	2304      	movs	r3, #4
 80050fa:	e04f      	b.n	800519c <HAL_I2C_Init+0x1dc>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d111      	bne.n	8005128 <HAL_I2C_Init+0x168>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	1e58      	subs	r0, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6859      	ldr	r1, [r3, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	440b      	add	r3, r1
 8005112:	fbb0 f3f3 	udiv	r3, r0, r3
 8005116:	3301      	adds	r3, #1
 8005118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800511c:	2b00      	cmp	r3, #0
 800511e:	bf0c      	ite	eq
 8005120:	2301      	moveq	r3, #1
 8005122:	2300      	movne	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	e012      	b.n	800514e <HAL_I2C_Init+0x18e>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	1e58      	subs	r0, r3, #1
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6859      	ldr	r1, [r3, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	0099      	lsls	r1, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	fbb0 f3f3 	udiv	r3, r0, r3
 800513e:	3301      	adds	r3, #1
 8005140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005144:	2b00      	cmp	r3, #0
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_I2C_Init+0x196>
 8005152:	2301      	movs	r3, #1
 8005154:	e022      	b.n	800519c <HAL_I2C_Init+0x1dc>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10e      	bne.n	800517c <HAL_I2C_Init+0x1bc>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	1e58      	subs	r0, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6859      	ldr	r1, [r3, #4]
 8005166:	460b      	mov	r3, r1
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	440b      	add	r3, r1
 800516c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005170:	3301      	adds	r3, #1
 8005172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800517a:	e00f      	b.n	800519c <HAL_I2C_Init+0x1dc>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	1e58      	subs	r0, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6859      	ldr	r1, [r3, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	440b      	add	r3, r1
 800518a:	0099      	lsls	r1, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005192:	3301      	adds	r3, #1
 8005194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	6809      	ldr	r1, [r1, #0]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69da      	ldr	r2, [r3, #28]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6911      	ldr	r1, [r2, #16]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	68d2      	ldr	r2, [r2, #12]
 80051d6:	4311      	orrs	r1, r2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	430b      	orrs	r3, r1
 80051de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695a      	ldr	r2, [r3, #20]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	000186a0 	.word	0x000186a0
 8005238:	001e847f 	.word	0x001e847f
 800523c:	003d08ff 	.word	0x003d08ff
 8005240:	431bde83 	.word	0x431bde83
 8005244:	10624dd3 	.word	0x10624dd3

08005248 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af02      	add	r7, sp, #8
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	607a      	str	r2, [r7, #4]
 8005252:	461a      	mov	r2, r3
 8005254:	460b      	mov	r3, r1
 8005256:	817b      	strh	r3, [r7, #10]
 8005258:	4613      	mov	r3, r2
 800525a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800525c:	f7fe ffe6 	bl	800422c <HAL_GetTick>
 8005260:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b20      	cmp	r3, #32
 800526c:	f040 80e0 	bne.w	8005430 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	2319      	movs	r3, #25
 8005276:	2201      	movs	r2, #1
 8005278:	4970      	ldr	r1, [pc, #448]	; (800543c <HAL_I2C_Master_Transmit+0x1f4>)
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 fc58 	bl	8005b30 <I2C_WaitOnFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005286:	2302      	movs	r3, #2
 8005288:	e0d3      	b.n	8005432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_I2C_Master_Transmit+0x50>
 8005294:	2302      	movs	r3, #2
 8005296:	e0cc      	b.n	8005432 <HAL_I2C_Master_Transmit+0x1ea>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d007      	beq.n	80052be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2221      	movs	r2, #33	; 0x21
 80052d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2210      	movs	r2, #16
 80052da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	893a      	ldrh	r2, [r7, #8]
 80052ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4a50      	ldr	r2, [pc, #320]	; (8005440 <HAL_I2C_Master_Transmit+0x1f8>)
 80052fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005300:	8979      	ldrh	r1, [r7, #10]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	6a3a      	ldr	r2, [r7, #32]
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 fac2 	bl	8005890 <I2C_MasterRequestWrite>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e08d      	b.n	8005432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800532c:	e066      	b.n	80053fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	6a39      	ldr	r1, [r7, #32]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 fcd2 	bl	8005cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	2b04      	cmp	r3, #4
 8005344:	d107      	bne.n	8005356 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e06b      	b.n	8005432 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	781a      	ldrb	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005374:	b29b      	uxth	r3, r3
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b04      	cmp	r3, #4
 8005396:	d11b      	bne.n	80053d0 <HAL_I2C_Master_Transmit+0x188>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539c:	2b00      	cmp	r3, #0
 800539e:	d017      	beq.n	80053d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	781a      	ldrb	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	6a39      	ldr	r1, [r7, #32]
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 fcc2 	bl	8005d5e <I2C_WaitOnBTFFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d00d      	beq.n	80053fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d107      	bne.n	80053f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e01a      	b.n	8005432 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005400:	2b00      	cmp	r3, #0
 8005402:	d194      	bne.n	800532e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	e000      	b.n	8005432 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005430:	2302      	movs	r3, #2
  }
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	00100002 	.word	0x00100002
 8005440:	ffff0000 	.word	0xffff0000

08005444 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08c      	sub	sp, #48	; 0x30
 8005448:	af02      	add	r7, sp, #8
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	461a      	mov	r2, r3
 8005450:	460b      	mov	r3, r1
 8005452:	817b      	strh	r3, [r7, #10]
 8005454:	4613      	mov	r3, r2
 8005456:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005458:	f7fe fee8 	bl	800422c <HAL_GetTick>
 800545c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b20      	cmp	r3, #32
 8005468:	f040 820b 	bne.w	8005882 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	2319      	movs	r3, #25
 8005472:	2201      	movs	r2, #1
 8005474:	497c      	ldr	r1, [pc, #496]	; (8005668 <HAL_I2C_Master_Receive+0x224>)
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 fb5a 	bl	8005b30 <I2C_WaitOnFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005482:	2302      	movs	r3, #2
 8005484:	e1fe      	b.n	8005884 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800548c:	2b01      	cmp	r3, #1
 800548e:	d101      	bne.n	8005494 <HAL_I2C_Master_Receive+0x50>
 8005490:	2302      	movs	r3, #2
 8005492:	e1f7      	b.n	8005884 <HAL_I2C_Master_Receive+0x440>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d007      	beq.n	80054ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f042 0201 	orr.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2222      	movs	r2, #34	; 0x22
 80054ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2210      	movs	r2, #16
 80054d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	893a      	ldrh	r2, [r7, #8]
 80054ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	4a5c      	ldr	r2, [pc, #368]	; (800566c <HAL_I2C_Master_Receive+0x228>)
 80054fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80054fc:	8979      	ldrh	r1, [r7, #10]
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 fa46 	bl	8005994 <I2C_MasterRequestRead>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e1b8      	b.n	8005884 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005516:	2b00      	cmp	r3, #0
 8005518:	d113      	bne.n	8005542 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800551a:	2300      	movs	r3, #0
 800551c:	623b      	str	r3, [r7, #32]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	623b      	str	r3, [r7, #32]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	623b      	str	r3, [r7, #32]
 800552e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	e18c      	b.n	800585c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005546:	2b01      	cmp	r3, #1
 8005548:	d11b      	bne.n	8005582 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005558:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	61fb      	str	r3, [r7, #28]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	61fb      	str	r3, [r7, #28]
 800556e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	e16c      	b.n	800585c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005586:	2b02      	cmp	r3, #2
 8005588:	d11b      	bne.n	80055c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005598:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055aa:	2300      	movs	r3, #0
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	61bb      	str	r3, [r7, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	61bb      	str	r3, [r7, #24]
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	e14c      	b.n	800585c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d2:	2300      	movs	r3, #0
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80055e8:	e138      	b.n	800585c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ee:	2b03      	cmp	r3, #3
 80055f0:	f200 80f1 	bhi.w	80057d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d123      	bne.n	8005644 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 fbed 	bl	8005de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e139      	b.n	8005884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005642:	e10b      	b.n	800585c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005648:	2b02      	cmp	r3, #2
 800564a:	d14e      	bne.n	80056ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	2200      	movs	r2, #0
 8005654:	4906      	ldr	r1, [pc, #24]	; (8005670 <HAL_I2C_Master_Receive+0x22c>)
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 fa6a 	bl	8005b30 <I2C_WaitOnFlagUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d008      	beq.n	8005674 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e10e      	b.n	8005884 <HAL_I2C_Master_Receive+0x440>
 8005666:	bf00      	nop
 8005668:	00100002 	.word	0x00100002
 800566c:	ffff0000 	.word	0xffff0000
 8005670:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	b2d2      	uxtb	r2, r2
 8005690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	b2d2      	uxtb	r2, r2
 80056c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056e8:	e0b8      	b.n	800585c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	2200      	movs	r2, #0
 80056f2:	4966      	ldr	r1, [pc, #408]	; (800588c <HAL_I2C_Master_Receive+0x448>)
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 fa1b 	bl	8005b30 <I2C_WaitOnFlagUntilTimeout>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e0bf      	b.n	8005884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	691a      	ldr	r2, [r3, #16]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	3b01      	subs	r3, #1
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	2200      	movs	r2, #0
 800574e:	494f      	ldr	r1, [pc, #316]	; (800588c <HAL_I2C_Master_Receive+0x448>)
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f000 f9ed 	bl	8005b30 <I2C_WaitOnFlagUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e091      	b.n	8005884 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800576e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691a      	ldr	r2, [r3, #16]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	b2d2      	uxtb	r2, r2
 80057ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057d4:	e042      	b.n	800585c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 fb00 	bl	8005de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e04c      	b.n	8005884 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005812:	b29b      	uxth	r3, r3
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b04      	cmp	r3, #4
 8005828:	d118      	bne.n	800585c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005846:	3b01      	subs	r3, #1
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005852:	b29b      	uxth	r3, r3
 8005854:	3b01      	subs	r3, #1
 8005856:	b29a      	uxth	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005860:	2b00      	cmp	r3, #0
 8005862:	f47f aec2 	bne.w	80055ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	e000      	b.n	8005884 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005882:	2302      	movs	r3, #2
  }
}
 8005884:	4618      	mov	r0, r3
 8005886:	3728      	adds	r7, #40	; 0x28
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	00010004 	.word	0x00010004

08005890 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	460b      	mov	r3, r1
 800589e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d006      	beq.n	80058ba <I2C_MasterRequestWrite+0x2a>
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d003      	beq.n	80058ba <I2C_MasterRequestWrite+0x2a>
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058b8:	d108      	bne.n	80058cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	e00b      	b.n	80058e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d0:	2b12      	cmp	r3, #18
 80058d2:	d107      	bne.n	80058e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 f91d 	bl	8005b30 <I2C_WaitOnFlagUntilTimeout>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00d      	beq.n	8005918 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800590a:	d103      	bne.n	8005914 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005912:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e035      	b.n	8005984 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005920:	d108      	bne.n	8005934 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005922:	897b      	ldrh	r3, [r7, #10]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	461a      	mov	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005930:	611a      	str	r2, [r3, #16]
 8005932:	e01b      	b.n	800596c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005934:	897b      	ldrh	r3, [r7, #10]
 8005936:	11db      	asrs	r3, r3, #7
 8005938:	b2db      	uxtb	r3, r3
 800593a:	f003 0306 	and.w	r3, r3, #6
 800593e:	b2db      	uxtb	r3, r3
 8005940:	f063 030f 	orn	r3, r3, #15
 8005944:	b2da      	uxtb	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	490e      	ldr	r1, [pc, #56]	; (800598c <I2C_MasterRequestWrite+0xfc>)
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 f943 	bl	8005bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e010      	b.n	8005984 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005962:	897b      	ldrh	r3, [r7, #10]
 8005964:	b2da      	uxtb	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	4907      	ldr	r1, [pc, #28]	; (8005990 <I2C_MasterRequestWrite+0x100>)
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 f933 	bl	8005bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	00010008 	.word	0x00010008
 8005990:	00010002 	.word	0x00010002

08005994 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af02      	add	r7, sp, #8
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	607a      	str	r2, [r7, #4]
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	460b      	mov	r3, r1
 80059a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d006      	beq.n	80059ce <I2C_MasterRequestRead+0x3a>
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d003      	beq.n	80059ce <I2C_MasterRequestRead+0x3a>
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059cc:	d108      	bne.n	80059e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	e00b      	b.n	80059f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e4:	2b11      	cmp	r3, #17
 80059e6:	d107      	bne.n	80059f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 f893 	bl	8005b30 <I2C_WaitOnFlagUntilTimeout>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00d      	beq.n	8005a2c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a1e:	d103      	bne.n	8005a28 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e079      	b.n	8005b20 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a34:	d108      	bne.n	8005a48 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a36:	897b      	ldrh	r3, [r7, #10]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	f043 0301 	orr.w	r3, r3, #1
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	611a      	str	r2, [r3, #16]
 8005a46:	e05f      	b.n	8005b08 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a48:	897b      	ldrh	r3, [r7, #10]
 8005a4a:	11db      	asrs	r3, r3, #7
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	f003 0306 	and.w	r3, r3, #6
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	f063 030f 	orn	r3, r3, #15
 8005a58:	b2da      	uxtb	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	4930      	ldr	r1, [pc, #192]	; (8005b28 <I2C_MasterRequestRead+0x194>)
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f8b9 	bl	8005bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e054      	b.n	8005b20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a76:	897b      	ldrh	r3, [r7, #10]
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	4929      	ldr	r1, [pc, #164]	; (8005b2c <I2C_MasterRequestRead+0x198>)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f8a9 	bl	8005bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e044      	b.n	8005b20 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a96:	2300      	movs	r3, #0
 8005a98:	613b      	str	r3, [r7, #16]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	613b      	str	r3, [r7, #16]
 8005aaa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 f831 	bl	8005b30 <I2C_WaitOnFlagUntilTimeout>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00d      	beq.n	8005af0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae2:	d103      	bne.n	8005aec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e017      	b.n	8005b20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005af0:	897b      	ldrh	r3, [r7, #10]
 8005af2:	11db      	asrs	r3, r3, #7
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	f003 0306 	and.w	r3, r3, #6
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	f063 030e 	orn	r3, r3, #14
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	4907      	ldr	r1, [pc, #28]	; (8005b2c <I2C_MasterRequestRead+0x198>)
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 f865 	bl	8005bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	00010008 	.word	0x00010008
 8005b2c:	00010002 	.word	0x00010002

08005b30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b40:	e025      	b.n	8005b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b48:	d021      	beq.n	8005b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b4a:	f7fe fb6f 	bl	800422c <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d302      	bcc.n	8005b60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d116      	bne.n	8005b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	f043 0220 	orr.w	r2, r3, #32
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e023      	b.n	8005bd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	0c1b      	lsrs	r3, r3, #16
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d10d      	bne.n	8005bb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	43da      	mvns	r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	bf0c      	ite	eq
 8005baa:	2301      	moveq	r3, #1
 8005bac:	2300      	movne	r3, #0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	e00c      	b.n	8005bce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	43da      	mvns	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	bf0c      	ite	eq
 8005bc6:	2301      	moveq	r3, #1
 8005bc8:	2300      	movne	r3, #0
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	461a      	mov	r2, r3
 8005bce:	79fb      	ldrb	r3, [r7, #7]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d0b6      	beq.n	8005b42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	607a      	str	r2, [r7, #4]
 8005bea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bec:	e051      	b.n	8005c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bfc:	d123      	bne.n	8005c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	f043 0204 	orr.w	r2, r3, #4
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e046      	b.n	8005cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4c:	d021      	beq.n	8005c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4e:	f7fe faed 	bl	800422c <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d302      	bcc.n	8005c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d116      	bne.n	8005c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	f043 0220 	orr.w	r2, r3, #32
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e020      	b.n	8005cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	0c1b      	lsrs	r3, r3, #16
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d10c      	bne.n	8005cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	43da      	mvns	r2, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	bf14      	ite	ne
 8005cae:	2301      	movne	r3, #1
 8005cb0:	2300      	moveq	r3, #0
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	e00b      	b.n	8005cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	43da      	mvns	r2, r3
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	bf14      	ite	ne
 8005cc8:	2301      	movne	r3, #1
 8005cca:	2300      	moveq	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d18d      	bne.n	8005bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ce8:	e02d      	b.n	8005d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 f8ce 	bl	8005e8c <I2C_IsAcknowledgeFailed>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e02d      	b.n	8005d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d00:	d021      	beq.n	8005d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d02:	f7fe fa93 	bl	800422c <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d302      	bcc.n	8005d18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d116      	bne.n	8005d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	f043 0220 	orr.w	r2, r3, #32
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e007      	b.n	8005d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d50:	2b80      	cmp	r3, #128	; 0x80
 8005d52:	d1ca      	bne.n	8005cea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b084      	sub	sp, #16
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	60f8      	str	r0, [r7, #12]
 8005d66:	60b9      	str	r1, [r7, #8]
 8005d68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d6a:	e02d      	b.n	8005dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f88d 	bl	8005e8c <I2C_IsAcknowledgeFailed>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e02d      	b.n	8005dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d82:	d021      	beq.n	8005dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d84:	f7fe fa52 	bl	800422c <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d302      	bcc.n	8005d9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d116      	bne.n	8005dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	f043 0220 	orr.w	r2, r3, #32
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e007      	b.n	8005dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	f003 0304 	and.w	r3, r3, #4
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d1ca      	bne.n	8005d6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005dec:	e042      	b.n	8005e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	f003 0310 	and.w	r3, r3, #16
 8005df8:	2b10      	cmp	r3, #16
 8005dfa:	d119      	bne.n	8005e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f06f 0210 	mvn.w	r2, #16
 8005e04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e029      	b.n	8005e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e30:	f7fe f9fc 	bl	800422c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d302      	bcc.n	8005e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d116      	bne.n	8005e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	f043 0220 	orr.w	r2, r3, #32
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e007      	b.n	8005e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7e:	2b40      	cmp	r3, #64	; 0x40
 8005e80:	d1b5      	bne.n	8005dee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea2:	d11b      	bne.n	8005edc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005eac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec8:	f043 0204 	orr.w	r2, r3, #4
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e267      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d075      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f0a:	4b88      	ldr	r3, [pc, #544]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 030c 	and.w	r3, r3, #12
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d00c      	beq.n	8005f30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f16:	4b85      	ldr	r3, [pc, #532]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	d112      	bne.n	8005f48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f22:	4b82      	ldr	r3, [pc, #520]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f2e:	d10b      	bne.n	8005f48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f30:	4b7e      	ldr	r3, [pc, #504]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d05b      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x108>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d157      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e242      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f50:	d106      	bne.n	8005f60 <HAL_RCC_OscConfig+0x74>
 8005f52:	4b76      	ldr	r3, [pc, #472]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a75      	ldr	r2, [pc, #468]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8005f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f5c:	6013      	str	r3, [r2, #0]
 8005f5e:	e01d      	b.n	8005f9c <HAL_RCC_OscConfig+0xb0>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f68:	d10c      	bne.n	8005f84 <HAL_RCC_OscConfig+0x98>
 8005f6a:	4b70      	ldr	r3, [pc, #448]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a6f      	ldr	r2, [pc, #444]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8005f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	4b6d      	ldr	r3, [pc, #436]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a6c      	ldr	r2, [pc, #432]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8005f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	e00b      	b.n	8005f9c <HAL_RCC_OscConfig+0xb0>
 8005f84:	4b69      	ldr	r3, [pc, #420]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a68      	ldr	r2, [pc, #416]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8005f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	4b66      	ldr	r3, [pc, #408]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a65      	ldr	r2, [pc, #404]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8005f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d013      	beq.n	8005fcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa4:	f7fe f942 	bl	800422c <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fac:	f7fe f93e 	bl	800422c <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b64      	cmp	r3, #100	; 0x64
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e207      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fbe:	4b5b      	ldr	r3, [pc, #364]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0f0      	beq.n	8005fac <HAL_RCC_OscConfig+0xc0>
 8005fca:	e014      	b.n	8005ff6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fcc:	f7fe f92e 	bl	800422c <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fd4:	f7fe f92a 	bl	800422c <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b64      	cmp	r3, #100	; 0x64
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e1f3      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fe6:	4b51      	ldr	r3, [pc, #324]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1f0      	bne.n	8005fd4 <HAL_RCC_OscConfig+0xe8>
 8005ff2:	e000      	b.n	8005ff6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d063      	beq.n	80060ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006002:	4b4a      	ldr	r3, [pc, #296]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 030c 	and.w	r3, r3, #12
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00b      	beq.n	8006026 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800600e:	4b47      	ldr	r3, [pc, #284]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006016:	2b08      	cmp	r3, #8
 8006018:	d11c      	bne.n	8006054 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800601a:	4b44      	ldr	r3, [pc, #272]	; (800612c <HAL_RCC_OscConfig+0x240>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d116      	bne.n	8006054 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006026:	4b41      	ldr	r3, [pc, #260]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d005      	beq.n	800603e <HAL_RCC_OscConfig+0x152>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d001      	beq.n	800603e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e1c7      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800603e:	4b3b      	ldr	r3, [pc, #236]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	4937      	ldr	r1, [pc, #220]	; (800612c <HAL_RCC_OscConfig+0x240>)
 800604e:	4313      	orrs	r3, r2
 8006050:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006052:	e03a      	b.n	80060ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d020      	beq.n	800609e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800605c:	4b34      	ldr	r3, [pc, #208]	; (8006130 <HAL_RCC_OscConfig+0x244>)
 800605e:	2201      	movs	r2, #1
 8006060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006062:	f7fe f8e3 	bl	800422c <HAL_GetTick>
 8006066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006068:	e008      	b.n	800607c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800606a:	f7fe f8df 	bl	800422c <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d901      	bls.n	800607c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e1a8      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800607c:	4b2b      	ldr	r3, [pc, #172]	; (800612c <HAL_RCC_OscConfig+0x240>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d0f0      	beq.n	800606a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006088:	4b28      	ldr	r3, [pc, #160]	; (800612c <HAL_RCC_OscConfig+0x240>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	4925      	ldr	r1, [pc, #148]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8006098:	4313      	orrs	r3, r2
 800609a:	600b      	str	r3, [r1, #0]
 800609c:	e015      	b.n	80060ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800609e:	4b24      	ldr	r3, [pc, #144]	; (8006130 <HAL_RCC_OscConfig+0x244>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a4:	f7fe f8c2 	bl	800422c <HAL_GetTick>
 80060a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060aa:	e008      	b.n	80060be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ac:	f7fe f8be 	bl	800422c <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e187      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060be:	4b1b      	ldr	r3, [pc, #108]	; (800612c <HAL_RCC_OscConfig+0x240>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1f0      	bne.n	80060ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d036      	beq.n	8006144 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d016      	beq.n	800610c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060de:	4b15      	ldr	r3, [pc, #84]	; (8006134 <HAL_RCC_OscConfig+0x248>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e4:	f7fe f8a2 	bl	800422c <HAL_GetTick>
 80060e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060ec:	f7fe f89e 	bl	800422c <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e167      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060fe:	4b0b      	ldr	r3, [pc, #44]	; (800612c <HAL_RCC_OscConfig+0x240>)
 8006100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0f0      	beq.n	80060ec <HAL_RCC_OscConfig+0x200>
 800610a:	e01b      	b.n	8006144 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <HAL_RCC_OscConfig+0x248>)
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006112:	f7fe f88b 	bl	800422c <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006118:	e00e      	b.n	8006138 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800611a:	f7fe f887 	bl	800422c <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d907      	bls.n	8006138 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e150      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
 800612c:	40023800 	.word	0x40023800
 8006130:	42470000 	.word	0x42470000
 8006134:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006138:	4b88      	ldr	r3, [pc, #544]	; (800635c <HAL_RCC_OscConfig+0x470>)
 800613a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1ea      	bne.n	800611a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 8097 	beq.w	8006280 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006152:	2300      	movs	r3, #0
 8006154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006156:	4b81      	ldr	r3, [pc, #516]	; (800635c <HAL_RCC_OscConfig+0x470>)
 8006158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10f      	bne.n	8006182 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006162:	2300      	movs	r3, #0
 8006164:	60bb      	str	r3, [r7, #8]
 8006166:	4b7d      	ldr	r3, [pc, #500]	; (800635c <HAL_RCC_OscConfig+0x470>)
 8006168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616a:	4a7c      	ldr	r2, [pc, #496]	; (800635c <HAL_RCC_OscConfig+0x470>)
 800616c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006170:	6413      	str	r3, [r2, #64]	; 0x40
 8006172:	4b7a      	ldr	r3, [pc, #488]	; (800635c <HAL_RCC_OscConfig+0x470>)
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617a:	60bb      	str	r3, [r7, #8]
 800617c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800617e:	2301      	movs	r3, #1
 8006180:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006182:	4b77      	ldr	r3, [pc, #476]	; (8006360 <HAL_RCC_OscConfig+0x474>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618a:	2b00      	cmp	r3, #0
 800618c:	d118      	bne.n	80061c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800618e:	4b74      	ldr	r3, [pc, #464]	; (8006360 <HAL_RCC_OscConfig+0x474>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a73      	ldr	r2, [pc, #460]	; (8006360 <HAL_RCC_OscConfig+0x474>)
 8006194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800619a:	f7fe f847 	bl	800422c <HAL_GetTick>
 800619e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a0:	e008      	b.n	80061b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061a2:	f7fe f843 	bl	800422c <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d901      	bls.n	80061b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e10c      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b4:	4b6a      	ldr	r3, [pc, #424]	; (8006360 <HAL_RCC_OscConfig+0x474>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d0f0      	beq.n	80061a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d106      	bne.n	80061d6 <HAL_RCC_OscConfig+0x2ea>
 80061c8:	4b64      	ldr	r3, [pc, #400]	; (800635c <HAL_RCC_OscConfig+0x470>)
 80061ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061cc:	4a63      	ldr	r2, [pc, #396]	; (800635c <HAL_RCC_OscConfig+0x470>)
 80061ce:	f043 0301 	orr.w	r3, r3, #1
 80061d2:	6713      	str	r3, [r2, #112]	; 0x70
 80061d4:	e01c      	b.n	8006210 <HAL_RCC_OscConfig+0x324>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b05      	cmp	r3, #5
 80061dc:	d10c      	bne.n	80061f8 <HAL_RCC_OscConfig+0x30c>
 80061de:	4b5f      	ldr	r3, [pc, #380]	; (800635c <HAL_RCC_OscConfig+0x470>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e2:	4a5e      	ldr	r2, [pc, #376]	; (800635c <HAL_RCC_OscConfig+0x470>)
 80061e4:	f043 0304 	orr.w	r3, r3, #4
 80061e8:	6713      	str	r3, [r2, #112]	; 0x70
 80061ea:	4b5c      	ldr	r3, [pc, #368]	; (800635c <HAL_RCC_OscConfig+0x470>)
 80061ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ee:	4a5b      	ldr	r2, [pc, #364]	; (800635c <HAL_RCC_OscConfig+0x470>)
 80061f0:	f043 0301 	orr.w	r3, r3, #1
 80061f4:	6713      	str	r3, [r2, #112]	; 0x70
 80061f6:	e00b      	b.n	8006210 <HAL_RCC_OscConfig+0x324>
 80061f8:	4b58      	ldr	r3, [pc, #352]	; (800635c <HAL_RCC_OscConfig+0x470>)
 80061fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fc:	4a57      	ldr	r2, [pc, #348]	; (800635c <HAL_RCC_OscConfig+0x470>)
 80061fe:	f023 0301 	bic.w	r3, r3, #1
 8006202:	6713      	str	r3, [r2, #112]	; 0x70
 8006204:	4b55      	ldr	r3, [pc, #340]	; (800635c <HAL_RCC_OscConfig+0x470>)
 8006206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006208:	4a54      	ldr	r2, [pc, #336]	; (800635c <HAL_RCC_OscConfig+0x470>)
 800620a:	f023 0304 	bic.w	r3, r3, #4
 800620e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d015      	beq.n	8006244 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006218:	f7fe f808 	bl	800422c <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800621e:	e00a      	b.n	8006236 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006220:	f7fe f804 	bl	800422c <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	f241 3288 	movw	r2, #5000	; 0x1388
 800622e:	4293      	cmp	r3, r2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e0cb      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006236:	4b49      	ldr	r3, [pc, #292]	; (800635c <HAL_RCC_OscConfig+0x470>)
 8006238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0ee      	beq.n	8006220 <HAL_RCC_OscConfig+0x334>
 8006242:	e014      	b.n	800626e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006244:	f7fd fff2 	bl	800422c <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800624a:	e00a      	b.n	8006262 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800624c:	f7fd ffee 	bl	800422c <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f241 3288 	movw	r2, #5000	; 0x1388
 800625a:	4293      	cmp	r3, r2
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e0b5      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006262:	4b3e      	ldr	r3, [pc, #248]	; (800635c <HAL_RCC_OscConfig+0x470>)
 8006264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1ee      	bne.n	800624c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800626e:	7dfb      	ldrb	r3, [r7, #23]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d105      	bne.n	8006280 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006274:	4b39      	ldr	r3, [pc, #228]	; (800635c <HAL_RCC_OscConfig+0x470>)
 8006276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006278:	4a38      	ldr	r2, [pc, #224]	; (800635c <HAL_RCC_OscConfig+0x470>)
 800627a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800627e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 80a1 	beq.w	80063cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800628a:	4b34      	ldr	r3, [pc, #208]	; (800635c <HAL_RCC_OscConfig+0x470>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 030c 	and.w	r3, r3, #12
 8006292:	2b08      	cmp	r3, #8
 8006294:	d05c      	beq.n	8006350 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	2b02      	cmp	r3, #2
 800629c:	d141      	bne.n	8006322 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800629e:	4b31      	ldr	r3, [pc, #196]	; (8006364 <HAL_RCC_OscConfig+0x478>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a4:	f7fd ffc2 	bl	800422c <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062ac:	f7fd ffbe 	bl	800422c <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e087      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062be:	4b27      	ldr	r3, [pc, #156]	; (800635c <HAL_RCC_OscConfig+0x470>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69da      	ldr	r2, [r3, #28]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	431a      	orrs	r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	019b      	lsls	r3, r3, #6
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e0:	085b      	lsrs	r3, r3, #1
 80062e2:	3b01      	subs	r3, #1
 80062e4:	041b      	lsls	r3, r3, #16
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	061b      	lsls	r3, r3, #24
 80062ee:	491b      	ldr	r1, [pc, #108]	; (800635c <HAL_RCC_OscConfig+0x470>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062f4:	4b1b      	ldr	r3, [pc, #108]	; (8006364 <HAL_RCC_OscConfig+0x478>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fa:	f7fd ff97 	bl	800422c <HAL_GetTick>
 80062fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006300:	e008      	b.n	8006314 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006302:	f7fd ff93 	bl	800422c <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e05c      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006314:	4b11      	ldr	r3, [pc, #68]	; (800635c <HAL_RCC_OscConfig+0x470>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0f0      	beq.n	8006302 <HAL_RCC_OscConfig+0x416>
 8006320:	e054      	b.n	80063cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006322:	4b10      	ldr	r3, [pc, #64]	; (8006364 <HAL_RCC_OscConfig+0x478>)
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006328:	f7fd ff80 	bl	800422c <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006330:	f7fd ff7c 	bl	800422c <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e045      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006342:	4b06      	ldr	r3, [pc, #24]	; (800635c <HAL_RCC_OscConfig+0x470>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f0      	bne.n	8006330 <HAL_RCC_OscConfig+0x444>
 800634e:	e03d      	b.n	80063cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d107      	bne.n	8006368 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e038      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
 800635c:	40023800 	.word	0x40023800
 8006360:	40007000 	.word	0x40007000
 8006364:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006368:	4b1b      	ldr	r3, [pc, #108]	; (80063d8 <HAL_RCC_OscConfig+0x4ec>)
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d028      	beq.n	80063c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006380:	429a      	cmp	r2, r3
 8006382:	d121      	bne.n	80063c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800638e:	429a      	cmp	r2, r3
 8006390:	d11a      	bne.n	80063c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006398:	4013      	ands	r3, r2
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800639e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d111      	bne.n	80063c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	085b      	lsrs	r3, r3, #1
 80063b0:	3b01      	subs	r3, #1
 80063b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d107      	bne.n	80063c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d001      	beq.n	80063cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e000      	b.n	80063ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	40023800 	.word	0x40023800

080063dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e0cc      	b.n	800658a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063f0:	4b68      	ldr	r3, [pc, #416]	; (8006594 <HAL_RCC_ClockConfig+0x1b8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d90c      	bls.n	8006418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063fe:	4b65      	ldr	r3, [pc, #404]	; (8006594 <HAL_RCC_ClockConfig+0x1b8>)
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006406:	4b63      	ldr	r3, [pc, #396]	; (8006594 <HAL_RCC_ClockConfig+0x1b8>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d001      	beq.n	8006418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e0b8      	b.n	800658a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d020      	beq.n	8006466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0304 	and.w	r3, r3, #4
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006430:	4b59      	ldr	r3, [pc, #356]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	4a58      	ldr	r2, [pc, #352]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 8006436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800643a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006448:	4b53      	ldr	r3, [pc, #332]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	4a52      	ldr	r2, [pc, #328]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006454:	4b50      	ldr	r3, [pc, #320]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	494d      	ldr	r1, [pc, #308]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 8006462:	4313      	orrs	r3, r2
 8006464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d044      	beq.n	80064fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2b01      	cmp	r3, #1
 8006478:	d107      	bne.n	800648a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800647a:	4b47      	ldr	r3, [pc, #284]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d119      	bne.n	80064ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e07f      	b.n	800658a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2b02      	cmp	r3, #2
 8006490:	d003      	beq.n	800649a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006496:	2b03      	cmp	r3, #3
 8006498:	d107      	bne.n	80064aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800649a:	4b3f      	ldr	r3, [pc, #252]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d109      	bne.n	80064ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e06f      	b.n	800658a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064aa:	4b3b      	ldr	r3, [pc, #236]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0302 	and.w	r3, r3, #2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e067      	b.n	800658a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064ba:	4b37      	ldr	r3, [pc, #220]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f023 0203 	bic.w	r2, r3, #3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	4934      	ldr	r1, [pc, #208]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064cc:	f7fd feae 	bl	800422c <HAL_GetTick>
 80064d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064d2:	e00a      	b.n	80064ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064d4:	f7fd feaa 	bl	800422c <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e04f      	b.n	800658a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ea:	4b2b      	ldr	r3, [pc, #172]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f003 020c 	and.w	r2, r3, #12
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d1eb      	bne.n	80064d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064fc:	4b25      	ldr	r3, [pc, #148]	; (8006594 <HAL_RCC_ClockConfig+0x1b8>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0307 	and.w	r3, r3, #7
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d20c      	bcs.n	8006524 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800650a:	4b22      	ldr	r3, [pc, #136]	; (8006594 <HAL_RCC_ClockConfig+0x1b8>)
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006512:	4b20      	ldr	r3, [pc, #128]	; (8006594 <HAL_RCC_ClockConfig+0x1b8>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d001      	beq.n	8006524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e032      	b.n	800658a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b00      	cmp	r3, #0
 800652e:	d008      	beq.n	8006542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006530:	4b19      	ldr	r3, [pc, #100]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	4916      	ldr	r1, [pc, #88]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 800653e:	4313      	orrs	r3, r2
 8006540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800654e:	4b12      	ldr	r3, [pc, #72]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	00db      	lsls	r3, r3, #3
 800655c:	490e      	ldr	r1, [pc, #56]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 800655e:	4313      	orrs	r3, r2
 8006560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006562:	f000 f821 	bl	80065a8 <HAL_RCC_GetSysClockFreq>
 8006566:	4602      	mov	r2, r0
 8006568:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <HAL_RCC_ClockConfig+0x1bc>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	091b      	lsrs	r3, r3, #4
 800656e:	f003 030f 	and.w	r3, r3, #15
 8006572:	490a      	ldr	r1, [pc, #40]	; (800659c <HAL_RCC_ClockConfig+0x1c0>)
 8006574:	5ccb      	ldrb	r3, [r1, r3]
 8006576:	fa22 f303 	lsr.w	r3, r2, r3
 800657a:	4a09      	ldr	r2, [pc, #36]	; (80065a0 <HAL_RCC_ClockConfig+0x1c4>)
 800657c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800657e:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f7fd fcb0 	bl	8003ee8 <HAL_InitTick>

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40023c00 	.word	0x40023c00
 8006598:	40023800 	.word	0x40023800
 800659c:	0800d350 	.word	0x0800d350
 80065a0:	20000004 	.word	0x20000004
 80065a4:	20000008 	.word	0x20000008

080065a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065ac:	b094      	sub	sp, #80	; 0x50
 80065ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	647b      	str	r3, [r7, #68]	; 0x44
 80065b4:	2300      	movs	r3, #0
 80065b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065b8:	2300      	movs	r3, #0
 80065ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065c0:	4b79      	ldr	r3, [pc, #484]	; (80067a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 030c 	and.w	r3, r3, #12
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	d00d      	beq.n	80065e8 <HAL_RCC_GetSysClockFreq+0x40>
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	f200 80e1 	bhi.w	8006794 <HAL_RCC_GetSysClockFreq+0x1ec>
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <HAL_RCC_GetSysClockFreq+0x34>
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d003      	beq.n	80065e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80065da:	e0db      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065dc:	4b73      	ldr	r3, [pc, #460]	; (80067ac <HAL_RCC_GetSysClockFreq+0x204>)
 80065de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80065e0:	e0db      	b.n	800679a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065e2:	4b73      	ldr	r3, [pc, #460]	; (80067b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80065e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065e6:	e0d8      	b.n	800679a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065e8:	4b6f      	ldr	r3, [pc, #444]	; (80067a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065f2:	4b6d      	ldr	r3, [pc, #436]	; (80067a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d063      	beq.n	80066c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065fe:	4b6a      	ldr	r3, [pc, #424]	; (80067a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	099b      	lsrs	r3, r3, #6
 8006604:	2200      	movs	r2, #0
 8006606:	63bb      	str	r3, [r7, #56]	; 0x38
 8006608:	63fa      	str	r2, [r7, #60]	; 0x3c
 800660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006610:	633b      	str	r3, [r7, #48]	; 0x30
 8006612:	2300      	movs	r3, #0
 8006614:	637b      	str	r3, [r7, #52]	; 0x34
 8006616:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800661a:	4622      	mov	r2, r4
 800661c:	462b      	mov	r3, r5
 800661e:	f04f 0000 	mov.w	r0, #0
 8006622:	f04f 0100 	mov.w	r1, #0
 8006626:	0159      	lsls	r1, r3, #5
 8006628:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800662c:	0150      	lsls	r0, r2, #5
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	4621      	mov	r1, r4
 8006634:	1a51      	subs	r1, r2, r1
 8006636:	6139      	str	r1, [r7, #16]
 8006638:	4629      	mov	r1, r5
 800663a:	eb63 0301 	sbc.w	r3, r3, r1
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800664c:	4659      	mov	r1, fp
 800664e:	018b      	lsls	r3, r1, #6
 8006650:	4651      	mov	r1, sl
 8006652:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006656:	4651      	mov	r1, sl
 8006658:	018a      	lsls	r2, r1, #6
 800665a:	4651      	mov	r1, sl
 800665c:	ebb2 0801 	subs.w	r8, r2, r1
 8006660:	4659      	mov	r1, fp
 8006662:	eb63 0901 	sbc.w	r9, r3, r1
 8006666:	f04f 0200 	mov.w	r2, #0
 800666a:	f04f 0300 	mov.w	r3, #0
 800666e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800667a:	4690      	mov	r8, r2
 800667c:	4699      	mov	r9, r3
 800667e:	4623      	mov	r3, r4
 8006680:	eb18 0303 	adds.w	r3, r8, r3
 8006684:	60bb      	str	r3, [r7, #8]
 8006686:	462b      	mov	r3, r5
 8006688:	eb49 0303 	adc.w	r3, r9, r3
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	f04f 0200 	mov.w	r2, #0
 8006692:	f04f 0300 	mov.w	r3, #0
 8006696:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800669a:	4629      	mov	r1, r5
 800669c:	024b      	lsls	r3, r1, #9
 800669e:	4621      	mov	r1, r4
 80066a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066a4:	4621      	mov	r1, r4
 80066a6:	024a      	lsls	r2, r1, #9
 80066a8:	4610      	mov	r0, r2
 80066aa:	4619      	mov	r1, r3
 80066ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ae:	2200      	movs	r2, #0
 80066b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066b8:	f7fa fa80 	bl	8000bbc <__aeabi_uldivmod>
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	4613      	mov	r3, r2
 80066c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066c4:	e058      	b.n	8006778 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066c6:	4b38      	ldr	r3, [pc, #224]	; (80067a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	099b      	lsrs	r3, r3, #6
 80066cc:	2200      	movs	r2, #0
 80066ce:	4618      	mov	r0, r3
 80066d0:	4611      	mov	r1, r2
 80066d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066d6:	623b      	str	r3, [r7, #32]
 80066d8:	2300      	movs	r3, #0
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
 80066dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066e0:	4642      	mov	r2, r8
 80066e2:	464b      	mov	r3, r9
 80066e4:	f04f 0000 	mov.w	r0, #0
 80066e8:	f04f 0100 	mov.w	r1, #0
 80066ec:	0159      	lsls	r1, r3, #5
 80066ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066f2:	0150      	lsls	r0, r2, #5
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4641      	mov	r1, r8
 80066fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80066fe:	4649      	mov	r1, r9
 8006700:	eb63 0b01 	sbc.w	fp, r3, r1
 8006704:	f04f 0200 	mov.w	r2, #0
 8006708:	f04f 0300 	mov.w	r3, #0
 800670c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006710:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006714:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006718:	ebb2 040a 	subs.w	r4, r2, sl
 800671c:	eb63 050b 	sbc.w	r5, r3, fp
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	00eb      	lsls	r3, r5, #3
 800672a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800672e:	00e2      	lsls	r2, r4, #3
 8006730:	4614      	mov	r4, r2
 8006732:	461d      	mov	r5, r3
 8006734:	4643      	mov	r3, r8
 8006736:	18e3      	adds	r3, r4, r3
 8006738:	603b      	str	r3, [r7, #0]
 800673a:	464b      	mov	r3, r9
 800673c:	eb45 0303 	adc.w	r3, r5, r3
 8006740:	607b      	str	r3, [r7, #4]
 8006742:	f04f 0200 	mov.w	r2, #0
 8006746:	f04f 0300 	mov.w	r3, #0
 800674a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800674e:	4629      	mov	r1, r5
 8006750:	028b      	lsls	r3, r1, #10
 8006752:	4621      	mov	r1, r4
 8006754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006758:	4621      	mov	r1, r4
 800675a:	028a      	lsls	r2, r1, #10
 800675c:	4610      	mov	r0, r2
 800675e:	4619      	mov	r1, r3
 8006760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006762:	2200      	movs	r2, #0
 8006764:	61bb      	str	r3, [r7, #24]
 8006766:	61fa      	str	r2, [r7, #28]
 8006768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800676c:	f7fa fa26 	bl	8000bbc <__aeabi_uldivmod>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	4613      	mov	r3, r2
 8006776:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006778:	4b0b      	ldr	r3, [pc, #44]	; (80067a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	0c1b      	lsrs	r3, r3, #16
 800677e:	f003 0303 	and.w	r3, r3, #3
 8006782:	3301      	adds	r3, #1
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006788:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800678a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800678c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006790:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006792:	e002      	b.n	800679a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006794:	4b05      	ldr	r3, [pc, #20]	; (80067ac <HAL_RCC_GetSysClockFreq+0x204>)
 8006796:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800679a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800679c:	4618      	mov	r0, r3
 800679e:	3750      	adds	r7, #80	; 0x50
 80067a0:	46bd      	mov	sp, r7
 80067a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067a6:	bf00      	nop
 80067a8:	40023800 	.word	0x40023800
 80067ac:	00f42400 	.word	0x00f42400
 80067b0:	007a1200 	.word	0x007a1200

080067b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067b8:	4b03      	ldr	r3, [pc, #12]	; (80067c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80067ba:	681b      	ldr	r3, [r3, #0]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	20000004 	.word	0x20000004

080067cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067d0:	f7ff fff0 	bl	80067b4 <HAL_RCC_GetHCLKFreq>
 80067d4:	4602      	mov	r2, r0
 80067d6:	4b05      	ldr	r3, [pc, #20]	; (80067ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	0a9b      	lsrs	r3, r3, #10
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	4903      	ldr	r1, [pc, #12]	; (80067f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067e2:	5ccb      	ldrb	r3, [r1, r3]
 80067e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	40023800 	.word	0x40023800
 80067f0:	0800d360 	.word	0x0800d360

080067f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067f8:	f7ff ffdc 	bl	80067b4 <HAL_RCC_GetHCLKFreq>
 80067fc:	4602      	mov	r2, r0
 80067fe:	4b05      	ldr	r3, [pc, #20]	; (8006814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	0b5b      	lsrs	r3, r3, #13
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	4903      	ldr	r1, [pc, #12]	; (8006818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800680a:	5ccb      	ldrb	r3, [r1, r3]
 800680c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006810:	4618      	mov	r0, r3
 8006812:	bd80      	pop	{r7, pc}
 8006814:	40023800 	.word	0x40023800
 8006818:	0800d360 	.word	0x0800d360

0800681c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	220f      	movs	r2, #15
 800682a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800682c:	4b12      	ldr	r3, [pc, #72]	; (8006878 <HAL_RCC_GetClockConfig+0x5c>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f003 0203 	and.w	r2, r3, #3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006838:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <HAL_RCC_GetClockConfig+0x5c>)
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006844:	4b0c      	ldr	r3, [pc, #48]	; (8006878 <HAL_RCC_GetClockConfig+0x5c>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006850:	4b09      	ldr	r3, [pc, #36]	; (8006878 <HAL_RCC_GetClockConfig+0x5c>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	08db      	lsrs	r3, r3, #3
 8006856:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800685e:	4b07      	ldr	r3, [pc, #28]	; (800687c <HAL_RCC_GetClockConfig+0x60>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0207 	and.w	r2, r3, #7
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	601a      	str	r2, [r3, #0]
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	40023800 	.word	0x40023800
 800687c:	40023c00 	.word	0x40023c00

08006880 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e07b      	b.n	800698a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	2b00      	cmp	r3, #0
 8006898:	d108      	bne.n	80068ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068a2:	d009      	beq.n	80068b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	61da      	str	r2, [r3, #28]
 80068aa:	e005      	b.n	80068b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d106      	bne.n	80068d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7fd fa74 	bl	8003dc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800690a:	431a      	orrs	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	431a      	orrs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006932:	431a      	orrs	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693c:	ea42 0103 	orr.w	r1, r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	0c1b      	lsrs	r3, r3, #16
 8006956:	f003 0104 	and.w	r1, r3, #4
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	f003 0210 	and.w	r2, r3, #16
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69da      	ldr	r2, [r3, #28]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006978:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b088      	sub	sp, #32
 8006996:	af00      	add	r7, sp, #0
 8006998:	60f8      	str	r0, [r7, #12]
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	603b      	str	r3, [r7, #0]
 800699e:	4613      	mov	r3, r2
 80069a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d101      	bne.n	80069b4 <HAL_SPI_Transmit+0x22>
 80069b0:	2302      	movs	r3, #2
 80069b2:	e126      	b.n	8006c02 <HAL_SPI_Transmit+0x270>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069bc:	f7fd fc36 	bl	800422c <HAL_GetTick>
 80069c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80069c2:	88fb      	ldrh	r3, [r7, #6]
 80069c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d002      	beq.n	80069d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80069d2:	2302      	movs	r3, #2
 80069d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069d6:	e10b      	b.n	8006bf0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <HAL_SPI_Transmit+0x52>
 80069de:	88fb      	ldrh	r3, [r7, #6]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d102      	bne.n	80069ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069e8:	e102      	b.n	8006bf0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2203      	movs	r2, #3
 80069ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	88fa      	ldrh	r2, [r7, #6]
 8006a02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	88fa      	ldrh	r2, [r7, #6]
 8006a08:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a30:	d10f      	bne.n	8006a52 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5c:	2b40      	cmp	r3, #64	; 0x40
 8006a5e:	d007      	beq.n	8006a70 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a78:	d14b      	bne.n	8006b12 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d002      	beq.n	8006a88 <HAL_SPI_Transmit+0xf6>
 8006a82:	8afb      	ldrh	r3, [r7, #22]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d13e      	bne.n	8006b06 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8c:	881a      	ldrh	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a98:	1c9a      	adds	r2, r3, #2
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006aac:	e02b      	b.n	8006b06 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d112      	bne.n	8006ae2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac0:	881a      	ldrh	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006acc:	1c9a      	adds	r2, r3, #2
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ae0:	e011      	b.n	8006b06 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ae2:	f7fd fba3 	bl	800422c <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d803      	bhi.n	8006afa <HAL_SPI_Transmit+0x168>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af8:	d102      	bne.n	8006b00 <HAL_SPI_Transmit+0x16e>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d102      	bne.n	8006b06 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b04:	e074      	b.n	8006bf0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1ce      	bne.n	8006aae <HAL_SPI_Transmit+0x11c>
 8006b10:	e04c      	b.n	8006bac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <HAL_SPI_Transmit+0x18e>
 8006b1a:	8afb      	ldrh	r3, [r7, #22]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d140      	bne.n	8006ba2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	330c      	adds	r3, #12
 8006b2a:	7812      	ldrb	r2, [r2, #0]
 8006b2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b46:	e02c      	b.n	8006ba2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d113      	bne.n	8006b7e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	330c      	adds	r3, #12
 8006b60:	7812      	ldrb	r2, [r2, #0]
 8006b62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	3b01      	subs	r3, #1
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b7c:	e011      	b.n	8006ba2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b7e:	f7fd fb55 	bl	800422c <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d803      	bhi.n	8006b96 <HAL_SPI_Transmit+0x204>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b94:	d102      	bne.n	8006b9c <HAL_SPI_Transmit+0x20a>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d102      	bne.n	8006ba2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ba0:	e026      	b.n	8006bf0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1cd      	bne.n	8006b48 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f8b3 	bl	8006d1c <SPI_EndRxTxTransaction>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d002      	beq.n	8006bc2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bca:	2300      	movs	r3, #0
 8006bcc:	613b      	str	r3, [r7, #16]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	613b      	str	r3, [r7, #16]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	613b      	str	r3, [r7, #16]
 8006bde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	77fb      	strb	r3, [r7, #31]
 8006bec:	e000      	b.n	8006bf0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006bee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c00:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3720      	adds	r7, #32
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
	...

08006c0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b088      	sub	sp, #32
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	603b      	str	r3, [r7, #0]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c1c:	f7fd fb06 	bl	800422c <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	1a9b      	subs	r3, r3, r2
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	4413      	add	r3, r2
 8006c2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c2c:	f7fd fafe 	bl	800422c <HAL_GetTick>
 8006c30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c32:	4b39      	ldr	r3, [pc, #228]	; (8006d18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	015b      	lsls	r3, r3, #5
 8006c38:	0d1b      	lsrs	r3, r3, #20
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	fb02 f303 	mul.w	r3, r2, r3
 8006c40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c42:	e054      	b.n	8006cee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4a:	d050      	beq.n	8006cee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c4c:	f7fd faee 	bl	800422c <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	69fa      	ldr	r2, [r7, #28]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d902      	bls.n	8006c62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d13d      	bne.n	8006cde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c7a:	d111      	bne.n	8006ca0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c84:	d004      	beq.n	8006c90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c8e:	d107      	bne.n	8006ca0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ca8:	d10f      	bne.n	8006cca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e017      	b.n	8006d0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	bf0c      	ite	eq
 8006cfe:	2301      	moveq	r3, #1
 8006d00:	2300      	movne	r3, #0
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	461a      	mov	r2, r3
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d19b      	bne.n	8006c44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3720      	adds	r7, #32
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20000004 	.word	0x20000004

08006d1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d28:	4b1b      	ldr	r3, [pc, #108]	; (8006d98 <SPI_EndRxTxTransaction+0x7c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a1b      	ldr	r2, [pc, #108]	; (8006d9c <SPI_EndRxTxTransaction+0x80>)
 8006d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d32:	0d5b      	lsrs	r3, r3, #21
 8006d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d38:	fb02 f303 	mul.w	r3, r2, r3
 8006d3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d46:	d112      	bne.n	8006d6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	2180      	movs	r1, #128	; 0x80
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f7ff ff5a 	bl	8006c0c <SPI_WaitFlagStateUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d016      	beq.n	8006d8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d62:	f043 0220 	orr.w	r2, r3, #32
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e00f      	b.n	8006d8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d84:	2b80      	cmp	r3, #128	; 0x80
 8006d86:	d0f2      	beq.n	8006d6e <SPI_EndRxTxTransaction+0x52>
 8006d88:	e000      	b.n	8006d8c <SPI_EndRxTxTransaction+0x70>
        break;
 8006d8a:	bf00      	nop
  }

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000004 	.word	0x20000004
 8006d9c:	165e9f81 	.word	0x165e9f81

08006da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e041      	b.n	8006e36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d106      	bne.n	8006dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f839 	bl	8006e3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	4619      	mov	r1, r3
 8006dde:	4610      	mov	r0, r2
 8006de0:	f000 f9ca 	bl	8007178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b083      	sub	sp, #12
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
	...

08006e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d001      	beq.n	8006e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e044      	b.n	8006ef6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a1e      	ldr	r2, [pc, #120]	; (8006f04 <HAL_TIM_Base_Start_IT+0xb0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d018      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e96:	d013      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a1a      	ldr	r2, [pc, #104]	; (8006f08 <HAL_TIM_Base_Start_IT+0xb4>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00e      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a19      	ldr	r2, [pc, #100]	; (8006f0c <HAL_TIM_Base_Start_IT+0xb8>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d009      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a17      	ldr	r2, [pc, #92]	; (8006f10 <HAL_TIM_Base_Start_IT+0xbc>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a16      	ldr	r2, [pc, #88]	; (8006f14 <HAL_TIM_Base_Start_IT+0xc0>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d111      	bne.n	8006ee4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 0307 	and.w	r3, r3, #7
 8006eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b06      	cmp	r3, #6
 8006ed0:	d010      	beq.n	8006ef4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0201 	orr.w	r2, r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ee2:	e007      	b.n	8006ef4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0201 	orr.w	r2, r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40010000 	.word	0x40010000
 8006f08:	40000400 	.word	0x40000400
 8006f0c:	40000800 	.word	0x40000800
 8006f10:	40000c00 	.word	0x40000c00
 8006f14:	40014000 	.word	0x40014000

08006f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d122      	bne.n	8006f74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d11b      	bne.n	8006f74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f06f 0202 	mvn.w	r2, #2
 8006f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	f003 0303 	and.w	r3, r3, #3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f8ee 	bl	800713c <HAL_TIM_IC_CaptureCallback>
 8006f60:	e005      	b.n	8006f6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f8e0 	bl	8007128 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f8f1 	bl	8007150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f003 0304 	and.w	r3, r3, #4
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d122      	bne.n	8006fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	d11b      	bne.n	8006fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f06f 0204 	mvn.w	r2, #4
 8006f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f8c4 	bl	800713c <HAL_TIM_IC_CaptureCallback>
 8006fb4:	e005      	b.n	8006fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f8b6 	bl	8007128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f8c7 	bl	8007150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f003 0308 	and.w	r3, r3, #8
 8006fd2:	2b08      	cmp	r3, #8
 8006fd4:	d122      	bne.n	800701c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f003 0308 	and.w	r3, r3, #8
 8006fe0:	2b08      	cmp	r3, #8
 8006fe2:	d11b      	bne.n	800701c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f06f 0208 	mvn.w	r2, #8
 8006fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2204      	movs	r2, #4
 8006ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	f003 0303 	and.w	r3, r3, #3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f89a 	bl	800713c <HAL_TIM_IC_CaptureCallback>
 8007008:	e005      	b.n	8007016 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f88c 	bl	8007128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f89d 	bl	8007150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f003 0310 	and.w	r3, r3, #16
 8007026:	2b10      	cmp	r3, #16
 8007028:	d122      	bne.n	8007070 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f003 0310 	and.w	r3, r3, #16
 8007034:	2b10      	cmp	r3, #16
 8007036:	d11b      	bne.n	8007070 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f06f 0210 	mvn.w	r2, #16
 8007040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2208      	movs	r2, #8
 8007046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f870 	bl	800713c <HAL_TIM_IC_CaptureCallback>
 800705c:	e005      	b.n	800706a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f862 	bl	8007128 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f873 	bl	8007150 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b01      	cmp	r3, #1
 800707c:	d10e      	bne.n	800709c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b01      	cmp	r3, #1
 800708a:	d107      	bne.n	800709c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f06f 0201 	mvn.w	r2, #1
 8007094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7fb f9e6 	bl	8002468 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a6:	2b80      	cmp	r3, #128	; 0x80
 80070a8:	d10e      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b4:	2b80      	cmp	r3, #128	; 0x80
 80070b6:	d107      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f8e2 	bl	800728c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d2:	2b40      	cmp	r3, #64	; 0x40
 80070d4:	d10e      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e0:	2b40      	cmp	r3, #64	; 0x40
 80070e2:	d107      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f838 	bl	8007164 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b20      	cmp	r3, #32
 8007100:	d10e      	bne.n	8007120 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f003 0320 	and.w	r3, r3, #32
 800710c:	2b20      	cmp	r3, #32
 800710e:	d107      	bne.n	8007120 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f06f 0220 	mvn.w	r2, #32
 8007118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f8ac 	bl	8007278 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007120:	bf00      	nop
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a34      	ldr	r2, [pc, #208]	; (800725c <TIM_Base_SetConfig+0xe4>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d00f      	beq.n	80071b0 <TIM_Base_SetConfig+0x38>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007196:	d00b      	beq.n	80071b0 <TIM_Base_SetConfig+0x38>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a31      	ldr	r2, [pc, #196]	; (8007260 <TIM_Base_SetConfig+0xe8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d007      	beq.n	80071b0 <TIM_Base_SetConfig+0x38>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a30      	ldr	r2, [pc, #192]	; (8007264 <TIM_Base_SetConfig+0xec>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d003      	beq.n	80071b0 <TIM_Base_SetConfig+0x38>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a2f      	ldr	r2, [pc, #188]	; (8007268 <TIM_Base_SetConfig+0xf0>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d108      	bne.n	80071c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a25      	ldr	r2, [pc, #148]	; (800725c <TIM_Base_SetConfig+0xe4>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d01b      	beq.n	8007202 <TIM_Base_SetConfig+0x8a>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d0:	d017      	beq.n	8007202 <TIM_Base_SetConfig+0x8a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a22      	ldr	r2, [pc, #136]	; (8007260 <TIM_Base_SetConfig+0xe8>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d013      	beq.n	8007202 <TIM_Base_SetConfig+0x8a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a21      	ldr	r2, [pc, #132]	; (8007264 <TIM_Base_SetConfig+0xec>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d00f      	beq.n	8007202 <TIM_Base_SetConfig+0x8a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a20      	ldr	r2, [pc, #128]	; (8007268 <TIM_Base_SetConfig+0xf0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00b      	beq.n	8007202 <TIM_Base_SetConfig+0x8a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a1f      	ldr	r2, [pc, #124]	; (800726c <TIM_Base_SetConfig+0xf4>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d007      	beq.n	8007202 <TIM_Base_SetConfig+0x8a>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a1e      	ldr	r2, [pc, #120]	; (8007270 <TIM_Base_SetConfig+0xf8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d003      	beq.n	8007202 <TIM_Base_SetConfig+0x8a>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <TIM_Base_SetConfig+0xfc>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d108      	bne.n	8007214 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a08      	ldr	r2, [pc, #32]	; (800725c <TIM_Base_SetConfig+0xe4>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d103      	bne.n	8007248 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	691a      	ldr	r2, [r3, #16]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	615a      	str	r2, [r3, #20]
}
 800724e:	bf00      	nop
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40010000 	.word	0x40010000
 8007260:	40000400 	.word	0x40000400
 8007264:	40000800 	.word	0x40000800
 8007268:	40000c00 	.word	0x40000c00
 800726c:	40014000 	.word	0x40014000
 8007270:	40014400 	.word	0x40014400
 8007274:	40014800 	.word	0x40014800

08007278 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e03f      	b.n	8007332 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d106      	bne.n	80072cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fc fed6 	bl	8004078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2224      	movs	r2, #36	; 0x24
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68da      	ldr	r2, [r3, #12]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 ff9b 	bl	8008220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	691a      	ldr	r2, [r3, #16]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695a      	ldr	r2, [r3, #20]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007308:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007318:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2220      	movs	r2, #32
 8007324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2220      	movs	r2, #32
 800732c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b08a      	sub	sp, #40	; 0x28
 800733e:	af02      	add	r7, sp, #8
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	603b      	str	r3, [r7, #0]
 8007346:	4613      	mov	r3, r2
 8007348:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b20      	cmp	r3, #32
 8007358:	d17c      	bne.n	8007454 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_UART_Transmit+0x2c>
 8007360:	88fb      	ldrh	r3, [r7, #6]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e075      	b.n	8007456 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007370:	2b01      	cmp	r3, #1
 8007372:	d101      	bne.n	8007378 <HAL_UART_Transmit+0x3e>
 8007374:	2302      	movs	r3, #2
 8007376:	e06e      	b.n	8007456 <HAL_UART_Transmit+0x11c>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2221      	movs	r2, #33	; 0x21
 800738a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800738e:	f7fc ff4d 	bl	800422c <HAL_GetTick>
 8007392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	88fa      	ldrh	r2, [r7, #6]
 8007398:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	88fa      	ldrh	r2, [r7, #6]
 800739e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a8:	d108      	bne.n	80073bc <HAL_UART_Transmit+0x82>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d104      	bne.n	80073bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	61bb      	str	r3, [r7, #24]
 80073ba:	e003      	b.n	80073c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073c0:	2300      	movs	r3, #0
 80073c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80073cc:	e02a      	b.n	8007424 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2200      	movs	r2, #0
 80073d6:	2180      	movs	r1, #128	; 0x80
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 fc53 	bl	8007c84 <UART_WaitOnFlagUntilTimeout>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e036      	b.n	8007456 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10b      	bne.n	8007406 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	881b      	ldrh	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	3302      	adds	r3, #2
 8007402:	61bb      	str	r3, [r7, #24]
 8007404:	e007      	b.n	8007416 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	781a      	ldrb	r2, [r3, #0]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	3301      	adds	r3, #1
 8007414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800741a:	b29b      	uxth	r3, r3
 800741c:	3b01      	subs	r3, #1
 800741e:	b29a      	uxth	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007428:	b29b      	uxth	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1cf      	bne.n	80073ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2200      	movs	r2, #0
 8007436:	2140      	movs	r1, #64	; 0x40
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f000 fc23 	bl	8007c84 <UART_WaitOnFlagUntilTimeout>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e006      	b.n	8007456 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	e000      	b.n	8007456 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007454:	2302      	movs	r3, #2
  }
}
 8007456:	4618      	mov	r0, r3
 8007458:	3720      	adds	r7, #32
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b08c      	sub	sp, #48	; 0x30
 8007462:	af00      	add	r7, sp, #0
 8007464:	60f8      	str	r0, [r7, #12]
 8007466:	60b9      	str	r1, [r7, #8]
 8007468:	4613      	mov	r3, r2
 800746a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b20      	cmp	r3, #32
 8007476:	d152      	bne.n	800751e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d002      	beq.n	8007484 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800747e:	88fb      	ldrh	r3, [r7, #6]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e04b      	b.n	8007520 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800748e:	2b01      	cmp	r3, #1
 8007490:	d101      	bne.n	8007496 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8007492:	2302      	movs	r3, #2
 8007494:	e044      	b.n	8007520 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2201      	movs	r2, #1
 80074a2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	461a      	mov	r2, r3
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f000 fc58 	bl	8007d60 <UART_Start_Receive_DMA>
 80074b0:	4603      	mov	r3, r0
 80074b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80074b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d12c      	bne.n	8007518 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d125      	bne.n	8007512 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074c6:	2300      	movs	r3, #0
 80074c8:	613b      	str	r3, [r7, #16]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	613b      	str	r3, [r7, #16]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	613b      	str	r3, [r7, #16]
 80074da:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	330c      	adds	r3, #12
 80074e2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	e853 3f00 	ldrex	r3, [r3]
 80074ea:	617b      	str	r3, [r7, #20]
   return(result);
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f043 0310 	orr.w	r3, r3, #16
 80074f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	330c      	adds	r3, #12
 80074fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074fc:	627a      	str	r2, [r7, #36]	; 0x24
 80074fe:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	6a39      	ldr	r1, [r7, #32]
 8007502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007504:	e841 2300 	strex	r3, r2, [r1]
 8007508:	61fb      	str	r3, [r7, #28]
   return(result);
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1e5      	bne.n	80074dc <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8007510:	e002      	b.n	8007518 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8007518:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800751c:	e000      	b.n	8007520 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800751e:	2302      	movs	r3, #2
  }
}
 8007520:	4618      	mov	r0, r3
 8007522:	3730      	adds	r7, #48	; 0x30
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b0ba      	sub	sp, #232	; 0xe8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800754e:	2300      	movs	r3, #0
 8007550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007554:	2300      	movs	r3, #0
 8007556:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800755a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800755e:	f003 030f 	and.w	r3, r3, #15
 8007562:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10f      	bne.n	800758e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800756e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007572:	f003 0320 	and.w	r3, r3, #32
 8007576:	2b00      	cmp	r3, #0
 8007578:	d009      	beq.n	800758e <HAL_UART_IRQHandler+0x66>
 800757a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800757e:	f003 0320 	and.w	r3, r3, #32
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fd8f 	bl	80080aa <UART_Receive_IT>
      return;
 800758c:	e256      	b.n	8007a3c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800758e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 80de 	beq.w	8007754 <HAL_UART_IRQHandler+0x22c>
 8007598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800759c:	f003 0301 	and.w	r3, r3, #1
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d106      	bne.n	80075b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80075a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 80d1 	beq.w	8007754 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80075b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00b      	beq.n	80075d6 <HAL_UART_IRQHandler+0xae>
 80075be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f043 0201 	orr.w	r2, r3, #1
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075da:	f003 0304 	and.w	r3, r3, #4
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00b      	beq.n	80075fa <HAL_UART_IRQHandler+0xd2>
 80075e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d005      	beq.n	80075fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	f043 0202 	orr.w	r2, r3, #2
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80075fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00b      	beq.n	800761e <HAL_UART_IRQHandler+0xf6>
 8007606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d005      	beq.n	800761e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007616:	f043 0204 	orr.w	r2, r3, #4
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800761e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007622:	f003 0308 	and.w	r3, r3, #8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d011      	beq.n	800764e <HAL_UART_IRQHandler+0x126>
 800762a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d105      	bne.n	8007642 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	d005      	beq.n	800764e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	f043 0208 	orr.w	r2, r3, #8
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 81ed 	beq.w	8007a32 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800765c:	f003 0320 	and.w	r3, r3, #32
 8007660:	2b00      	cmp	r3, #0
 8007662:	d008      	beq.n	8007676 <HAL_UART_IRQHandler+0x14e>
 8007664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007668:	f003 0320 	and.w	r3, r3, #32
 800766c:	2b00      	cmp	r3, #0
 800766e:	d002      	beq.n	8007676 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fd1a 	bl	80080aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007680:	2b40      	cmp	r3, #64	; 0x40
 8007682:	bf0c      	ite	eq
 8007684:	2301      	moveq	r3, #1
 8007686:	2300      	movne	r3, #0
 8007688:	b2db      	uxtb	r3, r3
 800768a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	f003 0308 	and.w	r3, r3, #8
 8007696:	2b00      	cmp	r3, #0
 8007698:	d103      	bne.n	80076a2 <HAL_UART_IRQHandler+0x17a>
 800769a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d04f      	beq.n	8007742 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fc22 	bl	8007eec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b2:	2b40      	cmp	r3, #64	; 0x40
 80076b4:	d141      	bne.n	800773a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3314      	adds	r3, #20
 80076bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076c4:	e853 3f00 	ldrex	r3, [r3]
 80076c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3314      	adds	r3, #20
 80076de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80076fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1d9      	bne.n	80076b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007706:	2b00      	cmp	r3, #0
 8007708:	d013      	beq.n	8007732 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770e:	4a7d      	ldr	r2, [pc, #500]	; (8007904 <HAL_UART_IRQHandler+0x3dc>)
 8007710:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007716:	4618      	mov	r0, r3
 8007718:	f7fd f810 	bl	800473c <HAL_DMA_Abort_IT>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d016      	beq.n	8007750 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800772c:	4610      	mov	r0, r2
 800772e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007730:	e00e      	b.n	8007750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f9a4 	bl	8007a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007738:	e00a      	b.n	8007750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f9a0 	bl	8007a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007740:	e006      	b.n	8007750 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f99c 	bl	8007a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800774e:	e170      	b.n	8007a32 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007750:	bf00      	nop
    return;
 8007752:	e16e      	b.n	8007a32 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007758:	2b01      	cmp	r3, #1
 800775a:	f040 814a 	bne.w	80079f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800775e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007762:	f003 0310 	and.w	r3, r3, #16
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 8143 	beq.w	80079f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800776c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007770:	f003 0310 	and.w	r3, r3, #16
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 813c 	beq.w	80079f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800777a:	2300      	movs	r3, #0
 800777c:	60bb      	str	r3, [r7, #8]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	60bb      	str	r3, [r7, #8]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	60bb      	str	r3, [r7, #8]
 800778e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779a:	2b40      	cmp	r3, #64	; 0x40
 800779c:	f040 80b4 	bne.w	8007908 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 8140 	beq.w	8007a36 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80077ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077be:	429a      	cmp	r2, r3
 80077c0:	f080 8139 	bcs.w	8007a36 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077d6:	f000 8088 	beq.w	80078ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	330c      	adds	r3, #12
 80077e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80077f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80077f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	330c      	adds	r3, #12
 8007802:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007806:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800780a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007812:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007816:	e841 2300 	strex	r3, r2, [r1]
 800781a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800781e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1d9      	bne.n	80077da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3314      	adds	r3, #20
 800782c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007830:	e853 3f00 	ldrex	r3, [r3]
 8007834:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007838:	f023 0301 	bic.w	r3, r3, #1
 800783c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3314      	adds	r3, #20
 8007846:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800784a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800784e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007852:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800785c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e1      	bne.n	8007826 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3314      	adds	r3, #20
 8007868:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800786c:	e853 3f00 	ldrex	r3, [r3]
 8007870:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3314      	adds	r3, #20
 8007882:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007886:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007888:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800788c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e3      	bne.n	8007862 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	330c      	adds	r3, #12
 80078ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078ba:	f023 0310 	bic.w	r3, r3, #16
 80078be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	330c      	adds	r3, #12
 80078c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80078cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80078ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078d4:	e841 2300 	strex	r3, r2, [r1]
 80078d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1e3      	bne.n	80078a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7fc feb9 	bl	800465c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	4619      	mov	r1, r3
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7fa fbce 	bl	800209c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007900:	e099      	b.n	8007a36 <HAL_UART_IRQHandler+0x50e>
 8007902:	bf00      	nop
 8007904:	08007fb3 	.word	0x08007fb3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007910:	b29b      	uxth	r3, r3
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800791c:	b29b      	uxth	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 808b 	beq.w	8007a3a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 8086 	beq.w	8007a3a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	330c      	adds	r3, #12
 8007934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007938:	e853 3f00 	ldrex	r3, [r3]
 800793c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800793e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007944:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	330c      	adds	r3, #12
 800794e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007952:	647a      	str	r2, [r7, #68]	; 0x44
 8007954:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e3      	bne.n	800792e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3314      	adds	r3, #20
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	623b      	str	r3, [r7, #32]
   return(result);
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	f023 0301 	bic.w	r3, r3, #1
 800797c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3314      	adds	r3, #20
 8007986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800798a:	633a      	str	r2, [r7, #48]	; 0x30
 800798c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e3      	bne.n	8007966 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	330c      	adds	r3, #12
 80079b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 0310 	bic.w	r3, r3, #16
 80079c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	330c      	adds	r3, #12
 80079cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80079d0:	61fa      	str	r2, [r7, #28]
 80079d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d4:	69b9      	ldr	r1, [r7, #24]
 80079d6:	69fa      	ldr	r2, [r7, #28]
 80079d8:	e841 2300 	strex	r3, r2, [r1]
 80079dc:	617b      	str	r3, [r7, #20]
   return(result);
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d1e3      	bne.n	80079ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7fa fb56 	bl	800209c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079f0:	e023      	b.n	8007a3a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80079f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d009      	beq.n	8007a12 <HAL_UART_IRQHandler+0x4ea>
 80079fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fae5 	bl	8007fda <UART_Transmit_IT>
    return;
 8007a10:	e014      	b.n	8007a3c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00e      	beq.n	8007a3c <HAL_UART_IRQHandler+0x514>
 8007a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d008      	beq.n	8007a3c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fb25 	bl	800807a <UART_EndTransmit_IT>
    return;
 8007a30:	e004      	b.n	8007a3c <HAL_UART_IRQHandler+0x514>
    return;
 8007a32:	bf00      	nop
 8007a34:	e002      	b.n	8007a3c <HAL_UART_IRQHandler+0x514>
      return;
 8007a36:	bf00      	nop
 8007a38:	e000      	b.n	8007a3c <HAL_UART_IRQHandler+0x514>
      return;
 8007a3a:	bf00      	nop
  }
}
 8007a3c:	37e8      	adds	r7, #232	; 0xe8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop

08007a44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b09c      	sub	sp, #112	; 0x70
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d172      	bne.n	8007b96 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	330c      	adds	r3, #12
 8007abc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007acc:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	330c      	adds	r3, #12
 8007ad4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ad6:	65ba      	str	r2, [r7, #88]	; 0x58
 8007ad8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007adc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ade:	e841 2300 	strex	r3, r2, [r1]
 8007ae2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1e5      	bne.n	8007ab6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3314      	adds	r3, #20
 8007af0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af4:	e853 3f00 	ldrex	r3, [r3]
 8007af8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afc:	f023 0301 	bic.w	r3, r3, #1
 8007b00:	667b      	str	r3, [r7, #100]	; 0x64
 8007b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3314      	adds	r3, #20
 8007b08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b0a:	647a      	str	r2, [r7, #68]	; 0x44
 8007b0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e5      	bne.n	8007aea <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3314      	adds	r3, #20
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b34:	663b      	str	r3, [r7, #96]	; 0x60
 8007b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3314      	adds	r3, #20
 8007b3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b3e:	633a      	str	r2, [r7, #48]	; 0x30
 8007b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e5      	bne.n	8007b1e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b54:	2220      	movs	r2, #32
 8007b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d119      	bne.n	8007b96 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	330c      	adds	r3, #12
 8007b68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f023 0310 	bic.w	r3, r3, #16
 8007b78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	330c      	adds	r3, #12
 8007b80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b82:	61fa      	str	r2, [r7, #28]
 8007b84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	69b9      	ldr	r1, [r7, #24]
 8007b88:	69fa      	ldr	r2, [r7, #28]
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	617b      	str	r3, [r7, #20]
   return(result);
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e5      	bne.n	8007b62 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d106      	bne.n	8007bac <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007ba6:	f7fa fa79 	bl	800209c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007baa:	e002      	b.n	8007bb2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007bac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007bae:	f7ff ff53 	bl	8007a58 <HAL_UART_RxCpltCallback>
}
 8007bb2:	bf00      	nop
 8007bb4:	3770      	adds	r7, #112	; 0x70
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d108      	bne.n	8007be2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bd4:	085b      	lsrs	r3, r3, #1
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	4619      	mov	r1, r3
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f7fa fa5e 	bl	800209c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007be0:	e002      	b.n	8007be8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f7ff ff42 	bl	8007a6c <HAL_UART_RxHalfCpltCallback>
}
 8007be8:	bf00      	nop
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c00:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	695b      	ldr	r3, [r3, #20]
 8007c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0c:	2b80      	cmp	r3, #128	; 0x80
 8007c0e:	bf0c      	ite	eq
 8007c10:	2301      	moveq	r3, #1
 8007c12:	2300      	movne	r3, #0
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b21      	cmp	r3, #33	; 0x21
 8007c22:	d108      	bne.n	8007c36 <UART_DMAError+0x46>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d005      	beq.n	8007c36 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007c30:	68b8      	ldr	r0, [r7, #8]
 8007c32:	f000 f933 	bl	8007e9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c40:	2b40      	cmp	r3, #64	; 0x40
 8007c42:	bf0c      	ite	eq
 8007c44:	2301      	moveq	r3, #1
 8007c46:	2300      	movne	r3, #0
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b22      	cmp	r3, #34	; 0x22
 8007c56:	d108      	bne.n	8007c6a <UART_DMAError+0x7a>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d005      	beq.n	8007c6a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2200      	movs	r2, #0
 8007c62:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007c64:	68b8      	ldr	r0, [r7, #8]
 8007c66:	f000 f941 	bl	8007eec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	f043 0210 	orr.w	r2, r3, #16
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c76:	68b8      	ldr	r0, [r7, #8]
 8007c78:	f7ff ff02 	bl	8007a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c7c:	bf00      	nop
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b090      	sub	sp, #64	; 0x40
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	603b      	str	r3, [r7, #0]
 8007c90:	4613      	mov	r3, r2
 8007c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c94:	e050      	b.n	8007d38 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9c:	d04c      	beq.n	8007d38 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d007      	beq.n	8007cb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ca4:	f7fc fac2 	bl	800422c <HAL_GetTick>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d241      	bcs.n	8007d38 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	330c      	adds	r3, #12
 8007cba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	e853 3f00 	ldrex	r3, [r3]
 8007cc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	330c      	adds	r3, #12
 8007cd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007cd4:	637a      	str	r2, [r7, #52]	; 0x34
 8007cd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cdc:	e841 2300 	strex	r3, r2, [r1]
 8007ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e5      	bne.n	8007cb4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	3314      	adds	r3, #20
 8007cee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	f023 0301 	bic.w	r3, r3, #1
 8007cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3314      	adds	r3, #20
 8007d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d08:	623a      	str	r2, [r7, #32]
 8007d0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	69f9      	ldr	r1, [r7, #28]
 8007d0e:	6a3a      	ldr	r2, [r7, #32]
 8007d10:	e841 2300 	strex	r3, r2, [r1]
 8007d14:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e5      	bne.n	8007ce8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2220      	movs	r2, #32
 8007d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e00f      	b.n	8007d58 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	4013      	ands	r3, r2
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	bf0c      	ite	eq
 8007d48:	2301      	moveq	r3, #1
 8007d4a:	2300      	movne	r3, #0
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	461a      	mov	r2, r3
 8007d50:	79fb      	ldrb	r3, [r7, #7]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d09f      	beq.n	8007c96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3740      	adds	r7, #64	; 0x40
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b098      	sub	sp, #96	; 0x60
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	88fa      	ldrh	r2, [r7, #6]
 8007d78:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2222      	movs	r2, #34	; 0x22
 8007d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8c:	4a40      	ldr	r2, [pc, #256]	; (8007e90 <UART_Start_Receive_DMA+0x130>)
 8007d8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d94:	4a3f      	ldr	r2, [pc, #252]	; (8007e94 <UART_Start_Receive_DMA+0x134>)
 8007d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9c:	4a3e      	ldr	r2, [pc, #248]	; (8007e98 <UART_Start_Receive_DMA+0x138>)
 8007d9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da4:	2200      	movs	r2, #0
 8007da6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007da8:	f107 0308 	add.w	r3, r7, #8
 8007dac:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3304      	adds	r3, #4
 8007db8:	4619      	mov	r1, r3
 8007dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	88fb      	ldrh	r3, [r7, #6]
 8007dc0:	f7fc fbf4 	bl	80045ac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	613b      	str	r3, [r7, #16]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	613b      	str	r3, [r7, #16]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	613b      	str	r3, [r7, #16]
 8007dd8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d019      	beq.n	8007e1e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	330c      	adds	r3, #12
 8007df0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df4:	e853 3f00 	ldrex	r3, [r3]
 8007df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e00:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	330c      	adds	r3, #12
 8007e08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e0a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007e0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007e10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e12:	e841 2300 	strex	r3, r2, [r1]
 8007e16:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1e5      	bne.n	8007dea <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3314      	adds	r3, #20
 8007e24:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	f043 0301 	orr.w	r3, r3, #1
 8007e34:	657b      	str	r3, [r7, #84]	; 0x54
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	3314      	adds	r3, #20
 8007e3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e3e:	63ba      	str	r2, [r7, #56]	; 0x38
 8007e40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e5      	bne.n	8007e1e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3314      	adds	r3, #20
 8007e58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	e853 3f00 	ldrex	r3, [r3]
 8007e60:	617b      	str	r3, [r7, #20]
   return(result);
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e68:	653b      	str	r3, [r7, #80]	; 0x50
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3314      	adds	r3, #20
 8007e70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e72:	627a      	str	r2, [r7, #36]	; 0x24
 8007e74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e76:	6a39      	ldr	r1, [r7, #32]
 8007e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7a:	e841 2300 	strex	r3, r2, [r1]
 8007e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1e5      	bne.n	8007e52 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3760      	adds	r7, #96	; 0x60
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	08007a95 	.word	0x08007a95
 8007e94:	08007bbb 	.word	0x08007bbb
 8007e98:	08007bf1 	.word	0x08007bf1

08007e9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b089      	sub	sp, #36	; 0x24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	330c      	adds	r3, #12
 8007eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	e853 3f00 	ldrex	r3, [r3]
 8007eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007eba:	61fb      	str	r3, [r7, #28]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	330c      	adds	r3, #12
 8007ec2:	69fa      	ldr	r2, [r7, #28]
 8007ec4:	61ba      	str	r2, [r7, #24]
 8007ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	6979      	ldr	r1, [r7, #20]
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	e841 2300 	strex	r3, r2, [r1]
 8007ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e5      	bne.n	8007ea4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2220      	movs	r2, #32
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007ee0:	bf00      	nop
 8007ee2:	3724      	adds	r7, #36	; 0x24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b095      	sub	sp, #84	; 0x54
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	330c      	adds	r3, #12
 8007efa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007efe:	e853 3f00 	ldrex	r3, [r3]
 8007f02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	330c      	adds	r3, #12
 8007f12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f14:	643a      	str	r2, [r7, #64]	; 0x40
 8007f16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e5      	bne.n	8007ef4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3314      	adds	r3, #20
 8007f2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	e853 3f00 	ldrex	r3, [r3]
 8007f36:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	f023 0301 	bic.w	r3, r3, #1
 8007f3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3314      	adds	r3, #20
 8007f46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f50:	e841 2300 	strex	r3, r2, [r1]
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e5      	bne.n	8007f28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d119      	bne.n	8007f98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	330c      	adds	r3, #12
 8007f6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f023 0310 	bic.w	r3, r3, #16
 8007f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	330c      	adds	r3, #12
 8007f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f84:	61ba      	str	r2, [r7, #24]
 8007f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f88:	6979      	ldr	r1, [r7, #20]
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	e841 2300 	strex	r3, r2, [r1]
 8007f90:	613b      	str	r3, [r7, #16]
   return(result);
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e5      	bne.n	8007f64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007fa6:	bf00      	nop
 8007fa8:	3754      	adds	r7, #84	; 0x54
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff fd57 	bl	8007a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fd2:	bf00      	nop
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b085      	sub	sp, #20
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b21      	cmp	r3, #33	; 0x21
 8007fec:	d13e      	bne.n	800806c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ff6:	d114      	bne.n	8008022 <UART_Transmit_IT+0x48>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d110      	bne.n	8008022 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a1b      	ldr	r3, [r3, #32]
 8008004:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008014:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	1c9a      	adds	r2, r3, #2
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	621a      	str	r2, [r3, #32]
 8008020:	e008      	b.n	8008034 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	1c59      	adds	r1, r3, #1
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	6211      	str	r1, [r2, #32]
 800802c:	781a      	ldrb	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008038:	b29b      	uxth	r3, r3
 800803a:	3b01      	subs	r3, #1
 800803c:	b29b      	uxth	r3, r3
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	4619      	mov	r1, r3
 8008042:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10f      	bne.n	8008068 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68da      	ldr	r2, [r3, #12]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008056:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68da      	ldr	r2, [r3, #12]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008066:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	e000      	b.n	800806e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800806c:	2302      	movs	r3, #2
  }
}
 800806e:	4618      	mov	r0, r3
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b082      	sub	sp, #8
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68da      	ldr	r2, [r3, #12]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008090:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2220      	movs	r2, #32
 8008096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7ff fcd2 	bl	8007a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b08c      	sub	sp, #48	; 0x30
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b22      	cmp	r3, #34	; 0x22
 80080bc:	f040 80ab 	bne.w	8008216 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080c8:	d117      	bne.n	80080fa <UART_Receive_IT+0x50>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d113      	bne.n	80080fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f2:	1c9a      	adds	r2, r3, #2
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	629a      	str	r2, [r3, #40]	; 0x28
 80080f8:	e026      	b.n	8008148 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008100:	2300      	movs	r3, #0
 8008102:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800810c:	d007      	beq.n	800811e <UART_Receive_IT+0x74>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10a      	bne.n	800812c <UART_Receive_IT+0x82>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d106      	bne.n	800812c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	b2da      	uxtb	r2, r3
 8008126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008128:	701a      	strb	r2, [r3, #0]
 800812a:	e008      	b.n	800813e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008138:	b2da      	uxtb	r2, r3
 800813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008142:	1c5a      	adds	r2, r3, #1
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800814c:	b29b      	uxth	r3, r3
 800814e:	3b01      	subs	r3, #1
 8008150:	b29b      	uxth	r3, r3
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	4619      	mov	r1, r3
 8008156:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008158:	2b00      	cmp	r3, #0
 800815a:	d15a      	bne.n	8008212 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 0220 	bic.w	r2, r2, #32
 800816a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800817a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	695a      	ldr	r2, [r3, #20]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 0201 	bic.w	r2, r2, #1
 800818a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2220      	movs	r2, #32
 8008190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008198:	2b01      	cmp	r3, #1
 800819a:	d135      	bne.n	8008208 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	330c      	adds	r3, #12
 80081a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	e853 3f00 	ldrex	r3, [r3]
 80081b0:	613b      	str	r3, [r7, #16]
   return(result);
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	f023 0310 	bic.w	r3, r3, #16
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	330c      	adds	r3, #12
 80081c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081c2:	623a      	str	r2, [r7, #32]
 80081c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	69f9      	ldr	r1, [r7, #28]
 80081c8:	6a3a      	ldr	r2, [r7, #32]
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e5      	bne.n	80081a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0310 	and.w	r3, r3, #16
 80081e0:	2b10      	cmp	r3, #16
 80081e2:	d10a      	bne.n	80081fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081e4:	2300      	movs	r3, #0
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f7f9 ff4b 	bl	800209c <HAL_UARTEx_RxEventCallback>
 8008206:	e002      	b.n	800820e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f7ff fc25 	bl	8007a58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	e002      	b.n	8008218 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008212:	2300      	movs	r3, #0
 8008214:	e000      	b.n	8008218 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008216:	2302      	movs	r3, #2
  }
}
 8008218:	4618      	mov	r0, r3
 800821a:	3730      	adds	r7, #48	; 0x30
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008224:	b0c0      	sub	sp, #256	; 0x100
 8008226:	af00      	add	r7, sp, #0
 8008228:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800822c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800823c:	68d9      	ldr	r1, [r3, #12]
 800823e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	ea40 0301 	orr.w	r3, r0, r1
 8008248:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800824a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800824e:	689a      	ldr	r2, [r3, #8]
 8008250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	431a      	orrs	r2, r3
 8008258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	431a      	orrs	r2, r3
 8008260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	4313      	orrs	r3, r2
 8008268:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800826c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008278:	f021 010c 	bic.w	r1, r1, #12
 800827c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008286:	430b      	orrs	r3, r1
 8008288:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800828a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800829a:	6999      	ldr	r1, [r3, #24]
 800829c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	ea40 0301 	orr.w	r3, r0, r1
 80082a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	4b8f      	ldr	r3, [pc, #572]	; (80084ec <UART_SetConfig+0x2cc>)
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d005      	beq.n	80082c0 <UART_SetConfig+0xa0>
 80082b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	4b8d      	ldr	r3, [pc, #564]	; (80084f0 <UART_SetConfig+0x2d0>)
 80082bc:	429a      	cmp	r2, r3
 80082be:	d104      	bne.n	80082ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082c0:	f7fe fa98 	bl	80067f4 <HAL_RCC_GetPCLK2Freq>
 80082c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80082c8:	e003      	b.n	80082d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082ca:	f7fe fa7f 	bl	80067cc <HAL_RCC_GetPCLK1Freq>
 80082ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082dc:	f040 810c 	bne.w	80084f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082e4:	2200      	movs	r2, #0
 80082e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80082ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80082ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80082f2:	4622      	mov	r2, r4
 80082f4:	462b      	mov	r3, r5
 80082f6:	1891      	adds	r1, r2, r2
 80082f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80082fa:	415b      	adcs	r3, r3
 80082fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008302:	4621      	mov	r1, r4
 8008304:	eb12 0801 	adds.w	r8, r2, r1
 8008308:	4629      	mov	r1, r5
 800830a:	eb43 0901 	adc.w	r9, r3, r1
 800830e:	f04f 0200 	mov.w	r2, #0
 8008312:	f04f 0300 	mov.w	r3, #0
 8008316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800831a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800831e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008322:	4690      	mov	r8, r2
 8008324:	4699      	mov	r9, r3
 8008326:	4623      	mov	r3, r4
 8008328:	eb18 0303 	adds.w	r3, r8, r3
 800832c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008330:	462b      	mov	r3, r5
 8008332:	eb49 0303 	adc.w	r3, r9, r3
 8008336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800833a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008346:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800834a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800834e:	460b      	mov	r3, r1
 8008350:	18db      	adds	r3, r3, r3
 8008352:	653b      	str	r3, [r7, #80]	; 0x50
 8008354:	4613      	mov	r3, r2
 8008356:	eb42 0303 	adc.w	r3, r2, r3
 800835a:	657b      	str	r3, [r7, #84]	; 0x54
 800835c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008360:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008364:	f7f8 fc2a 	bl	8000bbc <__aeabi_uldivmod>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	4b61      	ldr	r3, [pc, #388]	; (80084f4 <UART_SetConfig+0x2d4>)
 800836e:	fba3 2302 	umull	r2, r3, r3, r2
 8008372:	095b      	lsrs	r3, r3, #5
 8008374:	011c      	lsls	r4, r3, #4
 8008376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800837a:	2200      	movs	r2, #0
 800837c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008380:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008384:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008388:	4642      	mov	r2, r8
 800838a:	464b      	mov	r3, r9
 800838c:	1891      	adds	r1, r2, r2
 800838e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008390:	415b      	adcs	r3, r3
 8008392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008394:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008398:	4641      	mov	r1, r8
 800839a:	eb12 0a01 	adds.w	sl, r2, r1
 800839e:	4649      	mov	r1, r9
 80083a0:	eb43 0b01 	adc.w	fp, r3, r1
 80083a4:	f04f 0200 	mov.w	r2, #0
 80083a8:	f04f 0300 	mov.w	r3, #0
 80083ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80083b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80083b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083b8:	4692      	mov	sl, r2
 80083ba:	469b      	mov	fp, r3
 80083bc:	4643      	mov	r3, r8
 80083be:	eb1a 0303 	adds.w	r3, sl, r3
 80083c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083c6:	464b      	mov	r3, r9
 80083c8:	eb4b 0303 	adc.w	r3, fp, r3
 80083cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80083e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80083e4:	460b      	mov	r3, r1
 80083e6:	18db      	adds	r3, r3, r3
 80083e8:	643b      	str	r3, [r7, #64]	; 0x40
 80083ea:	4613      	mov	r3, r2
 80083ec:	eb42 0303 	adc.w	r3, r2, r3
 80083f0:	647b      	str	r3, [r7, #68]	; 0x44
 80083f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80083fa:	f7f8 fbdf 	bl	8000bbc <__aeabi_uldivmod>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4611      	mov	r1, r2
 8008404:	4b3b      	ldr	r3, [pc, #236]	; (80084f4 <UART_SetConfig+0x2d4>)
 8008406:	fba3 2301 	umull	r2, r3, r3, r1
 800840a:	095b      	lsrs	r3, r3, #5
 800840c:	2264      	movs	r2, #100	; 0x64
 800840e:	fb02 f303 	mul.w	r3, r2, r3
 8008412:	1acb      	subs	r3, r1, r3
 8008414:	00db      	lsls	r3, r3, #3
 8008416:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800841a:	4b36      	ldr	r3, [pc, #216]	; (80084f4 <UART_SetConfig+0x2d4>)
 800841c:	fba3 2302 	umull	r2, r3, r3, r2
 8008420:	095b      	lsrs	r3, r3, #5
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008428:	441c      	add	r4, r3
 800842a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800842e:	2200      	movs	r2, #0
 8008430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008434:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008438:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800843c:	4642      	mov	r2, r8
 800843e:	464b      	mov	r3, r9
 8008440:	1891      	adds	r1, r2, r2
 8008442:	63b9      	str	r1, [r7, #56]	; 0x38
 8008444:	415b      	adcs	r3, r3
 8008446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008448:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800844c:	4641      	mov	r1, r8
 800844e:	1851      	adds	r1, r2, r1
 8008450:	6339      	str	r1, [r7, #48]	; 0x30
 8008452:	4649      	mov	r1, r9
 8008454:	414b      	adcs	r3, r1
 8008456:	637b      	str	r3, [r7, #52]	; 0x34
 8008458:	f04f 0200 	mov.w	r2, #0
 800845c:	f04f 0300 	mov.w	r3, #0
 8008460:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008464:	4659      	mov	r1, fp
 8008466:	00cb      	lsls	r3, r1, #3
 8008468:	4651      	mov	r1, sl
 800846a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800846e:	4651      	mov	r1, sl
 8008470:	00ca      	lsls	r2, r1, #3
 8008472:	4610      	mov	r0, r2
 8008474:	4619      	mov	r1, r3
 8008476:	4603      	mov	r3, r0
 8008478:	4642      	mov	r2, r8
 800847a:	189b      	adds	r3, r3, r2
 800847c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008480:	464b      	mov	r3, r9
 8008482:	460a      	mov	r2, r1
 8008484:	eb42 0303 	adc.w	r3, r2, r3
 8008488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800848c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008498:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800849c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80084a0:	460b      	mov	r3, r1
 80084a2:	18db      	adds	r3, r3, r3
 80084a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80084a6:	4613      	mov	r3, r2
 80084a8:	eb42 0303 	adc.w	r3, r2, r3
 80084ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80084b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80084b6:	f7f8 fb81 	bl	8000bbc <__aeabi_uldivmod>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4b0d      	ldr	r3, [pc, #52]	; (80084f4 <UART_SetConfig+0x2d4>)
 80084c0:	fba3 1302 	umull	r1, r3, r3, r2
 80084c4:	095b      	lsrs	r3, r3, #5
 80084c6:	2164      	movs	r1, #100	; 0x64
 80084c8:	fb01 f303 	mul.w	r3, r1, r3
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	00db      	lsls	r3, r3, #3
 80084d0:	3332      	adds	r3, #50	; 0x32
 80084d2:	4a08      	ldr	r2, [pc, #32]	; (80084f4 <UART_SetConfig+0x2d4>)
 80084d4:	fba2 2303 	umull	r2, r3, r2, r3
 80084d8:	095b      	lsrs	r3, r3, #5
 80084da:	f003 0207 	and.w	r2, r3, #7
 80084de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4422      	add	r2, r4
 80084e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084e8:	e105      	b.n	80086f6 <UART_SetConfig+0x4d6>
 80084ea:	bf00      	nop
 80084ec:	40011000 	.word	0x40011000
 80084f0:	40011400 	.word	0x40011400
 80084f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084fc:	2200      	movs	r2, #0
 80084fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008502:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008506:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800850a:	4642      	mov	r2, r8
 800850c:	464b      	mov	r3, r9
 800850e:	1891      	adds	r1, r2, r2
 8008510:	6239      	str	r1, [r7, #32]
 8008512:	415b      	adcs	r3, r3
 8008514:	627b      	str	r3, [r7, #36]	; 0x24
 8008516:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800851a:	4641      	mov	r1, r8
 800851c:	1854      	adds	r4, r2, r1
 800851e:	4649      	mov	r1, r9
 8008520:	eb43 0501 	adc.w	r5, r3, r1
 8008524:	f04f 0200 	mov.w	r2, #0
 8008528:	f04f 0300 	mov.w	r3, #0
 800852c:	00eb      	lsls	r3, r5, #3
 800852e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008532:	00e2      	lsls	r2, r4, #3
 8008534:	4614      	mov	r4, r2
 8008536:	461d      	mov	r5, r3
 8008538:	4643      	mov	r3, r8
 800853a:	18e3      	adds	r3, r4, r3
 800853c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008540:	464b      	mov	r3, r9
 8008542:	eb45 0303 	adc.w	r3, r5, r3
 8008546:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800854a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008556:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800855a:	f04f 0200 	mov.w	r2, #0
 800855e:	f04f 0300 	mov.w	r3, #0
 8008562:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008566:	4629      	mov	r1, r5
 8008568:	008b      	lsls	r3, r1, #2
 800856a:	4621      	mov	r1, r4
 800856c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008570:	4621      	mov	r1, r4
 8008572:	008a      	lsls	r2, r1, #2
 8008574:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008578:	f7f8 fb20 	bl	8000bbc <__aeabi_uldivmod>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4b60      	ldr	r3, [pc, #384]	; (8008704 <UART_SetConfig+0x4e4>)
 8008582:	fba3 2302 	umull	r2, r3, r3, r2
 8008586:	095b      	lsrs	r3, r3, #5
 8008588:	011c      	lsls	r4, r3, #4
 800858a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800858e:	2200      	movs	r2, #0
 8008590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008594:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008598:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800859c:	4642      	mov	r2, r8
 800859e:	464b      	mov	r3, r9
 80085a0:	1891      	adds	r1, r2, r2
 80085a2:	61b9      	str	r1, [r7, #24]
 80085a4:	415b      	adcs	r3, r3
 80085a6:	61fb      	str	r3, [r7, #28]
 80085a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085ac:	4641      	mov	r1, r8
 80085ae:	1851      	adds	r1, r2, r1
 80085b0:	6139      	str	r1, [r7, #16]
 80085b2:	4649      	mov	r1, r9
 80085b4:	414b      	adcs	r3, r1
 80085b6:	617b      	str	r3, [r7, #20]
 80085b8:	f04f 0200 	mov.w	r2, #0
 80085bc:	f04f 0300 	mov.w	r3, #0
 80085c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085c4:	4659      	mov	r1, fp
 80085c6:	00cb      	lsls	r3, r1, #3
 80085c8:	4651      	mov	r1, sl
 80085ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085ce:	4651      	mov	r1, sl
 80085d0:	00ca      	lsls	r2, r1, #3
 80085d2:	4610      	mov	r0, r2
 80085d4:	4619      	mov	r1, r3
 80085d6:	4603      	mov	r3, r0
 80085d8:	4642      	mov	r2, r8
 80085da:	189b      	adds	r3, r3, r2
 80085dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085e0:	464b      	mov	r3, r9
 80085e2:	460a      	mov	r2, r1
 80085e4:	eb42 0303 	adc.w	r3, r2, r3
 80085e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80085f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	f04f 0300 	mov.w	r3, #0
 8008600:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008604:	4649      	mov	r1, r9
 8008606:	008b      	lsls	r3, r1, #2
 8008608:	4641      	mov	r1, r8
 800860a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800860e:	4641      	mov	r1, r8
 8008610:	008a      	lsls	r2, r1, #2
 8008612:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008616:	f7f8 fad1 	bl	8000bbc <__aeabi_uldivmod>
 800861a:	4602      	mov	r2, r0
 800861c:	460b      	mov	r3, r1
 800861e:	4b39      	ldr	r3, [pc, #228]	; (8008704 <UART_SetConfig+0x4e4>)
 8008620:	fba3 1302 	umull	r1, r3, r3, r2
 8008624:	095b      	lsrs	r3, r3, #5
 8008626:	2164      	movs	r1, #100	; 0x64
 8008628:	fb01 f303 	mul.w	r3, r1, r3
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	011b      	lsls	r3, r3, #4
 8008630:	3332      	adds	r3, #50	; 0x32
 8008632:	4a34      	ldr	r2, [pc, #208]	; (8008704 <UART_SetConfig+0x4e4>)
 8008634:	fba2 2303 	umull	r2, r3, r2, r3
 8008638:	095b      	lsrs	r3, r3, #5
 800863a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800863e:	441c      	add	r4, r3
 8008640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008644:	2200      	movs	r2, #0
 8008646:	673b      	str	r3, [r7, #112]	; 0x70
 8008648:	677a      	str	r2, [r7, #116]	; 0x74
 800864a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800864e:	4642      	mov	r2, r8
 8008650:	464b      	mov	r3, r9
 8008652:	1891      	adds	r1, r2, r2
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	415b      	adcs	r3, r3
 8008658:	60fb      	str	r3, [r7, #12]
 800865a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800865e:	4641      	mov	r1, r8
 8008660:	1851      	adds	r1, r2, r1
 8008662:	6039      	str	r1, [r7, #0]
 8008664:	4649      	mov	r1, r9
 8008666:	414b      	adcs	r3, r1
 8008668:	607b      	str	r3, [r7, #4]
 800866a:	f04f 0200 	mov.w	r2, #0
 800866e:	f04f 0300 	mov.w	r3, #0
 8008672:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008676:	4659      	mov	r1, fp
 8008678:	00cb      	lsls	r3, r1, #3
 800867a:	4651      	mov	r1, sl
 800867c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008680:	4651      	mov	r1, sl
 8008682:	00ca      	lsls	r2, r1, #3
 8008684:	4610      	mov	r0, r2
 8008686:	4619      	mov	r1, r3
 8008688:	4603      	mov	r3, r0
 800868a:	4642      	mov	r2, r8
 800868c:	189b      	adds	r3, r3, r2
 800868e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008690:	464b      	mov	r3, r9
 8008692:	460a      	mov	r2, r1
 8008694:	eb42 0303 	adc.w	r3, r2, r3
 8008698:	66fb      	str	r3, [r7, #108]	; 0x6c
 800869a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	663b      	str	r3, [r7, #96]	; 0x60
 80086a4:	667a      	str	r2, [r7, #100]	; 0x64
 80086a6:	f04f 0200 	mov.w	r2, #0
 80086aa:	f04f 0300 	mov.w	r3, #0
 80086ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80086b2:	4649      	mov	r1, r9
 80086b4:	008b      	lsls	r3, r1, #2
 80086b6:	4641      	mov	r1, r8
 80086b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086bc:	4641      	mov	r1, r8
 80086be:	008a      	lsls	r2, r1, #2
 80086c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80086c4:	f7f8 fa7a 	bl	8000bbc <__aeabi_uldivmod>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	4b0d      	ldr	r3, [pc, #52]	; (8008704 <UART_SetConfig+0x4e4>)
 80086ce:	fba3 1302 	umull	r1, r3, r3, r2
 80086d2:	095b      	lsrs	r3, r3, #5
 80086d4:	2164      	movs	r1, #100	; 0x64
 80086d6:	fb01 f303 	mul.w	r3, r1, r3
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	011b      	lsls	r3, r3, #4
 80086de:	3332      	adds	r3, #50	; 0x32
 80086e0:	4a08      	ldr	r2, [pc, #32]	; (8008704 <UART_SetConfig+0x4e4>)
 80086e2:	fba2 2303 	umull	r2, r3, r2, r3
 80086e6:	095b      	lsrs	r3, r3, #5
 80086e8:	f003 020f 	and.w	r2, r3, #15
 80086ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4422      	add	r2, r4
 80086f4:	609a      	str	r2, [r3, #8]
}
 80086f6:	bf00      	nop
 80086f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80086fc:	46bd      	mov	sp, r7
 80086fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008702:	bf00      	nop
 8008704:	51eb851f 	.word	0x51eb851f

08008708 <__NVIC_SetPriority>:
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	4603      	mov	r3, r0
 8008710:	6039      	str	r1, [r7, #0]
 8008712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008718:	2b00      	cmp	r3, #0
 800871a:	db0a      	blt.n	8008732 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	b2da      	uxtb	r2, r3
 8008720:	490c      	ldr	r1, [pc, #48]	; (8008754 <__NVIC_SetPriority+0x4c>)
 8008722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008726:	0112      	lsls	r2, r2, #4
 8008728:	b2d2      	uxtb	r2, r2
 800872a:	440b      	add	r3, r1
 800872c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008730:	e00a      	b.n	8008748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	b2da      	uxtb	r2, r3
 8008736:	4908      	ldr	r1, [pc, #32]	; (8008758 <__NVIC_SetPriority+0x50>)
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	f003 030f 	and.w	r3, r3, #15
 800873e:	3b04      	subs	r3, #4
 8008740:	0112      	lsls	r2, r2, #4
 8008742:	b2d2      	uxtb	r2, r2
 8008744:	440b      	add	r3, r1
 8008746:	761a      	strb	r2, [r3, #24]
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	e000e100 	.word	0xe000e100
 8008758:	e000ed00 	.word	0xe000ed00

0800875c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800875c:	b580      	push	{r7, lr}
 800875e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008760:	4b05      	ldr	r3, [pc, #20]	; (8008778 <SysTick_Handler+0x1c>)
 8008762:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008764:	f003 f93c 	bl	800b9e0 <xTaskGetSchedulerState>
 8008768:	4603      	mov	r3, r0
 800876a:	2b01      	cmp	r3, #1
 800876c:	d001      	beq.n	8008772 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800876e:	f004 f85b 	bl	800c828 <xPortSysTickHandler>
  }
}
 8008772:	bf00      	nop
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	e000e010 	.word	0xe000e010

0800877c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800877c:	b580      	push	{r7, lr}
 800877e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008780:	2100      	movs	r1, #0
 8008782:	f06f 0004 	mvn.w	r0, #4
 8008786:	f7ff ffbf 	bl	8008708 <__NVIC_SetPriority>
#endif
}
 800878a:	bf00      	nop
 800878c:	bd80      	pop	{r7, pc}
	...

08008790 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008796:	f3ef 8305 	mrs	r3, IPSR
 800879a:	603b      	str	r3, [r7, #0]
  return(result);
 800879c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80087a2:	f06f 0305 	mvn.w	r3, #5
 80087a6:	607b      	str	r3, [r7, #4]
 80087a8:	e00c      	b.n	80087c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80087aa:	4b0a      	ldr	r3, [pc, #40]	; (80087d4 <osKernelInitialize+0x44>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d105      	bne.n	80087be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80087b2:	4b08      	ldr	r3, [pc, #32]	; (80087d4 <osKernelInitialize+0x44>)
 80087b4:	2201      	movs	r2, #1
 80087b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	607b      	str	r3, [r7, #4]
 80087bc:	e002      	b.n	80087c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80087be:	f04f 33ff 	mov.w	r3, #4294967295
 80087c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80087c4:	687b      	ldr	r3, [r7, #4]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	370c      	adds	r7, #12
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	20003d20 	.word	0x20003d20

080087d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087de:	f3ef 8305 	mrs	r3, IPSR
 80087e2:	603b      	str	r3, [r7, #0]
  return(result);
 80087e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80087ea:	f06f 0305 	mvn.w	r3, #5
 80087ee:	607b      	str	r3, [r7, #4]
 80087f0:	e010      	b.n	8008814 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80087f2:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <osKernelStart+0x48>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d109      	bne.n	800880e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80087fa:	f7ff ffbf 	bl	800877c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80087fe:	4b08      	ldr	r3, [pc, #32]	; (8008820 <osKernelStart+0x48>)
 8008800:	2202      	movs	r2, #2
 8008802:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008804:	f002 fbe4 	bl	800afd0 <vTaskStartScheduler>
      stat = osOK;
 8008808:	2300      	movs	r3, #0
 800880a:	607b      	str	r3, [r7, #4]
 800880c:	e002      	b.n	8008814 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800880e:	f04f 33ff 	mov.w	r3, #4294967295
 8008812:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008814:	687b      	ldr	r3, [r7, #4]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20003d20 	.word	0x20003d20

08008824 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800882a:	f3ef 8305 	mrs	r3, IPSR
 800882e:	603b      	str	r3, [r7, #0]
  return(result);
 8008830:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008832:	2b00      	cmp	r3, #0
 8008834:	d003      	beq.n	800883e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008836:	f002 fced 	bl	800b214 <xTaskGetTickCountFromISR>
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	e002      	b.n	8008844 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800883e:	f002 fcd9 	bl	800b1f4 <xTaskGetTickCount>
 8008842:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008844:	687b      	ldr	r3, [r7, #4]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800884e:	b580      	push	{r7, lr}
 8008850:	b08e      	sub	sp, #56	; 0x38
 8008852:	af04      	add	r7, sp, #16
 8008854:	60f8      	str	r0, [r7, #12]
 8008856:	60b9      	str	r1, [r7, #8]
 8008858:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800885a:	2300      	movs	r3, #0
 800885c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800885e:	f3ef 8305 	mrs	r3, IPSR
 8008862:	617b      	str	r3, [r7, #20]
  return(result);
 8008864:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008866:	2b00      	cmp	r3, #0
 8008868:	d17e      	bne.n	8008968 <osThreadNew+0x11a>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d07b      	beq.n	8008968 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008870:	2380      	movs	r3, #128	; 0x80
 8008872:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008874:	2318      	movs	r3, #24
 8008876:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008878:	2300      	movs	r3, #0
 800887a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800887c:	f04f 33ff 	mov.w	r3, #4294967295
 8008880:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d045      	beq.n	8008914 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <osThreadNew+0x48>
        name = attr->name;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d002      	beq.n	80088a4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d008      	beq.n	80088bc <osThreadNew+0x6e>
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	2b38      	cmp	r3, #56	; 0x38
 80088ae:	d805      	bhi.n	80088bc <osThreadNew+0x6e>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	f003 0301 	and.w	r3, r3, #1
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <osThreadNew+0x72>
        return (NULL);
 80088bc:	2300      	movs	r3, #0
 80088be:	e054      	b.n	800896a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d003      	beq.n	80088d0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	089b      	lsrs	r3, r3, #2
 80088ce:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00e      	beq.n	80088f6 <osThreadNew+0xa8>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	2b5b      	cmp	r3, #91	; 0x5b
 80088de:	d90a      	bls.n	80088f6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d006      	beq.n	80088f6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d002      	beq.n	80088f6 <osThreadNew+0xa8>
        mem = 1;
 80088f0:	2301      	movs	r3, #1
 80088f2:	61bb      	str	r3, [r7, #24]
 80088f4:	e010      	b.n	8008918 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10c      	bne.n	8008918 <osThreadNew+0xca>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d108      	bne.n	8008918 <osThreadNew+0xca>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d104      	bne.n	8008918 <osThreadNew+0xca>
          mem = 0;
 800890e:	2300      	movs	r3, #0
 8008910:	61bb      	str	r3, [r7, #24]
 8008912:	e001      	b.n	8008918 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008914:	2300      	movs	r3, #0
 8008916:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d110      	bne.n	8008940 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008926:	9202      	str	r2, [sp, #8]
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	6a3a      	ldr	r2, [r7, #32]
 8008932:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f002 f8f7 	bl	800ab28 <xTaskCreateStatic>
 800893a:	4603      	mov	r3, r0
 800893c:	613b      	str	r3, [r7, #16]
 800893e:	e013      	b.n	8008968 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d110      	bne.n	8008968 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	b29a      	uxth	r2, r3
 800894a:	f107 0310 	add.w	r3, r7, #16
 800894e:	9301      	str	r3, [sp, #4]
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f002 f942 	bl	800abe2 <xTaskCreate>
 800895e:	4603      	mov	r3, r0
 8008960:	2b01      	cmp	r3, #1
 8008962:	d001      	beq.n	8008968 <osThreadNew+0x11a>
            hTask = NULL;
 8008964:	2300      	movs	r3, #0
 8008966:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008968:	693b      	ldr	r3, [r7, #16]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3728      	adds	r7, #40	; 0x28
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008972:	b580      	push	{r7, lr}
 8008974:	b084      	sub	sp, #16
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800897a:	f3ef 8305 	mrs	r3, IPSR
 800897e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008980:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008982:	2b00      	cmp	r3, #0
 8008984:	d003      	beq.n	800898e <osDelay+0x1c>
    stat = osErrorISR;
 8008986:	f06f 0305 	mvn.w	r3, #5
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	e007      	b.n	800899e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800898e:	2300      	movs	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <osDelay+0x2c>
      vTaskDelay(ticks);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f002 fae5 	bl	800af68 <vTaskDelay>
    }
  }

  return (stat);
 800899e:	68fb      	ldr	r3, [r7, #12]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089b0:	f3ef 8305 	mrs	r3, IPSR
 80089b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80089b6:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <osDelayUntil+0x1c>
    stat = osErrorISR;
 80089bc:	f06f 0305 	mvn.w	r3, #5
 80089c0:	617b      	str	r3, [r7, #20]
 80089c2:	e019      	b.n	80089f8 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80089c8:	f002 fc14 	bl	800b1f4 <xTaskGetTickCount>
 80089cc:	4603      	mov	r3, r0
 80089ce:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d009      	beq.n	80089f2 <osDelayUntil+0x4a>
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	db06      	blt.n	80089f2 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 80089e4:	f107 0308 	add.w	r3, r7, #8
 80089e8:	6939      	ldr	r1, [r7, #16]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f002 fa3e 	bl	800ae6c <vTaskDelayUntil>
 80089f0:	e002      	b.n	80089f8 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80089f2:	f06f 0303 	mvn.w	r3, #3
 80089f6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80089f8:	697b      	ldr	r3, [r7, #20]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b086      	sub	sp, #24
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a0e:	f3ef 8305 	mrs	r3, IPSR
 8008a12:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a14:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d12d      	bne.n	8008a76 <osEventFlagsNew+0x74>
    mem = -1;
 8008a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a1e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d015      	beq.n	8008a52 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d006      	beq.n	8008a3c <osEventFlagsNew+0x3a>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	2b1f      	cmp	r3, #31
 8008a34:	d902      	bls.n	8008a3c <osEventFlagsNew+0x3a>
        mem = 1;
 8008a36:	2301      	movs	r3, #1
 8008a38:	613b      	str	r3, [r7, #16]
 8008a3a:	e00c      	b.n	8008a56 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d108      	bne.n	8008a56 <osEventFlagsNew+0x54>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d104      	bne.n	8008a56 <osEventFlagsNew+0x54>
          mem = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	613b      	str	r3, [r7, #16]
 8008a50:	e001      	b.n	8008a56 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8008a52:	2300      	movs	r3, #0
 8008a54:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d106      	bne.n	8008a6a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 fc7d 	bl	8009360 <xEventGroupCreateStatic>
 8008a66:	6178      	str	r0, [r7, #20]
 8008a68:	e005      	b.n	8008a76 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d102      	bne.n	8008a76 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8008a70:	f000 fcad 	bl	80093ce <xEventGroupCreate>
 8008a74:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8008a76:	697b      	ldr	r3, [r7, #20]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d004      	beq.n	8008a9e <osEventFlagsSet+0x1e>
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d003      	beq.n	8008aa6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8008a9e:	f06f 0303 	mvn.w	r3, #3
 8008aa2:	617b      	str	r3, [r7, #20]
 8008aa4:	e028      	b.n	8008af8 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008aa6:	f3ef 8305 	mrs	r3, IPSR
 8008aaa:	60fb      	str	r3, [r7, #12]
  return(result);
 8008aac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d01d      	beq.n	8008aee <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8008ab6:	f107 0308 	add.w	r3, r7, #8
 8008aba:	461a      	mov	r2, r3
 8008abc:	6839      	ldr	r1, [r7, #0]
 8008abe:	6938      	ldr	r0, [r7, #16]
 8008ac0:	f000 fea6 	bl	8009810 <xEventGroupSetBitsFromISR>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d103      	bne.n	8008ad2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8008aca:	f06f 0302 	mvn.w	r3, #2
 8008ace:	617b      	str	r3, [r7, #20]
 8008ad0:	e012      	b.n	8008af8 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d00d      	beq.n	8008af8 <osEventFlagsSet+0x78>
 8008adc:	4b09      	ldr	r3, [pc, #36]	; (8008b04 <osEventFlagsSet+0x84>)
 8008ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	e004      	b.n	8008af8 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6938      	ldr	r0, [r7, #16]
 8008af2:	f000 fdc5 	bl	8009680 <xEventGroupSetBits>
 8008af6:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8008af8:	697b      	ldr	r3, [r7, #20]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	e000ed04 	.word	0xe000ed04

08008b08 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d004      	beq.n	8008b26 <osEventFlagsClear+0x1e>
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d003      	beq.n	8008b2e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8008b26:	f06f 0303 	mvn.w	r3, #3
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	e019      	b.n	8008b62 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b2e:	f3ef 8305 	mrs	r3, IPSR
 8008b32:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b34:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00e      	beq.n	8008b58 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8008b3a:	6938      	ldr	r0, [r7, #16]
 8008b3c:	f000 fd7c 	bl	8009638 <xEventGroupGetBitsFromISR>
 8008b40:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6938      	ldr	r0, [r7, #16]
 8008b46:	f000 fd63 	bl	8009610 <xEventGroupClearBitsFromISR>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d108      	bne.n	8008b62 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8008b50:	f06f 0302 	mvn.w	r3, #2
 8008b54:	617b      	str	r3, [r7, #20]
 8008b56:	e004      	b.n	8008b62 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6938      	ldr	r0, [r7, #16]
 8008b5c:	f000 fd20 	bl	80095a0 <xEventGroupClearBits>
 8008b60:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8008b62:	697b      	ldr	r3, [r7, #20]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b08c      	sub	sp, #48	; 0x30
 8008b70:	af02      	add	r7, sp, #8
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d004      	beq.n	8008b8e <osEventFlagsWait+0x22>
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d003      	beq.n	8008b96 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8008b8e:	f06f 0303 	mvn.w	r3, #3
 8008b92:	61fb      	str	r3, [r7, #28]
 8008b94:	e04b      	b.n	8008c2e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b96:	f3ef 8305 	mrs	r3, IPSR
 8008b9a:	617b      	str	r3, [r7, #20]
  return(result);
 8008b9c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8008ba2:	f06f 0305 	mvn.w	r3, #5
 8008ba6:	61fb      	str	r3, [r7, #28]
 8008ba8:	e041      	b.n	8008c2e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8008bb8:	e001      	b.n	8008bbe <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f003 0302 	and.w	r3, r3, #2
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	623b      	str	r3, [r7, #32]
 8008bcc:	e001      	b.n	8008bd2 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	6a3a      	ldr	r2, [r7, #32]
 8008bda:	68b9      	ldr	r1, [r7, #8]
 8008bdc:	69b8      	ldr	r0, [r7, #24]
 8008bde:	f000 fc11 	bl	8009404 <xEventGroupWaitBits>
 8008be2:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d010      	beq.n	8008c10 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d019      	beq.n	8008c2e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d003      	beq.n	8008c08 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8008c00:	f06f 0301 	mvn.w	r3, #1
 8008c04:	61fb      	str	r3, [r7, #28]
 8008c06:	e012      	b.n	8008c2e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8008c08:	f06f 0302 	mvn.w	r3, #2
 8008c0c:	61fb      	str	r3, [r7, #28]
 8008c0e:	e00e      	b.n	8008c2e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	4013      	ands	r3, r2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d109      	bne.n	8008c2e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d003      	beq.n	8008c28 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8008c20:	f06f 0301 	mvn.w	r3, #1
 8008c24:	61fb      	str	r3, [r7, #28]
 8008c26:	e002      	b.n	8008c2e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8008c28:	f06f 0302 	mvn.w	r3, #2
 8008c2c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8008c2e:	69fb      	ldr	r3, [r7, #28]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3728      	adds	r7, #40	; 0x28
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b088      	sub	sp, #32
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008c40:	2300      	movs	r3, #0
 8008c42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c44:	f3ef 8305 	mrs	r3, IPSR
 8008c48:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c4a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d174      	bne.n	8008d3a <osMutexNew+0x102>
    if (attr != NULL) {
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d003      	beq.n	8008c5e <osMutexNew+0x26>
      type = attr->attr_bits;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	61bb      	str	r3, [r7, #24]
 8008c5c:	e001      	b.n	8008c62 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	f003 0301 	and.w	r3, r3, #1
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <osMutexNew+0x3a>
      rmtx = 1U;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	617b      	str	r3, [r7, #20]
 8008c70:	e001      	b.n	8008c76 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	f003 0308 	and.w	r3, r3, #8
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d15c      	bne.n	8008d3a <osMutexNew+0x102>
      mem = -1;
 8008c80:	f04f 33ff 	mov.w	r3, #4294967295
 8008c84:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d015      	beq.n	8008cb8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d006      	beq.n	8008ca2 <osMutexNew+0x6a>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	2b4f      	cmp	r3, #79	; 0x4f
 8008c9a:	d902      	bls.n	8008ca2 <osMutexNew+0x6a>
          mem = 1;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	613b      	str	r3, [r7, #16]
 8008ca0:	e00c      	b.n	8008cbc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d108      	bne.n	8008cbc <osMutexNew+0x84>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d104      	bne.n	8008cbc <osMutexNew+0x84>
            mem = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	613b      	str	r3, [r7, #16]
 8008cb6:	e001      	b.n	8008cbc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d112      	bne.n	8008ce8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d007      	beq.n	8008cd8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	4619      	mov	r1, r3
 8008cce:	2004      	movs	r0, #4
 8008cd0:	f000 ffd5 	bl	8009c7e <xQueueCreateMutexStatic>
 8008cd4:	61f8      	str	r0, [r7, #28]
 8008cd6:	e016      	b.n	8008d06 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	2001      	movs	r0, #1
 8008ce0:	f000 ffcd 	bl	8009c7e <xQueueCreateMutexStatic>
 8008ce4:	61f8      	str	r0, [r7, #28]
 8008ce6:	e00e      	b.n	8008d06 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10b      	bne.n	8008d06 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d004      	beq.n	8008cfe <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008cf4:	2004      	movs	r0, #4
 8008cf6:	f000 ffaa 	bl	8009c4e <xQueueCreateMutex>
 8008cfa:	61f8      	str	r0, [r7, #28]
 8008cfc:	e003      	b.n	8008d06 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008cfe:	2001      	movs	r0, #1
 8008d00:	f000 ffa5 	bl	8009c4e <xQueueCreateMutex>
 8008d04:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00c      	beq.n	8008d26 <osMutexNew+0xee>
        if (attr != NULL) {
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <osMutexNew+0xe2>
          name = attr->name;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	60fb      	str	r3, [r7, #12]
 8008d18:	e001      	b.n	8008d1e <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008d1e:	68f9      	ldr	r1, [r7, #12]
 8008d20:	69f8      	ldr	r0, [r7, #28]
 8008d22:	f001 fe79 	bl	800aa18 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d006      	beq.n	8008d3a <osMutexNew+0x102>
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	f043 0301 	orr.w	r3, r3, #1
 8008d38:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008d3a:	69fb      	ldr	r3, [r7, #28]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3720      	adds	r7, #32
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f023 0301 	bic.w	r3, r3, #1
 8008d54:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f003 0301 	and.w	r3, r3, #1
 8008d5c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d62:	f3ef 8305 	mrs	r3, IPSR
 8008d66:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d68:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008d6e:	f06f 0305 	mvn.w	r3, #5
 8008d72:	617b      	str	r3, [r7, #20]
 8008d74:	e02c      	b.n	8008dd0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d103      	bne.n	8008d84 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008d7c:	f06f 0303 	mvn.w	r3, #3
 8008d80:	617b      	str	r3, [r7, #20]
 8008d82:	e025      	b.n	8008dd0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d011      	beq.n	8008dae <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008d8a:	6839      	ldr	r1, [r7, #0]
 8008d8c:	6938      	ldr	r0, [r7, #16]
 8008d8e:	f000 ffc5 	bl	8009d1c <xQueueTakeMutexRecursive>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d01b      	beq.n	8008dd0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008d9e:	f06f 0301 	mvn.w	r3, #1
 8008da2:	617b      	str	r3, [r7, #20]
 8008da4:	e014      	b.n	8008dd0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008da6:	f06f 0302 	mvn.w	r3, #2
 8008daa:	617b      	str	r3, [r7, #20]
 8008dac:	e010      	b.n	8008dd0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6938      	ldr	r0, [r7, #16]
 8008db2:	f001 fb59 	bl	800a468 <xQueueSemaphoreTake>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d009      	beq.n	8008dd0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008dc2:	f06f 0301 	mvn.w	r3, #1
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	e002      	b.n	8008dd0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008dca:	f06f 0302 	mvn.w	r3, #2
 8008dce:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008dd0:	697b      	ldr	r3, [r7, #20]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b086      	sub	sp, #24
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f023 0301 	bic.w	r3, r3, #1
 8008de8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008df2:	2300      	movs	r3, #0
 8008df4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008df6:	f3ef 8305 	mrs	r3, IPSR
 8008dfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dfc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <osMutexRelease+0x30>
    stat = osErrorISR;
 8008e02:	f06f 0305 	mvn.w	r3, #5
 8008e06:	617b      	str	r3, [r7, #20]
 8008e08:	e01f      	b.n	8008e4a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d103      	bne.n	8008e18 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008e10:	f06f 0303 	mvn.w	r3, #3
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	e018      	b.n	8008e4a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d009      	beq.n	8008e32 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008e1e:	6938      	ldr	r0, [r7, #16]
 8008e20:	f000 ff48 	bl	8009cb4 <xQueueGiveMutexRecursive>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d00f      	beq.n	8008e4a <osMutexRelease+0x70>
        stat = osErrorResource;
 8008e2a:	f06f 0302 	mvn.w	r3, #2
 8008e2e:	617b      	str	r3, [r7, #20]
 8008e30:	e00b      	b.n	8008e4a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008e32:	2300      	movs	r3, #0
 8008e34:	2200      	movs	r2, #0
 8008e36:	2100      	movs	r1, #0
 8008e38:	6938      	ldr	r0, [r7, #16]
 8008e3a:	f001 f80f 	bl	8009e5c <xQueueGenericSend>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d002      	beq.n	8008e4a <osMutexRelease+0x70>
        stat = osErrorResource;
 8008e44:	f06f 0302 	mvn.w	r3, #2
 8008e48:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008e4a:	697b      	ldr	r3, [r7, #20]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3718      	adds	r7, #24
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08a      	sub	sp, #40	; 0x28
 8008e58:	af02      	add	r7, sp, #8
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008e60:	2300      	movs	r3, #0
 8008e62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e64:	f3ef 8305 	mrs	r3, IPSR
 8008e68:	613b      	str	r3, [r7, #16]
  return(result);
 8008e6a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d175      	bne.n	8008f5c <osSemaphoreNew+0x108>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d072      	beq.n	8008f5c <osSemaphoreNew+0x108>
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d86e      	bhi.n	8008f5c <osSemaphoreNew+0x108>
    mem = -1;
 8008e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d015      	beq.n	8008eb6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d006      	beq.n	8008ea0 <osSemaphoreNew+0x4c>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	2b4f      	cmp	r3, #79	; 0x4f
 8008e98:	d902      	bls.n	8008ea0 <osSemaphoreNew+0x4c>
        mem = 1;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	61bb      	str	r3, [r7, #24]
 8008e9e:	e00c      	b.n	8008eba <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d108      	bne.n	8008eba <osSemaphoreNew+0x66>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d104      	bne.n	8008eba <osSemaphoreNew+0x66>
          mem = 0;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	61bb      	str	r3, [r7, #24]
 8008eb4:	e001      	b.n	8008eba <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec0:	d04c      	beq.n	8008f5c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d128      	bne.n	8008f1a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d10a      	bne.n	8008ee4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	2203      	movs	r2, #3
 8008ed4:	9200      	str	r2, [sp, #0]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	2100      	movs	r1, #0
 8008eda:	2001      	movs	r0, #1
 8008edc:	f000 fdc8 	bl	8009a70 <xQueueGenericCreateStatic>
 8008ee0:	61f8      	str	r0, [r7, #28]
 8008ee2:	e005      	b.n	8008ef0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008ee4:	2203      	movs	r2, #3
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	2001      	movs	r0, #1
 8008eea:	f000 fe39 	bl	8009b60 <xQueueGenericCreate>
 8008eee:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d022      	beq.n	8008f3c <osSemaphoreNew+0xe8>
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d01f      	beq.n	8008f3c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008efc:	2300      	movs	r3, #0
 8008efe:	2200      	movs	r2, #0
 8008f00:	2100      	movs	r1, #0
 8008f02:	69f8      	ldr	r0, [r7, #28]
 8008f04:	f000 ffaa 	bl	8009e5c <xQueueGenericSend>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d016      	beq.n	8008f3c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008f0e:	69f8      	ldr	r0, [r7, #28]
 8008f10:	f001 fc36 	bl	800a780 <vQueueDelete>
            hSemaphore = NULL;
 8008f14:	2300      	movs	r3, #0
 8008f16:	61fb      	str	r3, [r7, #28]
 8008f18:	e010      	b.n	8008f3c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d108      	bne.n	8008f32 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	461a      	mov	r2, r3
 8008f26:	68b9      	ldr	r1, [r7, #8]
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f000 ff2d 	bl	8009d88 <xQueueCreateCountingSemaphoreStatic>
 8008f2e:	61f8      	str	r0, [r7, #28]
 8008f30:	e004      	b.n	8008f3c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008f32:	68b9      	ldr	r1, [r7, #8]
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 ff5e 	bl	8009df6 <xQueueCreateCountingSemaphore>
 8008f3a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00c      	beq.n	8008f5c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	617b      	str	r3, [r7, #20]
 8008f4e:	e001      	b.n	8008f54 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008f50:	2300      	movs	r3, #0
 8008f52:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008f54:	6979      	ldr	r1, [r7, #20]
 8008f56:	69f8      	ldr	r0, [r7, #28]
 8008f58:	f001 fd5e 	bl	800aa18 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008f5c:	69fb      	ldr	r3, [r7, #28]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3720      	adds	r7, #32
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d103      	bne.n	8008f88 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008f80:	f06f 0303 	mvn.w	r3, #3
 8008f84:	617b      	str	r3, [r7, #20]
 8008f86:	e039      	b.n	8008ffc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f88:	f3ef 8305 	mrs	r3, IPSR
 8008f8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d022      	beq.n	8008fda <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008f9a:	f06f 0303 	mvn.w	r3, #3
 8008f9e:	617b      	str	r3, [r7, #20]
 8008fa0:	e02c      	b.n	8008ffc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008fa6:	f107 0308 	add.w	r3, r7, #8
 8008faa:	461a      	mov	r2, r3
 8008fac:	2100      	movs	r1, #0
 8008fae:	6938      	ldr	r0, [r7, #16]
 8008fb0:	f001 fb66 	bl	800a680 <xQueueReceiveFromISR>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d003      	beq.n	8008fc2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008fba:	f06f 0302 	mvn.w	r3, #2
 8008fbe:	617b      	str	r3, [r7, #20]
 8008fc0:	e01c      	b.n	8008ffc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d019      	beq.n	8008ffc <osSemaphoreAcquire+0x94>
 8008fc8:	4b0f      	ldr	r3, [pc, #60]	; (8009008 <osSemaphoreAcquire+0xa0>)
 8008fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fce:	601a      	str	r2, [r3, #0]
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	e010      	b.n	8008ffc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008fda:	6839      	ldr	r1, [r7, #0]
 8008fdc:	6938      	ldr	r0, [r7, #16]
 8008fde:	f001 fa43 	bl	800a468 <xQueueSemaphoreTake>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d009      	beq.n	8008ffc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d003      	beq.n	8008ff6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008fee:	f06f 0301 	mvn.w	r3, #1
 8008ff2:	617b      	str	r3, [r7, #20]
 8008ff4:	e002      	b.n	8008ffc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008ff6:	f06f 0302 	mvn.w	r3, #2
 8008ffa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008ffc:	697b      	ldr	r3, [r7, #20]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	e000ed04 	.word	0xe000ed04

0800900c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009018:	2300      	movs	r3, #0
 800901a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d103      	bne.n	800902a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009022:	f06f 0303 	mvn.w	r3, #3
 8009026:	617b      	str	r3, [r7, #20]
 8009028:	e02c      	b.n	8009084 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800902a:	f3ef 8305 	mrs	r3, IPSR
 800902e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009030:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009032:	2b00      	cmp	r3, #0
 8009034:	d01a      	beq.n	800906c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009036:	2300      	movs	r3, #0
 8009038:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800903a:	f107 0308 	add.w	r3, r7, #8
 800903e:	4619      	mov	r1, r3
 8009040:	6938      	ldr	r0, [r7, #16]
 8009042:	f001 f8a4 	bl	800a18e <xQueueGiveFromISR>
 8009046:	4603      	mov	r3, r0
 8009048:	2b01      	cmp	r3, #1
 800904a:	d003      	beq.n	8009054 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800904c:	f06f 0302 	mvn.w	r3, #2
 8009050:	617b      	str	r3, [r7, #20]
 8009052:	e017      	b.n	8009084 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d014      	beq.n	8009084 <osSemaphoreRelease+0x78>
 800905a:	4b0d      	ldr	r3, [pc, #52]	; (8009090 <osSemaphoreRelease+0x84>)
 800905c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	e00b      	b.n	8009084 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800906c:	2300      	movs	r3, #0
 800906e:	2200      	movs	r2, #0
 8009070:	2100      	movs	r1, #0
 8009072:	6938      	ldr	r0, [r7, #16]
 8009074:	f000 fef2 	bl	8009e5c <xQueueGenericSend>
 8009078:	4603      	mov	r3, r0
 800907a:	2b01      	cmp	r3, #1
 800907c:	d002      	beq.n	8009084 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800907e:	f06f 0302 	mvn.w	r3, #2
 8009082:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009084:	697b      	ldr	r3, [r7, #20]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	e000ed04 	.word	0xe000ed04

08009094 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009094:	b580      	push	{r7, lr}
 8009096:	b08a      	sub	sp, #40	; 0x28
 8009098:	af02      	add	r7, sp, #8
 800909a:	60f8      	str	r0, [r7, #12]
 800909c:	60b9      	str	r1, [r7, #8]
 800909e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80090a0:	2300      	movs	r3, #0
 80090a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090a4:	f3ef 8305 	mrs	r3, IPSR
 80090a8:	613b      	str	r3, [r7, #16]
  return(result);
 80090aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d15f      	bne.n	8009170 <osMessageQueueNew+0xdc>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d05c      	beq.n	8009170 <osMessageQueueNew+0xdc>
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d059      	beq.n	8009170 <osMessageQueueNew+0xdc>
    mem = -1;
 80090bc:	f04f 33ff 	mov.w	r3, #4294967295
 80090c0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d029      	beq.n	800911c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d012      	beq.n	80090f6 <osMessageQueueNew+0x62>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	2b4f      	cmp	r3, #79	; 0x4f
 80090d6:	d90e      	bls.n	80090f6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00a      	beq.n	80090f6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	695a      	ldr	r2, [r3, #20]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	68b9      	ldr	r1, [r7, #8]
 80090e8:	fb01 f303 	mul.w	r3, r1, r3
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d302      	bcc.n	80090f6 <osMessageQueueNew+0x62>
        mem = 1;
 80090f0:	2301      	movs	r3, #1
 80090f2:	61bb      	str	r3, [r7, #24]
 80090f4:	e014      	b.n	8009120 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d110      	bne.n	8009120 <osMessageQueueNew+0x8c>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10c      	bne.n	8009120 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800910a:	2b00      	cmp	r3, #0
 800910c:	d108      	bne.n	8009120 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d104      	bne.n	8009120 <osMessageQueueNew+0x8c>
          mem = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	61bb      	str	r3, [r7, #24]
 800911a:	e001      	b.n	8009120 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800911c:	2300      	movs	r3, #0
 800911e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d10b      	bne.n	800913e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	691a      	ldr	r2, [r3, #16]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	2100      	movs	r1, #0
 8009130:	9100      	str	r1, [sp, #0]
 8009132:	68b9      	ldr	r1, [r7, #8]
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 fc9b 	bl	8009a70 <xQueueGenericCreateStatic>
 800913a:	61f8      	str	r0, [r7, #28]
 800913c:	e008      	b.n	8009150 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d105      	bne.n	8009150 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009144:	2200      	movs	r2, #0
 8009146:	68b9      	ldr	r1, [r7, #8]
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f000 fd09 	bl	8009b60 <xQueueGenericCreate>
 800914e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00c      	beq.n	8009170 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d003      	beq.n	8009164 <osMessageQueueNew+0xd0>
        name = attr->name;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	617b      	str	r3, [r7, #20]
 8009162:	e001      	b.n	8009168 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009164:	2300      	movs	r3, #0
 8009166:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009168:	6979      	ldr	r1, [r7, #20]
 800916a:	69f8      	ldr	r0, [r7, #28]
 800916c:	f001 fc54 	bl	800aa18 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009170:	69fb      	ldr	r3, [r7, #28]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3720      	adds	r7, #32
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	603b      	str	r3, [r7, #0]
 8009188:	4613      	mov	r3, r2
 800918a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009190:	2300      	movs	r3, #0
 8009192:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009194:	f3ef 8305 	mrs	r3, IPSR
 8009198:	617b      	str	r3, [r7, #20]
  return(result);
 800919a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800919c:	2b00      	cmp	r3, #0
 800919e:	d028      	beq.n	80091f2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d005      	beq.n	80091b2 <osMessageQueuePut+0x36>
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <osMessageQueuePut+0x36>
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d003      	beq.n	80091ba <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80091b2:	f06f 0303 	mvn.w	r3, #3
 80091b6:	61fb      	str	r3, [r7, #28]
 80091b8:	e038      	b.n	800922c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80091ba:	2300      	movs	r3, #0
 80091bc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80091be:	f107 0210 	add.w	r2, r7, #16
 80091c2:	2300      	movs	r3, #0
 80091c4:	68b9      	ldr	r1, [r7, #8]
 80091c6:	69b8      	ldr	r0, [r7, #24]
 80091c8:	f000 ff46 	bl	800a058 <xQueueGenericSendFromISR>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d003      	beq.n	80091da <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80091d2:	f06f 0302 	mvn.w	r3, #2
 80091d6:	61fb      	str	r3, [r7, #28]
 80091d8:	e028      	b.n	800922c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d025      	beq.n	800922c <osMessageQueuePut+0xb0>
 80091e0:	4b15      	ldr	r3, [pc, #84]	; (8009238 <osMessageQueuePut+0xbc>)
 80091e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091e6:	601a      	str	r2, [r3, #0]
 80091e8:	f3bf 8f4f 	dsb	sy
 80091ec:	f3bf 8f6f 	isb	sy
 80091f0:	e01c      	b.n	800922c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <osMessageQueuePut+0x82>
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d103      	bne.n	8009206 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80091fe:	f06f 0303 	mvn.w	r3, #3
 8009202:	61fb      	str	r3, [r7, #28]
 8009204:	e012      	b.n	800922c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009206:	2300      	movs	r3, #0
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	68b9      	ldr	r1, [r7, #8]
 800920c:	69b8      	ldr	r0, [r7, #24]
 800920e:	f000 fe25 	bl	8009e5c <xQueueGenericSend>
 8009212:	4603      	mov	r3, r0
 8009214:	2b01      	cmp	r3, #1
 8009216:	d009      	beq.n	800922c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800921e:	f06f 0301 	mvn.w	r3, #1
 8009222:	61fb      	str	r3, [r7, #28]
 8009224:	e002      	b.n	800922c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8009226:	f06f 0302 	mvn.w	r3, #2
 800922a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800922c:	69fb      	ldr	r3, [r7, #28]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3720      	adds	r7, #32
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	e000ed04 	.word	0xe000ed04

0800923c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800923c:	b580      	push	{r7, lr}
 800923e:	b088      	sub	sp, #32
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
 8009248:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800924e:	2300      	movs	r3, #0
 8009250:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009252:	f3ef 8305 	mrs	r3, IPSR
 8009256:	617b      	str	r3, [r7, #20]
  return(result);
 8009258:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800925a:	2b00      	cmp	r3, #0
 800925c:	d028      	beq.n	80092b0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d005      	beq.n	8009270 <osMessageQueueGet+0x34>
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <osMessageQueueGet+0x34>
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d003      	beq.n	8009278 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009270:	f06f 0303 	mvn.w	r3, #3
 8009274:	61fb      	str	r3, [r7, #28]
 8009276:	e037      	b.n	80092e8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009278:	2300      	movs	r3, #0
 800927a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800927c:	f107 0310 	add.w	r3, r7, #16
 8009280:	461a      	mov	r2, r3
 8009282:	68b9      	ldr	r1, [r7, #8]
 8009284:	69b8      	ldr	r0, [r7, #24]
 8009286:	f001 f9fb 	bl	800a680 <xQueueReceiveFromISR>
 800928a:	4603      	mov	r3, r0
 800928c:	2b01      	cmp	r3, #1
 800928e:	d003      	beq.n	8009298 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009290:	f06f 0302 	mvn.w	r3, #2
 8009294:	61fb      	str	r3, [r7, #28]
 8009296:	e027      	b.n	80092e8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d024      	beq.n	80092e8 <osMessageQueueGet+0xac>
 800929e:	4b15      	ldr	r3, [pc, #84]	; (80092f4 <osMessageQueueGet+0xb8>)
 80092a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092a4:	601a      	str	r2, [r3, #0]
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	f3bf 8f6f 	isb	sy
 80092ae:	e01b      	b.n	80092e8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d002      	beq.n	80092bc <osMessageQueueGet+0x80>
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d103      	bne.n	80092c4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80092bc:	f06f 0303 	mvn.w	r3, #3
 80092c0:	61fb      	str	r3, [r7, #28]
 80092c2:	e011      	b.n	80092e8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	68b9      	ldr	r1, [r7, #8]
 80092c8:	69b8      	ldr	r0, [r7, #24]
 80092ca:	f000 ffed 	bl	800a2a8 <xQueueReceive>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d009      	beq.n	80092e8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d003      	beq.n	80092e2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80092da:	f06f 0301 	mvn.w	r3, #1
 80092de:	61fb      	str	r3, [r7, #28]
 80092e0:	e002      	b.n	80092e8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80092e2:	f06f 0302 	mvn.w	r3, #2
 80092e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80092e8:	69fb      	ldr	r3, [r7, #28]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3720      	adds	r7, #32
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	e000ed04 	.word	0xe000ed04

080092f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4a07      	ldr	r2, [pc, #28]	; (8009324 <vApplicationGetIdleTaskMemory+0x2c>)
 8009308:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	4a06      	ldr	r2, [pc, #24]	; (8009328 <vApplicationGetIdleTaskMemory+0x30>)
 800930e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2280      	movs	r2, #128	; 0x80
 8009314:	601a      	str	r2, [r3, #0]
}
 8009316:	bf00      	nop
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	20003d24 	.word	0x20003d24
 8009328:	20003d80 	.word	0x20003d80

0800932c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	60b9      	str	r1, [r7, #8]
 8009336:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4a07      	ldr	r2, [pc, #28]	; (8009358 <vApplicationGetTimerTaskMemory+0x2c>)
 800933c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	4a06      	ldr	r2, [pc, #24]	; (800935c <vApplicationGetTimerTaskMemory+0x30>)
 8009342:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800934a:	601a      	str	r2, [r3, #0]
}
 800934c:	bf00      	nop
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	20003f80 	.word	0x20003f80
 800935c:	20003fdc 	.word	0x20003fdc

08009360 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d10a      	bne.n	8009384 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009380:	bf00      	nop
 8009382:	e7fe      	b.n	8009382 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8009384:	2320      	movs	r3, #32
 8009386:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	2b20      	cmp	r3, #32
 800938c:	d00a      	beq.n	80093a4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	60fb      	str	r3, [r7, #12]
}
 80093a0:	bf00      	nop
 80093a2:	e7fe      	b.n	80093a2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00a      	beq.n	80093c4 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2200      	movs	r2, #0
 80093b2:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	3304      	adds	r3, #4
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 fa3d 	bl	8009838 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	2201      	movs	r2, #1
 80093c2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80093c4:	697b      	ldr	r3, [r7, #20]
	}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b082      	sub	sp, #8
 80093d2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80093d4:	2020      	movs	r0, #32
 80093d6:	f003 fab7 	bl	800c948 <pvPortMalloc>
 80093da:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d00a      	beq.n	80093f8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	3304      	adds	r3, #4
 80093ec:	4618      	mov	r0, r3
 80093ee:	f000 fa23 	bl	8009838 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80093f8:	687b      	ldr	r3, [r7, #4]
	}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
	...

08009404 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b090      	sub	sp, #64	; 0x40
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800941a:	2300      	movs	r3, #0
 800941c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10a      	bne.n	800943a <xEventGroupWaitBits+0x36>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	623b      	str	r3, [r7, #32]
}
 8009436:	bf00      	nop
 8009438:	e7fe      	b.n	8009438 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00a      	beq.n	800945a <xEventGroupWaitBits+0x56>
	__asm volatile
 8009444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	61fb      	str	r3, [r7, #28]
}
 8009456:	bf00      	nop
 8009458:	e7fe      	b.n	8009458 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10a      	bne.n	8009476 <xEventGroupWaitBits+0x72>
	__asm volatile
 8009460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	61bb      	str	r3, [r7, #24]
}
 8009472:	bf00      	nop
 8009474:	e7fe      	b.n	8009474 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009476:	f002 fab3 	bl	800b9e0 <xTaskGetSchedulerState>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d102      	bne.n	8009486 <xEventGroupWaitBits+0x82>
 8009480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009482:	2b00      	cmp	r3, #0
 8009484:	d101      	bne.n	800948a <xEventGroupWaitBits+0x86>
 8009486:	2301      	movs	r3, #1
 8009488:	e000      	b.n	800948c <xEventGroupWaitBits+0x88>
 800948a:	2300      	movs	r3, #0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	617b      	str	r3, [r7, #20]
}
 80094a2:	bf00      	nop
 80094a4:	e7fe      	b.n	80094a4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80094a6:	f001 fdf9 	bl	800b09c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80094aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	68b9      	ldr	r1, [r7, #8]
 80094b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094b6:	f000 f988 	bl	80097ca <prvTestWaitCondition>
 80094ba:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80094bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00e      	beq.n	80094e0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80094c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d028      	beq.n	8009522 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80094d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	43db      	mvns	r3, r3
 80094d8:	401a      	ands	r2, r3
 80094da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094dc:	601a      	str	r2, [r3, #0]
 80094de:	e020      	b.n	8009522 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80094e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d104      	bne.n	80094f0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80094e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80094ea:	2301      	movs	r3, #1
 80094ec:	633b      	str	r3, [r7, #48]	; 0x30
 80094ee:	e018      	b.n	8009522 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d003      	beq.n	80094fe <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80094f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80094fc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d003      	beq.n	800950c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8009504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009506:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800950a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800950c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800950e:	1d18      	adds	r0, r3, #4
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009514:	4313      	orrs	r3, r2
 8009516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009518:	4619      	mov	r1, r3
 800951a:	f001 ffc9 	bl	800b4b0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800951e:	2300      	movs	r3, #0
 8009520:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8009522:	f001 fdc9 	bl	800b0b8 <xTaskResumeAll>
 8009526:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8009528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800952a:	2b00      	cmp	r3, #0
 800952c:	d031      	beq.n	8009592 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	2b00      	cmp	r3, #0
 8009532:	d107      	bne.n	8009544 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8009534:	4b19      	ldr	r3, [pc, #100]	; (800959c <xEventGroupWaitBits+0x198>)
 8009536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8009544:	f002 fbc2 	bl	800bccc <uxTaskResetEventItemValue>
 8009548:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800954a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800954c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009550:	2b00      	cmp	r3, #0
 8009552:	d11a      	bne.n	800958a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8009554:	f003 f8d6 	bl	800c704 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8009558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	68b9      	ldr	r1, [r7, #8]
 8009562:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009564:	f000 f931 	bl	80097ca <prvTestWaitCondition>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d009      	beq.n	8009582 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d006      	beq.n	8009582 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	43db      	mvns	r3, r3
 800957c:	401a      	ands	r2, r3
 800957e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009580:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8009582:	2301      	movs	r3, #1
 8009584:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8009586:	f003 f8ed 	bl	800c764 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800958a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800958c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009590:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8009592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009594:	4618      	mov	r0, r3
 8009596:	3740      	adds	r7, #64	; 0x40
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	e000ed04 	.word	0xe000ed04

080095a0 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10a      	bne.n	80095ca <xEventGroupClearBits+0x2a>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	60fb      	str	r3, [r7, #12]
}
 80095c6:	bf00      	nop
 80095c8:	e7fe      	b.n	80095c8 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00a      	beq.n	80095ea <xEventGroupClearBits+0x4a>
	__asm volatile
 80095d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	60bb      	str	r3, [r7, #8]
}
 80095e6:	bf00      	nop
 80095e8:	e7fe      	b.n	80095e8 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80095ea:	f003 f88b 	bl	800c704 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	43db      	mvns	r3, r3
 80095fc:	401a      	ands	r2, r3
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8009602:	f003 f8af 	bl	800c764 <vPortExitCritical>

	return uxReturn;
 8009606:	693b      	ldr	r3, [r7, #16]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800961a:	2300      	movs	r3, #0
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	6879      	ldr	r1, [r7, #4]
 8009620:	4804      	ldr	r0, [pc, #16]	; (8009634 <xEventGroupClearBitsFromISR+0x24>)
 8009622:	f002 ff21 	bl	800c468 <xTimerPendFunctionCallFromISR>
 8009626:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8009628:	68fb      	ldr	r3, [r7, #12]
	}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	080097b1 	.word	0x080097b1

08009638 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8009638:	b480      	push	{r7}
 800963a:	b089      	sub	sp, #36	; 0x24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009644:	f3ef 8211 	mrs	r2, BASEPRI
 8009648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	60fa      	str	r2, [r7, #12]
 800965a:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800965c:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800965e:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	617b      	str	r3, [r7, #20]
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009670:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8009672:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8009674:	4618      	mov	r0, r3
 8009676:	3724      	adds	r7, #36	; 0x24
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b08e      	sub	sp, #56	; 0x38
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800968a:	2300      	movs	r3, #0
 800968c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8009692:	2300      	movs	r3, #0
 8009694:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10a      	bne.n	80096b2 <xEventGroupSetBits+0x32>
	__asm volatile
 800969c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a0:	f383 8811 	msr	BASEPRI, r3
 80096a4:	f3bf 8f6f 	isb	sy
 80096a8:	f3bf 8f4f 	dsb	sy
 80096ac:	613b      	str	r3, [r7, #16]
}
 80096ae:	bf00      	nop
 80096b0:	e7fe      	b.n	80096b0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00a      	beq.n	80096d2 <xEventGroupSetBits+0x52>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	60fb      	str	r3, [r7, #12]
}
 80096ce:	bf00      	nop
 80096d0:	e7fe      	b.n	80096d0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80096d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d4:	3304      	adds	r3, #4
 80096d6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80096d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096da:	3308      	adds	r3, #8
 80096dc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80096de:	f001 fcdd 	bl	800b09c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80096e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	431a      	orrs	r2, r3
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80096f4:	e03c      	b.n	8009770 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80096f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80096fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8009702:	2300      	movs	r3, #0
 8009704:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800970c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009714:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800971c:	2b00      	cmp	r3, #0
 800971e:	d108      	bne.n	8009732 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8009720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	4013      	ands	r3, r2
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00b      	beq.n	8009744 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800972c:	2301      	movs	r3, #1
 800972e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009730:	e008      	b.n	8009744 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8009732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	4013      	ands	r3, r2
 800973a:	69ba      	ldr	r2, [r7, #24]
 800973c:	429a      	cmp	r2, r3
 800973e:	d101      	bne.n	8009744 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8009740:	2301      	movs	r3, #1
 8009742:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8009744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009746:	2b00      	cmp	r3, #0
 8009748:	d010      	beq.n	800976c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d003      	beq.n	800975c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8009754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	4313      	orrs	r3, r2
 800975a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009764:	4619      	mov	r1, r3
 8009766:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009768:	f001 ff6e 	bl	800b648 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8009770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009772:	6a3b      	ldr	r3, [r7, #32]
 8009774:	429a      	cmp	r2, r3
 8009776:	d1be      	bne.n	80096f6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	43db      	mvns	r3, r3
 8009780:	401a      	ands	r2, r3
 8009782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009784:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8009786:	f001 fc97 	bl	800b0b8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800978a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978c:	681b      	ldr	r3, [r3, #0]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3738      	adds	r7, #56	; 0x38
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b082      	sub	sp, #8
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7ff ff6c 	bl	8009680 <xEventGroupSetBits>
}
 80097a8:	bf00      	nop
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7ff feef 	bl	80095a0 <xEventGroupClearBits>
}
 80097c2:	bf00      	nop
 80097c4:	3708      	adds	r7, #8
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80097ca:	b480      	push	{r7}
 80097cc:	b087      	sub	sp, #28
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	60f8      	str	r0, [r7, #12]
 80097d2:	60b9      	str	r1, [r7, #8]
 80097d4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80097d6:	2300      	movs	r3, #0
 80097d8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d107      	bne.n	80097f0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	4013      	ands	r3, r2
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00a      	beq.n	8009800 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80097ea:	2301      	movs	r3, #1
 80097ec:	617b      	str	r3, [r7, #20]
 80097ee:	e007      	b.n	8009800 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	4013      	ands	r3, r2
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d101      	bne.n	8009800 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80097fc:	2301      	movs	r3, #1
 80097fe:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8009800:	697b      	ldr	r3, [r7, #20]
}
 8009802:	4618      	mov	r0, r3
 8009804:	371c      	adds	r7, #28
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr
	...

08009810 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	68f9      	ldr	r1, [r7, #12]
 8009822:	4804      	ldr	r0, [pc, #16]	; (8009834 <xEventGroupSetBitsFromISR+0x24>)
 8009824:	f002 fe20 	bl	800c468 <xTimerPendFunctionCallFromISR>
 8009828:	6178      	str	r0, [r7, #20]

		return xReturn;
 800982a:	697b      	ldr	r3, [r7, #20]
	}
 800982c:	4618      	mov	r0, r3
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	08009797 	.word	0x08009797

08009838 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f103 0208 	add.w	r2, r3, #8
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f04f 32ff 	mov.w	r2, #4294967295
 8009850:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f103 0208 	add.w	r2, r3, #8
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f103 0208 	add.w	r2, r3, #8
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009886:	bf00      	nop
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009892:	b480      	push	{r7}
 8009894:	b085      	sub	sp, #20
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	683a      	ldr	r2, [r7, #0]
 80098bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	1c5a      	adds	r2, r3, #1
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	601a      	str	r2, [r3, #0]
}
 80098ce:	bf00      	nop
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr

080098da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098da:	b480      	push	{r7}
 80098dc:	b085      	sub	sp, #20
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f0:	d103      	bne.n	80098fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	60fb      	str	r3, [r7, #12]
 80098f8:	e00c      	b.n	8009914 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	3308      	adds	r3, #8
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	e002      	b.n	8009908 <vListInsert+0x2e>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	429a      	cmp	r2, r3
 8009912:	d2f6      	bcs.n	8009902 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	685a      	ldr	r2, [r3, #4]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	683a      	ldr	r2, [r7, #0]
 8009922:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	683a      	ldr	r2, [r7, #0]
 800992e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	1c5a      	adds	r2, r3, #1
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	601a      	str	r2, [r3, #0]
}
 8009940:	bf00      	nop
 8009942:	3714      	adds	r7, #20
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	6892      	ldr	r2, [r2, #8]
 8009962:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	6852      	ldr	r2, [r2, #4]
 800996c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	429a      	cmp	r2, r3
 8009976:	d103      	bne.n	8009980 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	689a      	ldr	r2, [r3, #8]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	1e5a      	subs	r2, r3, #1
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10a      	bne.n	80099ca <xQueueGenericReset+0x2a>
	__asm volatile
 80099b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	60bb      	str	r3, [r7, #8]
}
 80099c6:	bf00      	nop
 80099c8:	e7fe      	b.n	80099c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80099ca:	f002 fe9b 	bl	800c704 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099d6:	68f9      	ldr	r1, [r7, #12]
 80099d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80099da:	fb01 f303 	mul.w	r3, r1, r3
 80099de:	441a      	add	r2, r3
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099fa:	3b01      	subs	r3, #1
 80099fc:	68f9      	ldr	r1, [r7, #12]
 80099fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009a00:	fb01 f303 	mul.w	r3, r1, r3
 8009a04:	441a      	add	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	22ff      	movs	r2, #255	; 0xff
 8009a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	22ff      	movs	r2, #255	; 0xff
 8009a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d114      	bne.n	8009a4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d01a      	beq.n	8009a5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	3310      	adds	r3, #16
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f001 fda7 	bl	800b580 <xTaskRemoveFromEventList>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d012      	beq.n	8009a5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009a38:	4b0c      	ldr	r3, [pc, #48]	; (8009a6c <xQueueGenericReset+0xcc>)
 8009a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	e009      	b.n	8009a5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3310      	adds	r3, #16
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7ff fef2 	bl	8009838 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	3324      	adds	r3, #36	; 0x24
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7ff feed 	bl	8009838 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a5e:	f002 fe81 	bl	800c764 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009a62:	2301      	movs	r3, #1
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	e000ed04 	.word	0xe000ed04

08009a70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b08e      	sub	sp, #56	; 0x38
 8009a74:	af02      	add	r7, sp, #8
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d10a      	bne.n	8009a9a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a88:	f383 8811 	msr	BASEPRI, r3
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f3bf 8f4f 	dsb	sy
 8009a94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a96:	bf00      	nop
 8009a98:	e7fe      	b.n	8009a98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10a      	bne.n	8009ab6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	f383 8811 	msr	BASEPRI, r3
 8009aa8:	f3bf 8f6f 	isb	sy
 8009aac:	f3bf 8f4f 	dsb	sy
 8009ab0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ab2:	bf00      	nop
 8009ab4:	e7fe      	b.n	8009ab4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d002      	beq.n	8009ac2 <xQueueGenericCreateStatic+0x52>
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <xQueueGenericCreateStatic+0x56>
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e000      	b.n	8009ac8 <xQueueGenericCreateStatic+0x58>
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10a      	bne.n	8009ae2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	623b      	str	r3, [r7, #32]
}
 8009ade:	bf00      	nop
 8009ae0:	e7fe      	b.n	8009ae0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d102      	bne.n	8009aee <xQueueGenericCreateStatic+0x7e>
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d101      	bne.n	8009af2 <xQueueGenericCreateStatic+0x82>
 8009aee:	2301      	movs	r3, #1
 8009af0:	e000      	b.n	8009af4 <xQueueGenericCreateStatic+0x84>
 8009af2:	2300      	movs	r3, #0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d10a      	bne.n	8009b0e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afc:	f383 8811 	msr	BASEPRI, r3
 8009b00:	f3bf 8f6f 	isb	sy
 8009b04:	f3bf 8f4f 	dsb	sy
 8009b08:	61fb      	str	r3, [r7, #28]
}
 8009b0a:	bf00      	nop
 8009b0c:	e7fe      	b.n	8009b0c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b0e:	2350      	movs	r3, #80	; 0x50
 8009b10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	2b50      	cmp	r3, #80	; 0x50
 8009b16:	d00a      	beq.n	8009b2e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1c:	f383 8811 	msr	BASEPRI, r3
 8009b20:	f3bf 8f6f 	isb	sy
 8009b24:	f3bf 8f4f 	dsb	sy
 8009b28:	61bb      	str	r3, [r7, #24]
}
 8009b2a:	bf00      	nop
 8009b2c:	e7fe      	b.n	8009b2c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009b2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00d      	beq.n	8009b56 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	68b9      	ldr	r1, [r7, #8]
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f000 f83f 	bl	8009bd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3730      	adds	r7, #48	; 0x30
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b08a      	sub	sp, #40	; 0x28
 8009b64:	af02      	add	r7, sp, #8
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	613b      	str	r3, [r7, #16]
}
 8009b86:	bf00      	nop
 8009b88:	e7fe      	b.n	8009b88 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	fb02 f303 	mul.w	r3, r2, r3
 8009b92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	3350      	adds	r3, #80	; 0x50
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f002 fed5 	bl	800c948 <pvPortMalloc>
 8009b9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d011      	beq.n	8009bca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	3350      	adds	r3, #80	; 0x50
 8009bae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009bb8:	79fa      	ldrb	r2, [r7, #7]
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	68b9      	ldr	r1, [r7, #8]
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f000 f805 	bl	8009bd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009bca:	69bb      	ldr	r3, [r7, #24]
	}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3720      	adds	r7, #32
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
 8009be0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d103      	bne.n	8009bf0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	69ba      	ldr	r2, [r7, #24]
 8009bec:	601a      	str	r2, [r3, #0]
 8009bee:	e002      	b.n	8009bf6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009bfc:	69bb      	ldr	r3, [r7, #24]
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c02:	2101      	movs	r1, #1
 8009c04:	69b8      	ldr	r0, [r7, #24]
 8009c06:	f7ff fecb 	bl	80099a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	78fa      	ldrb	r2, [r7, #3]
 8009c0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009c12:	bf00      	nop
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b082      	sub	sp, #8
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00e      	beq.n	8009c46 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	2100      	movs	r1, #0
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f90b 	bl	8009e5c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009c46:	bf00      	nop
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b086      	sub	sp, #24
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	4603      	mov	r3, r0
 8009c56:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	617b      	str	r3, [r7, #20]
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009c60:	79fb      	ldrb	r3, [r7, #7]
 8009c62:	461a      	mov	r2, r3
 8009c64:	6939      	ldr	r1, [r7, #16]
 8009c66:	6978      	ldr	r0, [r7, #20]
 8009c68:	f7ff ff7a 	bl	8009b60 <xQueueGenericCreate>
 8009c6c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f7ff ffd3 	bl	8009c1a <prvInitialiseMutex>

		return xNewQueue;
 8009c74:	68fb      	ldr	r3, [r7, #12]
	}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3718      	adds	r7, #24
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b088      	sub	sp, #32
 8009c82:	af02      	add	r7, sp, #8
 8009c84:	4603      	mov	r3, r0
 8009c86:	6039      	str	r1, [r7, #0]
 8009c88:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	617b      	str	r3, [r7, #20]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009c92:	79fb      	ldrb	r3, [r7, #7]
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	6939      	ldr	r1, [r7, #16]
 8009c9c:	6978      	ldr	r0, [r7, #20]
 8009c9e:	f7ff fee7 	bl	8009a70 <xQueueGenericCreateStatic>
 8009ca2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009ca4:	68f8      	ldr	r0, [r7, #12]
 8009ca6:	f7ff ffb8 	bl	8009c1a <prvInitialiseMutex>

		return xNewQueue;
 8009caa:	68fb      	ldr	r3, [r7, #12]
	}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3718      	adds	r7, #24
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009cb4:	b590      	push	{r4, r7, lr}
 8009cb6:	b087      	sub	sp, #28
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10a      	bne.n	8009cdc <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	60fb      	str	r3, [r7, #12]
}
 8009cd8:	bf00      	nop
 8009cda:	e7fe      	b.n	8009cda <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	689c      	ldr	r4, [r3, #8]
 8009ce0:	f001 fe6e 	bl	800b9c0 <xTaskGetCurrentTaskHandle>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	429c      	cmp	r4, r3
 8009ce8:	d111      	bne.n	8009d0e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	1e5a      	subs	r2, r3, #1
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d105      	bne.n	8009d08 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	2200      	movs	r2, #0
 8009d00:	2100      	movs	r1, #0
 8009d02:	6938      	ldr	r0, [r7, #16]
 8009d04:	f000 f8aa 	bl	8009e5c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	617b      	str	r3, [r7, #20]
 8009d0c:	e001      	b.n	8009d12 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009d12:	697b      	ldr	r3, [r7, #20]
	}
 8009d14:	4618      	mov	r0, r3
 8009d16:	371c      	adds	r7, #28
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd90      	pop	{r4, r7, pc}

08009d1c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009d1c:	b590      	push	{r4, r7, lr}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10a      	bne.n	8009d46 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	60fb      	str	r3, [r7, #12]
}
 8009d42:	bf00      	nop
 8009d44:	e7fe      	b.n	8009d44 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	689c      	ldr	r4, [r3, #8]
 8009d4a:	f001 fe39 	bl	800b9c0 <xTaskGetCurrentTaskHandle>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	429c      	cmp	r4, r3
 8009d52:	d107      	bne.n	8009d64 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	1c5a      	adds	r2, r3, #1
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	617b      	str	r3, [r7, #20]
 8009d62:	e00c      	b.n	8009d7e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009d64:	6839      	ldr	r1, [r7, #0]
 8009d66:	6938      	ldr	r0, [r7, #16]
 8009d68:	f000 fb7e 	bl	800a468 <xQueueSemaphoreTake>
 8009d6c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d004      	beq.n	8009d7e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	1c5a      	adds	r2, r3, #1
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009d7e:	697b      	ldr	r3, [r7, #20]
	}
 8009d80:	4618      	mov	r0, r3
 8009d82:	371c      	adds	r7, #28
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd90      	pop	{r4, r7, pc}

08009d88 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08a      	sub	sp, #40	; 0x28
 8009d8c:	af02      	add	r7, sp, #8
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10a      	bne.n	8009db0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d9e:	f383 8811 	msr	BASEPRI, r3
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	f3bf 8f4f 	dsb	sy
 8009daa:	61bb      	str	r3, [r7, #24]
}
 8009dac:	bf00      	nop
 8009dae:	e7fe      	b.n	8009dae <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d90a      	bls.n	8009dce <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	617b      	str	r3, [r7, #20]
}
 8009dca:	bf00      	nop
 8009dcc:	e7fe      	b.n	8009dcc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009dce:	2302      	movs	r3, #2
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f7ff fe49 	bl	8009a70 <xQueueGenericCreateStatic>
 8009dde:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009dec:	69fb      	ldr	r3, [r7, #28]
	}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3720      	adds	r7, #32
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b086      	sub	sp, #24
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
 8009dfe:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10a      	bne.n	8009e1c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0a:	f383 8811 	msr	BASEPRI, r3
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f3bf 8f4f 	dsb	sy
 8009e16:	613b      	str	r3, [r7, #16]
}
 8009e18:	bf00      	nop
 8009e1a:	e7fe      	b.n	8009e1a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d90a      	bls.n	8009e3a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	60fb      	str	r3, [r7, #12]
}
 8009e36:	bf00      	nop
 8009e38:	e7fe      	b.n	8009e38 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f7ff fe8e 	bl	8009b60 <xQueueGenericCreate>
 8009e44:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009e52:	697b      	ldr	r3, [r7, #20]
	}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3718      	adds	r7, #24
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b08e      	sub	sp, #56	; 0x38
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
 8009e68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10a      	bne.n	8009e8e <xQueueGenericSend+0x32>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e8a:	bf00      	nop
 8009e8c:	e7fe      	b.n	8009e8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d103      	bne.n	8009e9c <xQueueGenericSend+0x40>
 8009e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d101      	bne.n	8009ea0 <xQueueGenericSend+0x44>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e000      	b.n	8009ea2 <xQueueGenericSend+0x46>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d10a      	bne.n	8009ebc <xQueueGenericSend+0x60>
	__asm volatile
 8009ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eaa:	f383 8811 	msr	BASEPRI, r3
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009eb8:	bf00      	nop
 8009eba:	e7fe      	b.n	8009eba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d103      	bne.n	8009eca <xQueueGenericSend+0x6e>
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d101      	bne.n	8009ece <xQueueGenericSend+0x72>
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e000      	b.n	8009ed0 <xQueueGenericSend+0x74>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10a      	bne.n	8009eea <xQueueGenericSend+0x8e>
	__asm volatile
 8009ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed8:	f383 8811 	msr	BASEPRI, r3
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	623b      	str	r3, [r7, #32]
}
 8009ee6:	bf00      	nop
 8009ee8:	e7fe      	b.n	8009ee8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009eea:	f001 fd79 	bl	800b9e0 <xTaskGetSchedulerState>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d102      	bne.n	8009efa <xQueueGenericSend+0x9e>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <xQueueGenericSend+0xa2>
 8009efa:	2301      	movs	r3, #1
 8009efc:	e000      	b.n	8009f00 <xQueueGenericSend+0xa4>
 8009efe:	2300      	movs	r3, #0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d10a      	bne.n	8009f1a <xQueueGenericSend+0xbe>
	__asm volatile
 8009f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f08:	f383 8811 	msr	BASEPRI, r3
 8009f0c:	f3bf 8f6f 	isb	sy
 8009f10:	f3bf 8f4f 	dsb	sy
 8009f14:	61fb      	str	r3, [r7, #28]
}
 8009f16:	bf00      	nop
 8009f18:	e7fe      	b.n	8009f18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f1a:	f002 fbf3 	bl	800c704 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d302      	bcc.n	8009f30 <xQueueGenericSend+0xd4>
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d129      	bne.n	8009f84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f30:	683a      	ldr	r2, [r7, #0]
 8009f32:	68b9      	ldr	r1, [r7, #8]
 8009f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f36:	f000 fc5e 	bl	800a7f6 <prvCopyDataToQueue>
 8009f3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d010      	beq.n	8009f66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f46:	3324      	adds	r3, #36	; 0x24
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f001 fb19 	bl	800b580 <xTaskRemoveFromEventList>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d013      	beq.n	8009f7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f54:	4b3f      	ldr	r3, [pc, #252]	; (800a054 <xQueueGenericSend+0x1f8>)
 8009f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f5a:	601a      	str	r2, [r3, #0]
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	e00a      	b.n	8009f7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d007      	beq.n	8009f7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f6c:	4b39      	ldr	r3, [pc, #228]	; (800a054 <xQueueGenericSend+0x1f8>)
 8009f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	f3bf 8f4f 	dsb	sy
 8009f78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f7c:	f002 fbf2 	bl	800c764 <vPortExitCritical>
				return pdPASS;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e063      	b.n	800a04c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d103      	bne.n	8009f92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f8a:	f002 fbeb 	bl	800c764 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	e05c      	b.n	800a04c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d106      	bne.n	8009fa6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f98:	f107 0314 	add.w	r3, r7, #20
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f001 fbb5 	bl	800b70c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009fa6:	f002 fbdd 	bl	800c764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009faa:	f001 f877 	bl	800b09c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fae:	f002 fba9 	bl	800c704 <vPortEnterCritical>
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fb8:	b25b      	sxtb	r3, r3
 8009fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fbe:	d103      	bne.n	8009fc8 <xQueueGenericSend+0x16c>
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fce:	b25b      	sxtb	r3, r3
 8009fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd4:	d103      	bne.n	8009fde <xQueueGenericSend+0x182>
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fde:	f002 fbc1 	bl	800c764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fe2:	1d3a      	adds	r2, r7, #4
 8009fe4:	f107 0314 	add.w	r3, r7, #20
 8009fe8:	4611      	mov	r1, r2
 8009fea:	4618      	mov	r0, r3
 8009fec:	f001 fba4 	bl	800b738 <xTaskCheckForTimeOut>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d124      	bne.n	800a040 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009ff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ff8:	f000 fcf5 	bl	800a9e6 <prvIsQueueFull>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d018      	beq.n	800a034 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a004:	3310      	adds	r3, #16
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	4611      	mov	r1, r2
 800a00a:	4618      	mov	r0, r3
 800a00c:	f001 fa2c 	bl	800b468 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a012:	f000 fc80 	bl	800a916 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a016:	f001 f84f 	bl	800b0b8 <xTaskResumeAll>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f47f af7c 	bne.w	8009f1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a022:	4b0c      	ldr	r3, [pc, #48]	; (800a054 <xQueueGenericSend+0x1f8>)
 800a024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a028:	601a      	str	r2, [r3, #0]
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	e772      	b.n	8009f1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a036:	f000 fc6e 	bl	800a916 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a03a:	f001 f83d 	bl	800b0b8 <xTaskResumeAll>
 800a03e:	e76c      	b.n	8009f1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a042:	f000 fc68 	bl	800a916 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a046:	f001 f837 	bl	800b0b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a04a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3738      	adds	r7, #56	; 0x38
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	e000ed04 	.word	0xe000ed04

0800a058 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b090      	sub	sp, #64	; 0x40
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10a      	bne.n	800a086 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a082:	bf00      	nop
 800a084:	e7fe      	b.n	800a084 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d103      	bne.n	800a094 <xQueueGenericSendFromISR+0x3c>
 800a08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <xQueueGenericSendFromISR+0x40>
 800a094:	2301      	movs	r3, #1
 800a096:	e000      	b.n	800a09a <xQueueGenericSendFromISR+0x42>
 800a098:	2300      	movs	r3, #0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10a      	bne.n	800a0b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a2:	f383 8811 	msr	BASEPRI, r3
 800a0a6:	f3bf 8f6f 	isb	sy
 800a0aa:	f3bf 8f4f 	dsb	sy
 800a0ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0b0:	bf00      	nop
 800a0b2:	e7fe      	b.n	800a0b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d103      	bne.n	800a0c2 <xQueueGenericSendFromISR+0x6a>
 800a0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d101      	bne.n	800a0c6 <xQueueGenericSendFromISR+0x6e>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e000      	b.n	800a0c8 <xQueueGenericSendFromISR+0x70>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10a      	bne.n	800a0e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	623b      	str	r3, [r7, #32]
}
 800a0de:	bf00      	nop
 800a0e0:	e7fe      	b.n	800a0e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0e2:	f002 fbf1 	bl	800c8c8 <vPortValidateInterruptPriority>
	__asm volatile
 800a0e6:	f3ef 8211 	mrs	r2, BASEPRI
 800a0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ee:	f383 8811 	msr	BASEPRI, r3
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	f3bf 8f4f 	dsb	sy
 800a0fa:	61fa      	str	r2, [r7, #28]
 800a0fc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a0fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a100:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d302      	bcc.n	800a114 <xQueueGenericSendFromISR+0xbc>
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	2b02      	cmp	r3, #2
 800a112:	d12f      	bne.n	800a174 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a116:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a122:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a124:	683a      	ldr	r2, [r7, #0]
 800a126:	68b9      	ldr	r1, [r7, #8]
 800a128:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a12a:	f000 fb64 	bl	800a7f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a12e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a136:	d112      	bne.n	800a15e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d016      	beq.n	800a16e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a142:	3324      	adds	r3, #36	; 0x24
 800a144:	4618      	mov	r0, r3
 800a146:	f001 fa1b 	bl	800b580 <xTaskRemoveFromEventList>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00e      	beq.n	800a16e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00b      	beq.n	800a16e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2201      	movs	r2, #1
 800a15a:	601a      	str	r2, [r3, #0]
 800a15c:	e007      	b.n	800a16e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a15e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a162:	3301      	adds	r3, #1
 800a164:	b2db      	uxtb	r3, r3
 800a166:	b25a      	sxtb	r2, r3
 800a168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a16e:	2301      	movs	r3, #1
 800a170:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a172:	e001      	b.n	800a178 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a174:	2300      	movs	r3, #0
 800a176:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a17a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	f383 8811 	msr	BASEPRI, r3
}
 800a182:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a186:	4618      	mov	r0, r3
 800a188:	3740      	adds	r7, #64	; 0x40
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b08e      	sub	sp, #56	; 0x38
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d10a      	bne.n	800a1b8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	623b      	str	r3, [r7, #32]
}
 800a1b4:	bf00      	nop
 800a1b6:	e7fe      	b.n	800a1b6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00a      	beq.n	800a1d6 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	61fb      	str	r3, [r7, #28]
}
 800a1d2:	bf00      	nop
 800a1d4:	e7fe      	b.n	800a1d4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d103      	bne.n	800a1e6 <xQueueGiveFromISR+0x58>
 800a1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <xQueueGiveFromISR+0x5c>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e000      	b.n	800a1ec <xQueueGiveFromISR+0x5e>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10a      	bne.n	800a206 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	61bb      	str	r3, [r7, #24]
}
 800a202:	bf00      	nop
 800a204:	e7fe      	b.n	800a204 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a206:	f002 fb5f 	bl	800c8c8 <vPortValidateInterruptPriority>
	__asm volatile
 800a20a:	f3ef 8211 	mrs	r2, BASEPRI
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	617a      	str	r2, [r7, #20]
 800a220:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a222:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a224:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a232:	429a      	cmp	r2, r3
 800a234:	d22b      	bcs.n	800a28e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a23c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a242:	1c5a      	adds	r2, r3, #1
 800a244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a246:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a248:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a24c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a250:	d112      	bne.n	800a278 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a256:	2b00      	cmp	r3, #0
 800a258:	d016      	beq.n	800a288 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25c:	3324      	adds	r3, #36	; 0x24
 800a25e:	4618      	mov	r0, r3
 800a260:	f001 f98e 	bl	800b580 <xTaskRemoveFromEventList>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00e      	beq.n	800a288 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d00b      	beq.n	800a288 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	2201      	movs	r2, #1
 800a274:	601a      	str	r2, [r3, #0]
 800a276:	e007      	b.n	800a288 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a27c:	3301      	adds	r3, #1
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	b25a      	sxtb	r2, r3
 800a282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a288:	2301      	movs	r3, #1
 800a28a:	637b      	str	r3, [r7, #52]	; 0x34
 800a28c:	e001      	b.n	800a292 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a28e:	2300      	movs	r3, #0
 800a290:	637b      	str	r3, [r7, #52]	; 0x34
 800a292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a294:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f383 8811 	msr	BASEPRI, r3
}
 800a29c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3738      	adds	r7, #56	; 0x38
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b08c      	sub	sp, #48	; 0x30
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d10a      	bne.n	800a2d8 <xQueueReceive+0x30>
	__asm volatile
 800a2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	623b      	str	r3, [r7, #32]
}
 800a2d4:	bf00      	nop
 800a2d6:	e7fe      	b.n	800a2d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d103      	bne.n	800a2e6 <xQueueReceive+0x3e>
 800a2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d101      	bne.n	800a2ea <xQueueReceive+0x42>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e000      	b.n	800a2ec <xQueueReceive+0x44>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10a      	bne.n	800a306 <xQueueReceive+0x5e>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	61fb      	str	r3, [r7, #28]
}
 800a302:	bf00      	nop
 800a304:	e7fe      	b.n	800a304 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a306:	f001 fb6b 	bl	800b9e0 <xTaskGetSchedulerState>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d102      	bne.n	800a316 <xQueueReceive+0x6e>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d101      	bne.n	800a31a <xQueueReceive+0x72>
 800a316:	2301      	movs	r3, #1
 800a318:	e000      	b.n	800a31c <xQueueReceive+0x74>
 800a31a:	2300      	movs	r3, #0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10a      	bne.n	800a336 <xQueueReceive+0x8e>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	61bb      	str	r3, [r7, #24]
}
 800a332:	bf00      	nop
 800a334:	e7fe      	b.n	800a334 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a336:	f002 f9e5 	bl	800c704 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a33e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	2b00      	cmp	r3, #0
 800a344:	d01f      	beq.n	800a386 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a346:	68b9      	ldr	r1, [r7, #8]
 800a348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a34a:	f000 fabe 	bl	800a8ca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a350:	1e5a      	subs	r2, r3, #1
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00f      	beq.n	800a37e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a360:	3310      	adds	r3, #16
 800a362:	4618      	mov	r0, r3
 800a364:	f001 f90c 	bl	800b580 <xTaskRemoveFromEventList>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d007      	beq.n	800a37e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a36e:	4b3d      	ldr	r3, [pc, #244]	; (800a464 <xQueueReceive+0x1bc>)
 800a370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a374:	601a      	str	r2, [r3, #0]
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a37e:	f002 f9f1 	bl	800c764 <vPortExitCritical>
				return pdPASS;
 800a382:	2301      	movs	r3, #1
 800a384:	e069      	b.n	800a45a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d103      	bne.n	800a394 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a38c:	f002 f9ea 	bl	800c764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a390:	2300      	movs	r3, #0
 800a392:	e062      	b.n	800a45a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a396:	2b00      	cmp	r3, #0
 800a398:	d106      	bne.n	800a3a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a39a:	f107 0310 	add.w	r3, r7, #16
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f001 f9b4 	bl	800b70c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3a8:	f002 f9dc 	bl	800c764 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3ac:	f000 fe76 	bl	800b09c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3b0:	f002 f9a8 	bl	800c704 <vPortEnterCritical>
 800a3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3ba:	b25b      	sxtb	r3, r3
 800a3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c0:	d103      	bne.n	800a3ca <xQueueReceive+0x122>
 800a3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3d0:	b25b      	sxtb	r3, r3
 800a3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d6:	d103      	bne.n	800a3e0 <xQueueReceive+0x138>
 800a3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3e0:	f002 f9c0 	bl	800c764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3e4:	1d3a      	adds	r2, r7, #4
 800a3e6:	f107 0310 	add.w	r3, r7, #16
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f001 f9a3 	bl	800b738 <xTaskCheckForTimeOut>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d123      	bne.n	800a440 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3fa:	f000 fade 	bl	800a9ba <prvIsQueueEmpty>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d017      	beq.n	800a434 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a406:	3324      	adds	r3, #36	; 0x24
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	4611      	mov	r1, r2
 800a40c:	4618      	mov	r0, r3
 800a40e:	f001 f82b 	bl	800b468 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a414:	f000 fa7f 	bl	800a916 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a418:	f000 fe4e 	bl	800b0b8 <xTaskResumeAll>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d189      	bne.n	800a336 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a422:	4b10      	ldr	r3, [pc, #64]	; (800a464 <xQueueReceive+0x1bc>)
 800a424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a428:	601a      	str	r2, [r3, #0]
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	f3bf 8f6f 	isb	sy
 800a432:	e780      	b.n	800a336 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a434:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a436:	f000 fa6e 	bl	800a916 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a43a:	f000 fe3d 	bl	800b0b8 <xTaskResumeAll>
 800a43e:	e77a      	b.n	800a336 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a442:	f000 fa68 	bl	800a916 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a446:	f000 fe37 	bl	800b0b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a44a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a44c:	f000 fab5 	bl	800a9ba <prvIsQueueEmpty>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	f43f af6f 	beq.w	800a336 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a458:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3730      	adds	r7, #48	; 0x30
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	e000ed04 	.word	0xe000ed04

0800a468 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b08e      	sub	sp, #56	; 0x38
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a472:	2300      	movs	r3, #0
 800a474:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a47a:	2300      	movs	r3, #0
 800a47c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10a      	bne.n	800a49a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	623b      	str	r3, [r7, #32]
}
 800a496:	bf00      	nop
 800a498:	e7fe      	b.n	800a498 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00a      	beq.n	800a4b8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	61fb      	str	r3, [r7, #28]
}
 800a4b4:	bf00      	nop
 800a4b6:	e7fe      	b.n	800a4b6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4b8:	f001 fa92 	bl	800b9e0 <xTaskGetSchedulerState>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d102      	bne.n	800a4c8 <xQueueSemaphoreTake+0x60>
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d101      	bne.n	800a4cc <xQueueSemaphoreTake+0x64>
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	e000      	b.n	800a4ce <xQueueSemaphoreTake+0x66>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d10a      	bne.n	800a4e8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d6:	f383 8811 	msr	BASEPRI, r3
 800a4da:	f3bf 8f6f 	isb	sy
 800a4de:	f3bf 8f4f 	dsb	sy
 800a4e2:	61bb      	str	r3, [r7, #24]
}
 800a4e4:	bf00      	nop
 800a4e6:	e7fe      	b.n	800a4e6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4e8:	f002 f90c 	bl	800c704 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d024      	beq.n	800a542 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	1e5a      	subs	r2, r3, #1
 800a4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d104      	bne.n	800a512 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a508:	f001 fbf8 	bl	800bcfc <pvTaskIncrementMutexHeldCount>
 800a50c:	4602      	mov	r2, r0
 800a50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a510:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00f      	beq.n	800a53a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51c:	3310      	adds	r3, #16
 800a51e:	4618      	mov	r0, r3
 800a520:	f001 f82e 	bl	800b580 <xTaskRemoveFromEventList>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d007      	beq.n	800a53a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a52a:	4b54      	ldr	r3, [pc, #336]	; (800a67c <xQueueSemaphoreTake+0x214>)
 800a52c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a530:	601a      	str	r2, [r3, #0]
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a53a:	f002 f913 	bl	800c764 <vPortExitCritical>
				return pdPASS;
 800a53e:	2301      	movs	r3, #1
 800a540:	e097      	b.n	800a672 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d111      	bne.n	800a56c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00a      	beq.n	800a564 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a552:	f383 8811 	msr	BASEPRI, r3
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	617b      	str	r3, [r7, #20]
}
 800a560:	bf00      	nop
 800a562:	e7fe      	b.n	800a562 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a564:	f002 f8fe 	bl	800c764 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a568:	2300      	movs	r3, #0
 800a56a:	e082      	b.n	800a672 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d106      	bne.n	800a580 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a572:	f107 030c 	add.w	r3, r7, #12
 800a576:	4618      	mov	r0, r3
 800a578:	f001 f8c8 	bl	800b70c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a57c:	2301      	movs	r3, #1
 800a57e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a580:	f002 f8f0 	bl	800c764 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a584:	f000 fd8a 	bl	800b09c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a588:	f002 f8bc 	bl	800c704 <vPortEnterCritical>
 800a58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a592:	b25b      	sxtb	r3, r3
 800a594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a598:	d103      	bne.n	800a5a2 <xQueueSemaphoreTake+0x13a>
 800a59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5a8:	b25b      	sxtb	r3, r3
 800a5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ae:	d103      	bne.n	800a5b8 <xQueueSemaphoreTake+0x150>
 800a5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5b8:	f002 f8d4 	bl	800c764 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5bc:	463a      	mov	r2, r7
 800a5be:	f107 030c 	add.w	r3, r7, #12
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f001 f8b7 	bl	800b738 <xTaskCheckForTimeOut>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d132      	bne.n	800a636 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5d2:	f000 f9f2 	bl	800a9ba <prvIsQueueEmpty>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d026      	beq.n	800a62a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d109      	bne.n	800a5f8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a5e4:	f002 f88e 	bl	800c704 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f001 fa15 	bl	800ba1c <xTaskPriorityInherit>
 800a5f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a5f4:	f002 f8b6 	bl	800c764 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fa:	3324      	adds	r3, #36	; 0x24
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	4611      	mov	r1, r2
 800a600:	4618      	mov	r0, r3
 800a602:	f000 ff31 	bl	800b468 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a606:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a608:	f000 f985 	bl	800a916 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a60c:	f000 fd54 	bl	800b0b8 <xTaskResumeAll>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	f47f af68 	bne.w	800a4e8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a618:	4b18      	ldr	r3, [pc, #96]	; (800a67c <xQueueSemaphoreTake+0x214>)
 800a61a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a61e:	601a      	str	r2, [r3, #0]
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	e75e      	b.n	800a4e8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a62a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a62c:	f000 f973 	bl	800a916 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a630:	f000 fd42 	bl	800b0b8 <xTaskResumeAll>
 800a634:	e758      	b.n	800a4e8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a638:	f000 f96d 	bl	800a916 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a63c:	f000 fd3c 	bl	800b0b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a642:	f000 f9ba 	bl	800a9ba <prvIsQueueEmpty>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f43f af4d 	beq.w	800a4e8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00d      	beq.n	800a670 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a654:	f002 f856 	bl	800c704 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a65a:	f000 f8b4 	bl	800a7c6 <prvGetDisinheritPriorityAfterTimeout>
 800a65e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a666:	4618      	mov	r0, r3
 800a668:	f001 faae 	bl	800bbc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a66c:	f002 f87a 	bl	800c764 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a670:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a672:	4618      	mov	r0, r3
 800a674:	3738      	adds	r7, #56	; 0x38
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	e000ed04 	.word	0xe000ed04

0800a680 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b08e      	sub	sp, #56	; 0x38
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10a      	bne.n	800a6ac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	623b      	str	r3, [r7, #32]
}
 800a6a8:	bf00      	nop
 800a6aa:	e7fe      	b.n	800a6aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d103      	bne.n	800a6ba <xQueueReceiveFromISR+0x3a>
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d101      	bne.n	800a6be <xQueueReceiveFromISR+0x3e>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e000      	b.n	800a6c0 <xQueueReceiveFromISR+0x40>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10a      	bne.n	800a6da <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	61fb      	str	r3, [r7, #28]
}
 800a6d6:	bf00      	nop
 800a6d8:	e7fe      	b.n	800a6d8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6da:	f002 f8f5 	bl	800c8c8 <vPortValidateInterruptPriority>
	__asm volatile
 800a6de:	f3ef 8211 	mrs	r2, BASEPRI
 800a6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	61ba      	str	r2, [r7, #24]
 800a6f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a6f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a702:	2b00      	cmp	r3, #0
 800a704:	d02f      	beq.n	800a766 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a70c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a710:	68b9      	ldr	r1, [r7, #8]
 800a712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a714:	f000 f8d9 	bl	800a8ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	1e5a      	subs	r2, r3, #1
 800a71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a71e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a720:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a728:	d112      	bne.n	800a750 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d016      	beq.n	800a760 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a734:	3310      	adds	r3, #16
 800a736:	4618      	mov	r0, r3
 800a738:	f000 ff22 	bl	800b580 <xTaskRemoveFromEventList>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00e      	beq.n	800a760 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d00b      	beq.n	800a760 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	e007      	b.n	800a760 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a754:	3301      	adds	r3, #1
 800a756:	b2db      	uxtb	r3, r3
 800a758:	b25a      	sxtb	r2, r3
 800a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a760:	2301      	movs	r3, #1
 800a762:	637b      	str	r3, [r7, #52]	; 0x34
 800a764:	e001      	b.n	800a76a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a766:	2300      	movs	r3, #0
 800a768:	637b      	str	r3, [r7, #52]	; 0x34
 800a76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a76c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	f383 8811 	msr	BASEPRI, r3
}
 800a774:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3738      	adds	r7, #56	; 0x38
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d10a      	bne.n	800a7a8 <vQueueDelete+0x28>
	__asm volatile
 800a792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a796:	f383 8811 	msr	BASEPRI, r3
 800a79a:	f3bf 8f6f 	isb	sy
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	60bb      	str	r3, [r7, #8]
}
 800a7a4:	bf00      	nop
 800a7a6:	e7fe      	b.n	800a7a6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f000 f95f 	bl	800aa6c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d102      	bne.n	800a7be <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f002 f991 	bl	800cae0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a7be:	bf00      	nop
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b085      	sub	sp, #20
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d006      	beq.n	800a7e4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a7e0:	60fb      	str	r3, [r7, #12]
 800a7e2:	e001      	b.n	800a7e8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
	}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3714      	adds	r7, #20
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b086      	sub	sp, #24
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	60f8      	str	r0, [r7, #12]
 800a7fe:	60b9      	str	r1, [r7, #8]
 800a800:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a802:	2300      	movs	r3, #0
 800a804:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10d      	bne.n	800a830 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d14d      	bne.n	800a8b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	4618      	mov	r0, r3
 800a822:	f001 f963 	bl	800baec <xTaskPriorityDisinherit>
 800a826:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	609a      	str	r2, [r3, #8]
 800a82e:	e043      	b.n	800a8b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d119      	bne.n	800a86a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6858      	ldr	r0, [r3, #4]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83e:	461a      	mov	r2, r3
 800a840:	68b9      	ldr	r1, [r7, #8]
 800a842:	f002 fa8f 	bl	800cd64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	685a      	ldr	r2, [r3, #4]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a84e:	441a      	add	r2, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	685a      	ldr	r2, [r3, #4]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d32b      	bcc.n	800a8b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	605a      	str	r2, [r3, #4]
 800a868:	e026      	b.n	800a8b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	68d8      	ldr	r0, [r3, #12]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a872:	461a      	mov	r2, r3
 800a874:	68b9      	ldr	r1, [r7, #8]
 800a876:	f002 fa75 	bl	800cd64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	68da      	ldr	r2, [r3, #12]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a882:	425b      	negs	r3, r3
 800a884:	441a      	add	r2, r3
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	68da      	ldr	r2, [r3, #12]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	429a      	cmp	r2, r3
 800a894:	d207      	bcs.n	800a8a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	689a      	ldr	r2, [r3, #8]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a89e:	425b      	negs	r3, r3
 800a8a0:	441a      	add	r2, r3
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2b02      	cmp	r3, #2
 800a8aa:	d105      	bne.n	800a8b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d002      	beq.n	800a8b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	1c5a      	adds	r2, r3, #1
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a8c0:	697b      	ldr	r3, [r7, #20]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3718      	adds	r7, #24
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b082      	sub	sp, #8
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d018      	beq.n	800a90e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	68da      	ldr	r2, [r3, #12]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e4:	441a      	add	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	68da      	ldr	r2, [r3, #12]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d303      	bcc.n	800a8fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	68d9      	ldr	r1, [r3, #12]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a906:	461a      	mov	r2, r3
 800a908:	6838      	ldr	r0, [r7, #0]
 800a90a:	f002 fa2b 	bl	800cd64 <memcpy>
	}
}
 800a90e:	bf00      	nop
 800a910:	3708      	adds	r7, #8
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b084      	sub	sp, #16
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a91e:	f001 fef1 	bl	800c704 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a928:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a92a:	e011      	b.n	800a950 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a930:	2b00      	cmp	r3, #0
 800a932:	d012      	beq.n	800a95a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	3324      	adds	r3, #36	; 0x24
 800a938:	4618      	mov	r0, r3
 800a93a:	f000 fe21 	bl	800b580 <xTaskRemoveFromEventList>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d001      	beq.n	800a948 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a944:	f000 ff5a 	bl	800b7fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a948:	7bfb      	ldrb	r3, [r7, #15]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a954:	2b00      	cmp	r3, #0
 800a956:	dce9      	bgt.n	800a92c <prvUnlockQueue+0x16>
 800a958:	e000      	b.n	800a95c <prvUnlockQueue+0x46>
					break;
 800a95a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	22ff      	movs	r2, #255	; 0xff
 800a960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a964:	f001 fefe 	bl	800c764 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a968:	f001 fecc 	bl	800c704 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a972:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a974:	e011      	b.n	800a99a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d012      	beq.n	800a9a4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	3310      	adds	r3, #16
 800a982:	4618      	mov	r0, r3
 800a984:	f000 fdfc 	bl	800b580 <xTaskRemoveFromEventList>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a98e:	f000 ff35 	bl	800b7fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a992:	7bbb      	ldrb	r3, [r7, #14]
 800a994:	3b01      	subs	r3, #1
 800a996:	b2db      	uxtb	r3, r3
 800a998:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a99a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	dce9      	bgt.n	800a976 <prvUnlockQueue+0x60>
 800a9a2:	e000      	b.n	800a9a6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a9a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	22ff      	movs	r2, #255	; 0xff
 800a9aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a9ae:	f001 fed9 	bl	800c764 <vPortExitCritical>
}
 800a9b2:	bf00      	nop
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b084      	sub	sp, #16
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9c2:	f001 fe9f 	bl	800c704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d102      	bne.n	800a9d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	60fb      	str	r3, [r7, #12]
 800a9d2:	e001      	b.n	800a9d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9d8:	f001 fec4 	bl	800c764 <vPortExitCritical>

	return xReturn;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b084      	sub	sp, #16
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9ee:	f001 fe89 	bl	800c704 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d102      	bne.n	800aa04 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	60fb      	str	r3, [r7, #12]
 800aa02:	e001      	b.n	800aa08 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa04:	2300      	movs	r3, #0
 800aa06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa08:	f001 feac 	bl	800c764 <vPortExitCritical>

	return xReturn;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
	...

0800aa18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa22:	2300      	movs	r3, #0
 800aa24:	60fb      	str	r3, [r7, #12]
 800aa26:	e014      	b.n	800aa52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa28:	4a0f      	ldr	r2, [pc, #60]	; (800aa68 <vQueueAddToRegistry+0x50>)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10b      	bne.n	800aa4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa34:	490c      	ldr	r1, [pc, #48]	; (800aa68 <vQueueAddToRegistry+0x50>)
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa3e:	4a0a      	ldr	r2, [pc, #40]	; (800aa68 <vQueueAddToRegistry+0x50>)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	00db      	lsls	r3, r3, #3
 800aa44:	4413      	add	r3, r2
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa4a:	e006      	b.n	800aa5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	60fb      	str	r3, [r7, #12]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2b07      	cmp	r3, #7
 800aa56:	d9e7      	bls.n	800aa28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa58:	bf00      	nop
 800aa5a:	bf00      	nop
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	200043dc 	.word	0x200043dc

0800aa6c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa74:	2300      	movs	r3, #0
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	e016      	b.n	800aaa8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800aa7a:	4a10      	ldr	r2, [pc, #64]	; (800aabc <vQueueUnregisterQueue+0x50>)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	00db      	lsls	r3, r3, #3
 800aa80:	4413      	add	r3, r2
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d10b      	bne.n	800aaa2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aa8a:	4a0c      	ldr	r2, [pc, #48]	; (800aabc <vQueueUnregisterQueue+0x50>)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2100      	movs	r1, #0
 800aa90:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aa94:	4a09      	ldr	r2, [pc, #36]	; (800aabc <vQueueUnregisterQueue+0x50>)
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	00db      	lsls	r3, r3, #3
 800aa9a:	4413      	add	r3, r2
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	605a      	str	r2, [r3, #4]
				break;
 800aaa0:	e006      	b.n	800aab0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	60fb      	str	r3, [r7, #12]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2b07      	cmp	r3, #7
 800aaac:	d9e5      	bls.n	800aa7a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aaae:	bf00      	nop
 800aab0:	bf00      	nop
 800aab2:	3714      	adds	r7, #20
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	200043dc 	.word	0x200043dc

0800aac0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aad0:	f001 fe18 	bl	800c704 <vPortEnterCritical>
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aada:	b25b      	sxtb	r3, r3
 800aadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aae0:	d103      	bne.n	800aaea <vQueueWaitForMessageRestricted+0x2a>
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaf0:	b25b      	sxtb	r3, r3
 800aaf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf6:	d103      	bne.n	800ab00 <vQueueWaitForMessageRestricted+0x40>
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab00:	f001 fe30 	bl	800c764 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d106      	bne.n	800ab1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	3324      	adds	r3, #36	; 0x24
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	68b9      	ldr	r1, [r7, #8]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f000 fd07 	bl	800b528 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ab1a:	6978      	ldr	r0, [r7, #20]
 800ab1c:	f7ff fefb 	bl	800a916 <prvUnlockQueue>
	}
 800ab20:	bf00      	nop
 800ab22:	3718      	adds	r7, #24
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b08e      	sub	sp, #56	; 0x38
 800ab2c:	af04      	add	r7, sp, #16
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
 800ab34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10a      	bne.n	800ab52 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	623b      	str	r3, [r7, #32]
}
 800ab4e:	bf00      	nop
 800ab50:	e7fe      	b.n	800ab50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d10a      	bne.n	800ab6e <xTaskCreateStatic+0x46>
	__asm volatile
 800ab58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5c:	f383 8811 	msr	BASEPRI, r3
 800ab60:	f3bf 8f6f 	isb	sy
 800ab64:	f3bf 8f4f 	dsb	sy
 800ab68:	61fb      	str	r3, [r7, #28]
}
 800ab6a:	bf00      	nop
 800ab6c:	e7fe      	b.n	800ab6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab6e:	235c      	movs	r3, #92	; 0x5c
 800ab70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	2b5c      	cmp	r3, #92	; 0x5c
 800ab76:	d00a      	beq.n	800ab8e <xTaskCreateStatic+0x66>
	__asm volatile
 800ab78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7c:	f383 8811 	msr	BASEPRI, r3
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	f3bf 8f4f 	dsb	sy
 800ab88:	61bb      	str	r3, [r7, #24]
}
 800ab8a:	bf00      	nop
 800ab8c:	e7fe      	b.n	800ab8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d01e      	beq.n	800abd4 <xTaskCreateStatic+0xac>
 800ab96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d01b      	beq.n	800abd4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aba4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba8:	2202      	movs	r2, #2
 800abaa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800abae:	2300      	movs	r3, #0
 800abb0:	9303      	str	r3, [sp, #12]
 800abb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb4:	9302      	str	r3, [sp, #8]
 800abb6:	f107 0314 	add.w	r3, r7, #20
 800abba:	9301      	str	r3, [sp, #4]
 800abbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	68b9      	ldr	r1, [r7, #8]
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f000 f850 	bl	800ac6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800abce:	f000 f8dd 	bl	800ad8c <prvAddNewTaskToReadyList>
 800abd2:	e001      	b.n	800abd8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800abd4:	2300      	movs	r3, #0
 800abd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800abd8:	697b      	ldr	r3, [r7, #20]
	}
 800abda:	4618      	mov	r0, r3
 800abdc:	3728      	adds	r7, #40	; 0x28
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b08c      	sub	sp, #48	; 0x30
 800abe6:	af04      	add	r7, sp, #16
 800abe8:	60f8      	str	r0, [r7, #12]
 800abea:	60b9      	str	r1, [r7, #8]
 800abec:	603b      	str	r3, [r7, #0]
 800abee:	4613      	mov	r3, r2
 800abf0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800abf2:	88fb      	ldrh	r3, [r7, #6]
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4618      	mov	r0, r3
 800abf8:	f001 fea6 	bl	800c948 <pvPortMalloc>
 800abfc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00e      	beq.n	800ac22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac04:	205c      	movs	r0, #92	; 0x5c
 800ac06:	f001 fe9f 	bl	800c948 <pvPortMalloc>
 800ac0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d003      	beq.n	800ac1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	631a      	str	r2, [r3, #48]	; 0x30
 800ac18:	e005      	b.n	800ac26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac1a:	6978      	ldr	r0, [r7, #20]
 800ac1c:	f001 ff60 	bl	800cae0 <vPortFree>
 800ac20:	e001      	b.n	800ac26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac22:	2300      	movs	r3, #0
 800ac24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d017      	beq.n	800ac5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac34:	88fa      	ldrh	r2, [r7, #6]
 800ac36:	2300      	movs	r3, #0
 800ac38:	9303      	str	r3, [sp, #12]
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	9302      	str	r3, [sp, #8]
 800ac3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac40:	9301      	str	r3, [sp, #4]
 800ac42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	68b9      	ldr	r1, [r7, #8]
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f000 f80e 	bl	800ac6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac50:	69f8      	ldr	r0, [r7, #28]
 800ac52:	f000 f89b 	bl	800ad8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac56:	2301      	movs	r3, #1
 800ac58:	61bb      	str	r3, [r7, #24]
 800ac5a:	e002      	b.n	800ac62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac62:	69bb      	ldr	r3, [r7, #24]
	}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3720      	adds	r7, #32
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b088      	sub	sp, #32
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
 800ac78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	461a      	mov	r2, r3
 800ac84:	21a5      	movs	r1, #165	; 0xa5
 800ac86:	f002 f87b 	bl	800cd80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac94:	3b01      	subs	r3, #1
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	4413      	add	r3, r2
 800ac9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	f023 0307 	bic.w	r3, r3, #7
 800aca2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	f003 0307 	and.w	r3, r3, #7
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00a      	beq.n	800acc4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	617b      	str	r3, [r7, #20]
}
 800acc0:	bf00      	nop
 800acc2:	e7fe      	b.n	800acc2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d01f      	beq.n	800ad0a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acca:	2300      	movs	r3, #0
 800accc:	61fb      	str	r3, [r7, #28]
 800acce:	e012      	b.n	800acf6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800acd0:	68ba      	ldr	r2, [r7, #8]
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	4413      	add	r3, r2
 800acd6:	7819      	ldrb	r1, [r3, #0]
 800acd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	4413      	add	r3, r2
 800acde:	3334      	adds	r3, #52	; 0x34
 800ace0:	460a      	mov	r2, r1
 800ace2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ace4:	68ba      	ldr	r2, [r7, #8]
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	4413      	add	r3, r2
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d006      	beq.n	800acfe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	3301      	adds	r3, #1
 800acf4:	61fb      	str	r3, [r7, #28]
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	2b0f      	cmp	r3, #15
 800acfa:	d9e9      	bls.n	800acd0 <prvInitialiseNewTask+0x64>
 800acfc:	e000      	b.n	800ad00 <prvInitialiseNewTask+0x94>
			{
				break;
 800acfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ad08:	e003      	b.n	800ad12 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad14:	2b37      	cmp	r3, #55	; 0x37
 800ad16:	d901      	bls.n	800ad1c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad18:	2337      	movs	r3, #55	; 0x37
 800ad1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad30:	3304      	adds	r3, #4
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fe fda0 	bl	8009878 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3a:	3318      	adds	r3, #24
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fe fd9b 	bl	8009878 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad66:	683a      	ldr	r2, [r7, #0]
 800ad68:	68f9      	ldr	r1, [r7, #12]
 800ad6a:	69b8      	ldr	r0, [r7, #24]
 800ad6c:	f001 fb9c 	bl	800c4a8 <pxPortInitialiseStack>
 800ad70:	4602      	mov	r2, r0
 800ad72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d002      	beq.n	800ad82 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad82:	bf00      	nop
 800ad84:	3720      	adds	r7, #32
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
	...

0800ad8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad94:	f001 fcb6 	bl	800c704 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad98:	4b2d      	ldr	r3, [pc, #180]	; (800ae50 <prvAddNewTaskToReadyList+0xc4>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	4a2c      	ldr	r2, [pc, #176]	; (800ae50 <prvAddNewTaskToReadyList+0xc4>)
 800ada0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ada2:	4b2c      	ldr	r3, [pc, #176]	; (800ae54 <prvAddNewTaskToReadyList+0xc8>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d109      	bne.n	800adbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800adaa:	4a2a      	ldr	r2, [pc, #168]	; (800ae54 <prvAddNewTaskToReadyList+0xc8>)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800adb0:	4b27      	ldr	r3, [pc, #156]	; (800ae50 <prvAddNewTaskToReadyList+0xc4>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d110      	bne.n	800adda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800adb8:	f000 fd44 	bl	800b844 <prvInitialiseTaskLists>
 800adbc:	e00d      	b.n	800adda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800adbe:	4b26      	ldr	r3, [pc, #152]	; (800ae58 <prvAddNewTaskToReadyList+0xcc>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d109      	bne.n	800adda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800adc6:	4b23      	ldr	r3, [pc, #140]	; (800ae54 <prvAddNewTaskToReadyList+0xc8>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add0:	429a      	cmp	r2, r3
 800add2:	d802      	bhi.n	800adda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800add4:	4a1f      	ldr	r2, [pc, #124]	; (800ae54 <prvAddNewTaskToReadyList+0xc8>)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800adda:	4b20      	ldr	r3, [pc, #128]	; (800ae5c <prvAddNewTaskToReadyList+0xd0>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	3301      	adds	r3, #1
 800ade0:	4a1e      	ldr	r2, [pc, #120]	; (800ae5c <prvAddNewTaskToReadyList+0xd0>)
 800ade2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ade4:	4b1d      	ldr	r3, [pc, #116]	; (800ae5c <prvAddNewTaskToReadyList+0xd0>)
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf0:	4b1b      	ldr	r3, [pc, #108]	; (800ae60 <prvAddNewTaskToReadyList+0xd4>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d903      	bls.n	800ae00 <prvAddNewTaskToReadyList+0x74>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfc:	4a18      	ldr	r2, [pc, #96]	; (800ae60 <prvAddNewTaskToReadyList+0xd4>)
 800adfe:	6013      	str	r3, [r2, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae04:	4613      	mov	r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	4413      	add	r3, r2
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4a15      	ldr	r2, [pc, #84]	; (800ae64 <prvAddNewTaskToReadyList+0xd8>)
 800ae0e:	441a      	add	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	3304      	adds	r3, #4
 800ae14:	4619      	mov	r1, r3
 800ae16:	4610      	mov	r0, r2
 800ae18:	f7fe fd3b 	bl	8009892 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae1c:	f001 fca2 	bl	800c764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae20:	4b0d      	ldr	r3, [pc, #52]	; (800ae58 <prvAddNewTaskToReadyList+0xcc>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00e      	beq.n	800ae46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae28:	4b0a      	ldr	r3, [pc, #40]	; (800ae54 <prvAddNewTaskToReadyList+0xc8>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d207      	bcs.n	800ae46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae36:	4b0c      	ldr	r3, [pc, #48]	; (800ae68 <prvAddNewTaskToReadyList+0xdc>)
 800ae38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae3c:	601a      	str	r2, [r3, #0]
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae46:	bf00      	nop
 800ae48:	3708      	adds	r7, #8
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	200048f0 	.word	0x200048f0
 800ae54:	2000441c 	.word	0x2000441c
 800ae58:	200048fc 	.word	0x200048fc
 800ae5c:	2000490c 	.word	0x2000490c
 800ae60:	200048f8 	.word	0x200048f8
 800ae64:	20004420 	.word	0x20004420
 800ae68:	e000ed04 	.word	0xe000ed04

0800ae6c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b08a      	sub	sp, #40	; 0x28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ae76:	2300      	movs	r3, #0
 800ae78:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10a      	bne.n	800ae96 <vTaskDelayUntil+0x2a>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	617b      	str	r3, [r7, #20]
}
 800ae92:	bf00      	nop
 800ae94:	e7fe      	b.n	800ae94 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10a      	bne.n	800aeb2 <vTaskDelayUntil+0x46>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	613b      	str	r3, [r7, #16]
}
 800aeae:	bf00      	nop
 800aeb0:	e7fe      	b.n	800aeb0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800aeb2:	4b2a      	ldr	r3, [pc, #168]	; (800af5c <vTaskDelayUntil+0xf0>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00a      	beq.n	800aed0 <vTaskDelayUntil+0x64>
	__asm volatile
 800aeba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebe:	f383 8811 	msr	BASEPRI, r3
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	60fb      	str	r3, [r7, #12]
}
 800aecc:	bf00      	nop
 800aece:	e7fe      	b.n	800aece <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800aed0:	f000 f8e4 	bl	800b09c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800aed4:	4b22      	ldr	r3, [pc, #136]	; (800af60 <vTaskDelayUntil+0xf4>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	683a      	ldr	r2, [r7, #0]
 800aee0:	4413      	add	r3, r2
 800aee2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	6a3a      	ldr	r2, [r7, #32]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d20b      	bcs.n	800af06 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	69fa      	ldr	r2, [r7, #28]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d211      	bcs.n	800af1c <vTaskDelayUntil+0xb0>
 800aef8:	69fa      	ldr	r2, [r7, #28]
 800aefa:	6a3b      	ldr	r3, [r7, #32]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d90d      	bls.n	800af1c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800af00:	2301      	movs	r3, #1
 800af02:	627b      	str	r3, [r7, #36]	; 0x24
 800af04:	e00a      	b.n	800af1c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	69fa      	ldr	r2, [r7, #28]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d303      	bcc.n	800af18 <vTaskDelayUntil+0xac>
 800af10:	69fa      	ldr	r2, [r7, #28]
 800af12:	6a3b      	ldr	r3, [r7, #32]
 800af14:	429a      	cmp	r2, r3
 800af16:	d901      	bls.n	800af1c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800af18:	2301      	movs	r3, #1
 800af1a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	69fa      	ldr	r2, [r7, #28]
 800af20:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800af22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af24:	2b00      	cmp	r3, #0
 800af26:	d006      	beq.n	800af36 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800af28:	69fa      	ldr	r2, [r7, #28]
 800af2a:	6a3b      	ldr	r3, [r7, #32]
 800af2c:	1ad3      	subs	r3, r2, r3
 800af2e:	2100      	movs	r1, #0
 800af30:	4618      	mov	r0, r3
 800af32:	f000 fef7 	bl	800bd24 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800af36:	f000 f8bf 	bl	800b0b8 <xTaskResumeAll>
 800af3a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d107      	bne.n	800af52 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800af42:	4b08      	ldr	r3, [pc, #32]	; (800af64 <vTaskDelayUntil+0xf8>)
 800af44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af48:	601a      	str	r2, [r3, #0]
 800af4a:	f3bf 8f4f 	dsb	sy
 800af4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af52:	bf00      	nop
 800af54:	3728      	adds	r7, #40	; 0x28
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	20004918 	.word	0x20004918
 800af60:	200048f4 	.word	0x200048f4
 800af64:	e000ed04 	.word	0xe000ed04

0800af68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af70:	2300      	movs	r3, #0
 800af72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d017      	beq.n	800afaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af7a:	4b13      	ldr	r3, [pc, #76]	; (800afc8 <vTaskDelay+0x60>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00a      	beq.n	800af98 <vTaskDelay+0x30>
	__asm volatile
 800af82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af86:	f383 8811 	msr	BASEPRI, r3
 800af8a:	f3bf 8f6f 	isb	sy
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	60bb      	str	r3, [r7, #8]
}
 800af94:	bf00      	nop
 800af96:	e7fe      	b.n	800af96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af98:	f000 f880 	bl	800b09c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af9c:	2100      	movs	r1, #0
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 fec0 	bl	800bd24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800afa4:	f000 f888 	bl	800b0b8 <xTaskResumeAll>
 800afa8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d107      	bne.n	800afc0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800afb0:	4b06      	ldr	r3, [pc, #24]	; (800afcc <vTaskDelay+0x64>)
 800afb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afb6:	601a      	str	r2, [r3, #0]
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800afc0:	bf00      	nop
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	20004918 	.word	0x20004918
 800afcc:	e000ed04 	.word	0xe000ed04

0800afd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b08a      	sub	sp, #40	; 0x28
 800afd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800afd6:	2300      	movs	r3, #0
 800afd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800afda:	2300      	movs	r3, #0
 800afdc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800afde:	463a      	mov	r2, r7
 800afe0:	1d39      	adds	r1, r7, #4
 800afe2:	f107 0308 	add.w	r3, r7, #8
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7fe f986 	bl	80092f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	9202      	str	r2, [sp, #8]
 800aff4:	9301      	str	r3, [sp, #4]
 800aff6:	2300      	movs	r3, #0
 800aff8:	9300      	str	r3, [sp, #0]
 800affa:	2300      	movs	r3, #0
 800affc:	460a      	mov	r2, r1
 800affe:	4921      	ldr	r1, [pc, #132]	; (800b084 <vTaskStartScheduler+0xb4>)
 800b000:	4821      	ldr	r0, [pc, #132]	; (800b088 <vTaskStartScheduler+0xb8>)
 800b002:	f7ff fd91 	bl	800ab28 <xTaskCreateStatic>
 800b006:	4603      	mov	r3, r0
 800b008:	4a20      	ldr	r2, [pc, #128]	; (800b08c <vTaskStartScheduler+0xbc>)
 800b00a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b00c:	4b1f      	ldr	r3, [pc, #124]	; (800b08c <vTaskStartScheduler+0xbc>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d002      	beq.n	800b01a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b014:	2301      	movs	r3, #1
 800b016:	617b      	str	r3, [r7, #20]
 800b018:	e001      	b.n	800b01e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b01a:	2300      	movs	r3, #0
 800b01c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d102      	bne.n	800b02a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b024:	f000 fed2 	bl	800bdcc <xTimerCreateTimerTask>
 800b028:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d116      	bne.n	800b05e <vTaskStartScheduler+0x8e>
	__asm volatile
 800b030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b034:	f383 8811 	msr	BASEPRI, r3
 800b038:	f3bf 8f6f 	isb	sy
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	613b      	str	r3, [r7, #16]
}
 800b042:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b044:	4b12      	ldr	r3, [pc, #72]	; (800b090 <vTaskStartScheduler+0xc0>)
 800b046:	f04f 32ff 	mov.w	r2, #4294967295
 800b04a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b04c:	4b11      	ldr	r3, [pc, #68]	; (800b094 <vTaskStartScheduler+0xc4>)
 800b04e:	2201      	movs	r2, #1
 800b050:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b052:	4b11      	ldr	r3, [pc, #68]	; (800b098 <vTaskStartScheduler+0xc8>)
 800b054:	2200      	movs	r2, #0
 800b056:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b058:	f001 fab2 	bl	800c5c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b05c:	e00e      	b.n	800b07c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b064:	d10a      	bne.n	800b07c <vTaskStartScheduler+0xac>
	__asm volatile
 800b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06a:	f383 8811 	msr	BASEPRI, r3
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	60fb      	str	r3, [r7, #12]
}
 800b078:	bf00      	nop
 800b07a:	e7fe      	b.n	800b07a <vTaskStartScheduler+0xaa>
}
 800b07c:	bf00      	nop
 800b07e:	3718      	adds	r7, #24
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	0800ced8 	.word	0x0800ced8
 800b088:	0800b815 	.word	0x0800b815
 800b08c:	20004914 	.word	0x20004914
 800b090:	20004910 	.word	0x20004910
 800b094:	200048fc 	.word	0x200048fc
 800b098:	200048f4 	.word	0x200048f4

0800b09c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b09c:	b480      	push	{r7}
 800b09e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b0a0:	4b04      	ldr	r3, [pc, #16]	; (800b0b4 <vTaskSuspendAll+0x18>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	4a03      	ldr	r2, [pc, #12]	; (800b0b4 <vTaskSuspendAll+0x18>)
 800b0a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b0aa:	bf00      	nop
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr
 800b0b4:	20004918 	.word	0x20004918

0800b0b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b0c6:	4b42      	ldr	r3, [pc, #264]	; (800b1d0 <xTaskResumeAll+0x118>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10a      	bne.n	800b0e4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	603b      	str	r3, [r7, #0]
}
 800b0e0:	bf00      	nop
 800b0e2:	e7fe      	b.n	800b0e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b0e4:	f001 fb0e 	bl	800c704 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b0e8:	4b39      	ldr	r3, [pc, #228]	; (800b1d0 <xTaskResumeAll+0x118>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	4a38      	ldr	r2, [pc, #224]	; (800b1d0 <xTaskResumeAll+0x118>)
 800b0f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0f2:	4b37      	ldr	r3, [pc, #220]	; (800b1d0 <xTaskResumeAll+0x118>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d162      	bne.n	800b1c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b0fa:	4b36      	ldr	r3, [pc, #216]	; (800b1d4 <xTaskResumeAll+0x11c>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d05e      	beq.n	800b1c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b102:	e02f      	b.n	800b164 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b104:	4b34      	ldr	r3, [pc, #208]	; (800b1d8 <xTaskResumeAll+0x120>)
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	68db      	ldr	r3, [r3, #12]
 800b10a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	3318      	adds	r3, #24
 800b110:	4618      	mov	r0, r3
 800b112:	f7fe fc1b 	bl	800994c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	3304      	adds	r3, #4
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fe fc16 	bl	800994c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b124:	4b2d      	ldr	r3, [pc, #180]	; (800b1dc <xTaskResumeAll+0x124>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d903      	bls.n	800b134 <xTaskResumeAll+0x7c>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b130:	4a2a      	ldr	r2, [pc, #168]	; (800b1dc <xTaskResumeAll+0x124>)
 800b132:	6013      	str	r3, [r2, #0]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b138:	4613      	mov	r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	4413      	add	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4a27      	ldr	r2, [pc, #156]	; (800b1e0 <xTaskResumeAll+0x128>)
 800b142:	441a      	add	r2, r3
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	3304      	adds	r3, #4
 800b148:	4619      	mov	r1, r3
 800b14a:	4610      	mov	r0, r2
 800b14c:	f7fe fba1 	bl	8009892 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b154:	4b23      	ldr	r3, [pc, #140]	; (800b1e4 <xTaskResumeAll+0x12c>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d302      	bcc.n	800b164 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b15e:	4b22      	ldr	r3, [pc, #136]	; (800b1e8 <xTaskResumeAll+0x130>)
 800b160:	2201      	movs	r2, #1
 800b162:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b164:	4b1c      	ldr	r3, [pc, #112]	; (800b1d8 <xTaskResumeAll+0x120>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d1cb      	bne.n	800b104 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d001      	beq.n	800b176 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b172:	f000 fc05 	bl	800b980 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b176:	4b1d      	ldr	r3, [pc, #116]	; (800b1ec <xTaskResumeAll+0x134>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d010      	beq.n	800b1a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b182:	f000 f859 	bl	800b238 <xTaskIncrementTick>
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d002      	beq.n	800b192 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b18c:	4b16      	ldr	r3, [pc, #88]	; (800b1e8 <xTaskResumeAll+0x130>)
 800b18e:	2201      	movs	r2, #1
 800b190:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	3b01      	subs	r3, #1
 800b196:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1f1      	bne.n	800b182 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b19e:	4b13      	ldr	r3, [pc, #76]	; (800b1ec <xTaskResumeAll+0x134>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b1a4:	4b10      	ldr	r3, [pc, #64]	; (800b1e8 <xTaskResumeAll+0x130>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d009      	beq.n	800b1c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b1b0:	4b0f      	ldr	r3, [pc, #60]	; (800b1f0 <xTaskResumeAll+0x138>)
 800b1b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1b6:	601a      	str	r2, [r3, #0]
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1c0:	f001 fad0 	bl	800c764 <vPortExitCritical>

	return xAlreadyYielded;
 800b1c4:	68bb      	ldr	r3, [r7, #8]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	20004918 	.word	0x20004918
 800b1d4:	200048f0 	.word	0x200048f0
 800b1d8:	200048b0 	.word	0x200048b0
 800b1dc:	200048f8 	.word	0x200048f8
 800b1e0:	20004420 	.word	0x20004420
 800b1e4:	2000441c 	.word	0x2000441c
 800b1e8:	20004904 	.word	0x20004904
 800b1ec:	20004900 	.word	0x20004900
 800b1f0:	e000ed04 	.word	0xe000ed04

0800b1f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b1fa:	4b05      	ldr	r3, [pc, #20]	; (800b210 <xTaskGetTickCount+0x1c>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b200:	687b      	ldr	r3, [r7, #4]
}
 800b202:	4618      	mov	r0, r3
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	200048f4 	.word	0x200048f4

0800b214 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b21a:	f001 fb55 	bl	800c8c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b21e:	2300      	movs	r3, #0
 800b220:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b222:	4b04      	ldr	r3, [pc, #16]	; (800b234 <xTaskGetTickCountFromISR+0x20>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b228:	683b      	ldr	r3, [r7, #0]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3708      	adds	r7, #8
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	200048f4 	.word	0x200048f4

0800b238 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b086      	sub	sp, #24
 800b23c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b23e:	2300      	movs	r3, #0
 800b240:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b242:	4b4f      	ldr	r3, [pc, #316]	; (800b380 <xTaskIncrementTick+0x148>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	f040 808f 	bne.w	800b36a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b24c:	4b4d      	ldr	r3, [pc, #308]	; (800b384 <xTaskIncrementTick+0x14c>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	3301      	adds	r3, #1
 800b252:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b254:	4a4b      	ldr	r2, [pc, #300]	; (800b384 <xTaskIncrementTick+0x14c>)
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d120      	bne.n	800b2a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b260:	4b49      	ldr	r3, [pc, #292]	; (800b388 <xTaskIncrementTick+0x150>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00a      	beq.n	800b280 <xTaskIncrementTick+0x48>
	__asm volatile
 800b26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26e:	f383 8811 	msr	BASEPRI, r3
 800b272:	f3bf 8f6f 	isb	sy
 800b276:	f3bf 8f4f 	dsb	sy
 800b27a:	603b      	str	r3, [r7, #0]
}
 800b27c:	bf00      	nop
 800b27e:	e7fe      	b.n	800b27e <xTaskIncrementTick+0x46>
 800b280:	4b41      	ldr	r3, [pc, #260]	; (800b388 <xTaskIncrementTick+0x150>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	60fb      	str	r3, [r7, #12]
 800b286:	4b41      	ldr	r3, [pc, #260]	; (800b38c <xTaskIncrementTick+0x154>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a3f      	ldr	r2, [pc, #252]	; (800b388 <xTaskIncrementTick+0x150>)
 800b28c:	6013      	str	r3, [r2, #0]
 800b28e:	4a3f      	ldr	r2, [pc, #252]	; (800b38c <xTaskIncrementTick+0x154>)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6013      	str	r3, [r2, #0]
 800b294:	4b3e      	ldr	r3, [pc, #248]	; (800b390 <xTaskIncrementTick+0x158>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3301      	adds	r3, #1
 800b29a:	4a3d      	ldr	r2, [pc, #244]	; (800b390 <xTaskIncrementTick+0x158>)
 800b29c:	6013      	str	r3, [r2, #0]
 800b29e:	f000 fb6f 	bl	800b980 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b2a2:	4b3c      	ldr	r3, [pc, #240]	; (800b394 <xTaskIncrementTick+0x15c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d349      	bcc.n	800b340 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2ac:	4b36      	ldr	r3, [pc, #216]	; (800b388 <xTaskIncrementTick+0x150>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d104      	bne.n	800b2c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2b6:	4b37      	ldr	r3, [pc, #220]	; (800b394 <xTaskIncrementTick+0x15c>)
 800b2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2bc:	601a      	str	r2, [r3, #0]
					break;
 800b2be:	e03f      	b.n	800b340 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2c0:	4b31      	ldr	r3, [pc, #196]	; (800b388 <xTaskIncrementTick+0x150>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d203      	bcs.n	800b2e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b2d8:	4a2e      	ldr	r2, [pc, #184]	; (800b394 <xTaskIncrementTick+0x15c>)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b2de:	e02f      	b.n	800b340 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	3304      	adds	r3, #4
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fe fb31 	bl	800994c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d004      	beq.n	800b2fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	3318      	adds	r3, #24
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fe fb28 	bl	800994c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b300:	4b25      	ldr	r3, [pc, #148]	; (800b398 <xTaskIncrementTick+0x160>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	429a      	cmp	r2, r3
 800b306:	d903      	bls.n	800b310 <xTaskIncrementTick+0xd8>
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30c:	4a22      	ldr	r2, [pc, #136]	; (800b398 <xTaskIncrementTick+0x160>)
 800b30e:	6013      	str	r3, [r2, #0]
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b314:	4613      	mov	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4413      	add	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4a1f      	ldr	r2, [pc, #124]	; (800b39c <xTaskIncrementTick+0x164>)
 800b31e:	441a      	add	r2, r3
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	3304      	adds	r3, #4
 800b324:	4619      	mov	r1, r3
 800b326:	4610      	mov	r0, r2
 800b328:	f7fe fab3 	bl	8009892 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b330:	4b1b      	ldr	r3, [pc, #108]	; (800b3a0 <xTaskIncrementTick+0x168>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b336:	429a      	cmp	r2, r3
 800b338:	d3b8      	bcc.n	800b2ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b33a:	2301      	movs	r3, #1
 800b33c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b33e:	e7b5      	b.n	800b2ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b340:	4b17      	ldr	r3, [pc, #92]	; (800b3a0 <xTaskIncrementTick+0x168>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b346:	4915      	ldr	r1, [pc, #84]	; (800b39c <xTaskIncrementTick+0x164>)
 800b348:	4613      	mov	r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	4413      	add	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	440b      	add	r3, r1
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2b01      	cmp	r3, #1
 800b356:	d901      	bls.n	800b35c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b358:	2301      	movs	r3, #1
 800b35a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b35c:	4b11      	ldr	r3, [pc, #68]	; (800b3a4 <xTaskIncrementTick+0x16c>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d007      	beq.n	800b374 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b364:	2301      	movs	r3, #1
 800b366:	617b      	str	r3, [r7, #20]
 800b368:	e004      	b.n	800b374 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b36a:	4b0f      	ldr	r3, [pc, #60]	; (800b3a8 <xTaskIncrementTick+0x170>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3301      	adds	r3, #1
 800b370:	4a0d      	ldr	r2, [pc, #52]	; (800b3a8 <xTaskIncrementTick+0x170>)
 800b372:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b374:	697b      	ldr	r3, [r7, #20]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3718      	adds	r7, #24
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	20004918 	.word	0x20004918
 800b384:	200048f4 	.word	0x200048f4
 800b388:	200048a8 	.word	0x200048a8
 800b38c:	200048ac 	.word	0x200048ac
 800b390:	20004908 	.word	0x20004908
 800b394:	20004910 	.word	0x20004910
 800b398:	200048f8 	.word	0x200048f8
 800b39c:	20004420 	.word	0x20004420
 800b3a0:	2000441c 	.word	0x2000441c
 800b3a4:	20004904 	.word	0x20004904
 800b3a8:	20004900 	.word	0x20004900

0800b3ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b3b2:	4b28      	ldr	r3, [pc, #160]	; (800b454 <vTaskSwitchContext+0xa8>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d003      	beq.n	800b3c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b3ba:	4b27      	ldr	r3, [pc, #156]	; (800b458 <vTaskSwitchContext+0xac>)
 800b3bc:	2201      	movs	r2, #1
 800b3be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b3c0:	e041      	b.n	800b446 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b3c2:	4b25      	ldr	r3, [pc, #148]	; (800b458 <vTaskSwitchContext+0xac>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3c8:	4b24      	ldr	r3, [pc, #144]	; (800b45c <vTaskSwitchContext+0xb0>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	60fb      	str	r3, [r7, #12]
 800b3ce:	e010      	b.n	800b3f2 <vTaskSwitchContext+0x46>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d10a      	bne.n	800b3ec <vTaskSwitchContext+0x40>
	__asm volatile
 800b3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3da:	f383 8811 	msr	BASEPRI, r3
 800b3de:	f3bf 8f6f 	isb	sy
 800b3e2:	f3bf 8f4f 	dsb	sy
 800b3e6:	607b      	str	r3, [r7, #4]
}
 800b3e8:	bf00      	nop
 800b3ea:	e7fe      	b.n	800b3ea <vTaskSwitchContext+0x3e>
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	60fb      	str	r3, [r7, #12]
 800b3f2:	491b      	ldr	r1, [pc, #108]	; (800b460 <vTaskSwitchContext+0xb4>)
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	4413      	add	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	440b      	add	r3, r1
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d0e4      	beq.n	800b3d0 <vTaskSwitchContext+0x24>
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	4613      	mov	r3, r2
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	4413      	add	r3, r2
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	4a13      	ldr	r2, [pc, #76]	; (800b460 <vTaskSwitchContext+0xb4>)
 800b412:	4413      	add	r3, r2
 800b414:	60bb      	str	r3, [r7, #8]
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	685a      	ldr	r2, [r3, #4]
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	605a      	str	r2, [r3, #4]
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	685a      	ldr	r2, [r3, #4]
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	3308      	adds	r3, #8
 800b428:	429a      	cmp	r2, r3
 800b42a:	d104      	bne.n	800b436 <vTaskSwitchContext+0x8a>
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	685a      	ldr	r2, [r3, #4]
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	605a      	str	r2, [r3, #4]
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	4a09      	ldr	r2, [pc, #36]	; (800b464 <vTaskSwitchContext+0xb8>)
 800b43e:	6013      	str	r3, [r2, #0]
 800b440:	4a06      	ldr	r2, [pc, #24]	; (800b45c <vTaskSwitchContext+0xb0>)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6013      	str	r3, [r2, #0]
}
 800b446:	bf00      	nop
 800b448:	3714      	adds	r7, #20
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	20004918 	.word	0x20004918
 800b458:	20004904 	.word	0x20004904
 800b45c:	200048f8 	.word	0x200048f8
 800b460:	20004420 	.word	0x20004420
 800b464:	2000441c 	.word	0x2000441c

0800b468 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10a      	bne.n	800b48e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	60fb      	str	r3, [r7, #12]
}
 800b48a:	bf00      	nop
 800b48c:	e7fe      	b.n	800b48c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b48e:	4b07      	ldr	r3, [pc, #28]	; (800b4ac <vTaskPlaceOnEventList+0x44>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3318      	adds	r3, #24
 800b494:	4619      	mov	r1, r3
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7fe fa1f 	bl	80098da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b49c:	2101      	movs	r1, #1
 800b49e:	6838      	ldr	r0, [r7, #0]
 800b4a0:	f000 fc40 	bl	800bd24 <prvAddCurrentTaskToDelayedList>
}
 800b4a4:	bf00      	nop
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	2000441c 	.word	0x2000441c

0800b4b0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b086      	sub	sp, #24
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10a      	bne.n	800b4d8 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800b4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c6:	f383 8811 	msr	BASEPRI, r3
 800b4ca:	f3bf 8f6f 	isb	sy
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	617b      	str	r3, [r7, #20]
}
 800b4d4:	bf00      	nop
 800b4d6:	e7fe      	b.n	800b4d6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b4d8:	4b11      	ldr	r3, [pc, #68]	; (800b520 <vTaskPlaceOnUnorderedEventList+0x70>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10a      	bne.n	800b4f6 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	613b      	str	r3, [r7, #16]
}
 800b4f2:	bf00      	nop
 800b4f4:	e7fe      	b.n	800b4f4 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b4f6:	4b0b      	ldr	r3, [pc, #44]	; (800b524 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b500:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b502:	4b08      	ldr	r3, [pc, #32]	; (800b524 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	3318      	adds	r3, #24
 800b508:	4619      	mov	r1, r3
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f7fe f9c1 	bl	8009892 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b510:	2101      	movs	r1, #1
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 fc06 	bl	800bd24 <prvAddCurrentTaskToDelayedList>
}
 800b518:	bf00      	nop
 800b51a:	3718      	adds	r7, #24
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}
 800b520:	20004918 	.word	0x20004918
 800b524:	2000441c 	.word	0x2000441c

0800b528 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b086      	sub	sp, #24
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10a      	bne.n	800b550 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	617b      	str	r3, [r7, #20]
}
 800b54c:	bf00      	nop
 800b54e:	e7fe      	b.n	800b54e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b550:	4b0a      	ldr	r3, [pc, #40]	; (800b57c <vTaskPlaceOnEventListRestricted+0x54>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	3318      	adds	r3, #24
 800b556:	4619      	mov	r1, r3
 800b558:	68f8      	ldr	r0, [r7, #12]
 800b55a:	f7fe f99a 	bl	8009892 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d002      	beq.n	800b56a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b564:	f04f 33ff 	mov.w	r3, #4294967295
 800b568:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b56a:	6879      	ldr	r1, [r7, #4]
 800b56c:	68b8      	ldr	r0, [r7, #8]
 800b56e:	f000 fbd9 	bl	800bd24 <prvAddCurrentTaskToDelayedList>
	}
 800b572:	bf00      	nop
 800b574:	3718      	adds	r7, #24
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	2000441c 	.word	0x2000441c

0800b580 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10a      	bne.n	800b5ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	60fb      	str	r3, [r7, #12]
}
 800b5a8:	bf00      	nop
 800b5aa:	e7fe      	b.n	800b5aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	3318      	adds	r3, #24
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7fe f9cb 	bl	800994c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5b6:	4b1e      	ldr	r3, [pc, #120]	; (800b630 <xTaskRemoveFromEventList+0xb0>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d11d      	bne.n	800b5fa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	3304      	adds	r3, #4
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fe f9c2 	bl	800994c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5cc:	4b19      	ldr	r3, [pc, #100]	; (800b634 <xTaskRemoveFromEventList+0xb4>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d903      	bls.n	800b5dc <xTaskRemoveFromEventList+0x5c>
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d8:	4a16      	ldr	r2, [pc, #88]	; (800b634 <xTaskRemoveFromEventList+0xb4>)
 800b5da:	6013      	str	r3, [r2, #0]
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5e0:	4613      	mov	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	4413      	add	r3, r2
 800b5e6:	009b      	lsls	r3, r3, #2
 800b5e8:	4a13      	ldr	r2, [pc, #76]	; (800b638 <xTaskRemoveFromEventList+0xb8>)
 800b5ea:	441a      	add	r2, r3
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	3304      	adds	r3, #4
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	4610      	mov	r0, r2
 800b5f4:	f7fe f94d 	bl	8009892 <vListInsertEnd>
 800b5f8:	e005      	b.n	800b606 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	3318      	adds	r3, #24
 800b5fe:	4619      	mov	r1, r3
 800b600:	480e      	ldr	r0, [pc, #56]	; (800b63c <xTaskRemoveFromEventList+0xbc>)
 800b602:	f7fe f946 	bl	8009892 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b60a:	4b0d      	ldr	r3, [pc, #52]	; (800b640 <xTaskRemoveFromEventList+0xc0>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b610:	429a      	cmp	r2, r3
 800b612:	d905      	bls.n	800b620 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b614:	2301      	movs	r3, #1
 800b616:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b618:	4b0a      	ldr	r3, [pc, #40]	; (800b644 <xTaskRemoveFromEventList+0xc4>)
 800b61a:	2201      	movs	r2, #1
 800b61c:	601a      	str	r2, [r3, #0]
 800b61e:	e001      	b.n	800b624 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b620:	2300      	movs	r3, #0
 800b622:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b624:	697b      	ldr	r3, [r7, #20]
}
 800b626:	4618      	mov	r0, r3
 800b628:	3718      	adds	r7, #24
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	20004918 	.word	0x20004918
 800b634:	200048f8 	.word	0x200048f8
 800b638:	20004420 	.word	0x20004420
 800b63c:	200048b0 	.word	0x200048b0
 800b640:	2000441c 	.word	0x2000441c
 800b644:	20004904 	.word	0x20004904

0800b648 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800b652:	4b29      	ldr	r3, [pc, #164]	; (800b6f8 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d10a      	bne.n	800b670 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800b65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65e:	f383 8811 	msr	BASEPRI, r3
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	613b      	str	r3, [r7, #16]
}
 800b66c:	bf00      	nop
 800b66e:	e7fe      	b.n	800b66e <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10a      	bne.n	800b69c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800b686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68a:	f383 8811 	msr	BASEPRI, r3
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	60fb      	str	r3, [r7, #12]
}
 800b698:	bf00      	nop
 800b69a:	e7fe      	b.n	800b69a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7fe f955 	bl	800994c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7fe f950 	bl	800994c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b0:	4b12      	ldr	r3, [pc, #72]	; (800b6fc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d903      	bls.n	800b6c0 <vTaskRemoveFromUnorderedEventList+0x78>
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6bc:	4a0f      	ldr	r2, [pc, #60]	; (800b6fc <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b6be:	6013      	str	r3, [r2, #0]
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c4:	4613      	mov	r3, r2
 800b6c6:	009b      	lsls	r3, r3, #2
 800b6c8:	4413      	add	r3, r2
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4a0c      	ldr	r2, [pc, #48]	; (800b700 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800b6ce:	441a      	add	r2, r3
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	3304      	adds	r3, #4
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	f7fe f8db 	bl	8009892 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e0:	4b08      	ldr	r3, [pc, #32]	; (800b704 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d902      	bls.n	800b6f0 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800b6ea:	4b07      	ldr	r3, [pc, #28]	; (800b708 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	601a      	str	r2, [r3, #0]
	}
}
 800b6f0:	bf00      	nop
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	20004918 	.word	0x20004918
 800b6fc:	200048f8 	.word	0x200048f8
 800b700:	20004420 	.word	0x20004420
 800b704:	2000441c 	.word	0x2000441c
 800b708:	20004904 	.word	0x20004904

0800b70c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b714:	4b06      	ldr	r3, [pc, #24]	; (800b730 <vTaskInternalSetTimeOutState+0x24>)
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b71c:	4b05      	ldr	r3, [pc, #20]	; (800b734 <vTaskInternalSetTimeOutState+0x28>)
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	605a      	str	r2, [r3, #4]
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr
 800b730:	20004908 	.word	0x20004908
 800b734:	200048f4 	.word	0x200048f4

0800b738 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b088      	sub	sp, #32
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d10a      	bne.n	800b75e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74c:	f383 8811 	msr	BASEPRI, r3
 800b750:	f3bf 8f6f 	isb	sy
 800b754:	f3bf 8f4f 	dsb	sy
 800b758:	613b      	str	r3, [r7, #16]
}
 800b75a:	bf00      	nop
 800b75c:	e7fe      	b.n	800b75c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10a      	bne.n	800b77a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b768:	f383 8811 	msr	BASEPRI, r3
 800b76c:	f3bf 8f6f 	isb	sy
 800b770:	f3bf 8f4f 	dsb	sy
 800b774:	60fb      	str	r3, [r7, #12]
}
 800b776:	bf00      	nop
 800b778:	e7fe      	b.n	800b778 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b77a:	f000 ffc3 	bl	800c704 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b77e:	4b1d      	ldr	r3, [pc, #116]	; (800b7f4 <xTaskCheckForTimeOut+0xbc>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	69ba      	ldr	r2, [r7, #24]
 800b78a:	1ad3      	subs	r3, r2, r3
 800b78c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b796:	d102      	bne.n	800b79e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b798:	2300      	movs	r3, #0
 800b79a:	61fb      	str	r3, [r7, #28]
 800b79c:	e023      	b.n	800b7e6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	4b15      	ldr	r3, [pc, #84]	; (800b7f8 <xTaskCheckForTimeOut+0xc0>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d007      	beq.n	800b7ba <xTaskCheckForTimeOut+0x82>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	69ba      	ldr	r2, [r7, #24]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d302      	bcc.n	800b7ba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	61fb      	str	r3, [r7, #28]
 800b7b8:	e015      	b.n	800b7e6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d20b      	bcs.n	800b7dc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	1ad2      	subs	r2, r2, r3
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f7ff ff9b 	bl	800b70c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	61fb      	str	r3, [r7, #28]
 800b7da:	e004      	b.n	800b7e6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b7e6:	f000 ffbd 	bl	800c764 <vPortExitCritical>

	return xReturn;
 800b7ea:	69fb      	ldr	r3, [r7, #28]
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3720      	adds	r7, #32
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	200048f4 	.word	0x200048f4
 800b7f8:	20004908 	.word	0x20004908

0800b7fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b800:	4b03      	ldr	r3, [pc, #12]	; (800b810 <vTaskMissedYield+0x14>)
 800b802:	2201      	movs	r2, #1
 800b804:	601a      	str	r2, [r3, #0]
}
 800b806:	bf00      	nop
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr
 800b810:	20004904 	.word	0x20004904

0800b814 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b81c:	f000 f852 	bl	800b8c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b820:	4b06      	ldr	r3, [pc, #24]	; (800b83c <prvIdleTask+0x28>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2b01      	cmp	r3, #1
 800b826:	d9f9      	bls.n	800b81c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b828:	4b05      	ldr	r3, [pc, #20]	; (800b840 <prvIdleTask+0x2c>)
 800b82a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b82e:	601a      	str	r2, [r3, #0]
 800b830:	f3bf 8f4f 	dsb	sy
 800b834:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b838:	e7f0      	b.n	800b81c <prvIdleTask+0x8>
 800b83a:	bf00      	nop
 800b83c:	20004420 	.word	0x20004420
 800b840:	e000ed04 	.word	0xe000ed04

0800b844 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b84a:	2300      	movs	r3, #0
 800b84c:	607b      	str	r3, [r7, #4]
 800b84e:	e00c      	b.n	800b86a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	4613      	mov	r3, r2
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	4413      	add	r3, r2
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	4a12      	ldr	r2, [pc, #72]	; (800b8a4 <prvInitialiseTaskLists+0x60>)
 800b85c:	4413      	add	r3, r2
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fd ffea 	bl	8009838 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	3301      	adds	r3, #1
 800b868:	607b      	str	r3, [r7, #4]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b37      	cmp	r3, #55	; 0x37
 800b86e:	d9ef      	bls.n	800b850 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b870:	480d      	ldr	r0, [pc, #52]	; (800b8a8 <prvInitialiseTaskLists+0x64>)
 800b872:	f7fd ffe1 	bl	8009838 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b876:	480d      	ldr	r0, [pc, #52]	; (800b8ac <prvInitialiseTaskLists+0x68>)
 800b878:	f7fd ffde 	bl	8009838 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b87c:	480c      	ldr	r0, [pc, #48]	; (800b8b0 <prvInitialiseTaskLists+0x6c>)
 800b87e:	f7fd ffdb 	bl	8009838 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b882:	480c      	ldr	r0, [pc, #48]	; (800b8b4 <prvInitialiseTaskLists+0x70>)
 800b884:	f7fd ffd8 	bl	8009838 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b888:	480b      	ldr	r0, [pc, #44]	; (800b8b8 <prvInitialiseTaskLists+0x74>)
 800b88a:	f7fd ffd5 	bl	8009838 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b88e:	4b0b      	ldr	r3, [pc, #44]	; (800b8bc <prvInitialiseTaskLists+0x78>)
 800b890:	4a05      	ldr	r2, [pc, #20]	; (800b8a8 <prvInitialiseTaskLists+0x64>)
 800b892:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b894:	4b0a      	ldr	r3, [pc, #40]	; (800b8c0 <prvInitialiseTaskLists+0x7c>)
 800b896:	4a05      	ldr	r2, [pc, #20]	; (800b8ac <prvInitialiseTaskLists+0x68>)
 800b898:	601a      	str	r2, [r3, #0]
}
 800b89a:	bf00      	nop
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20004420 	.word	0x20004420
 800b8a8:	20004880 	.word	0x20004880
 800b8ac:	20004894 	.word	0x20004894
 800b8b0:	200048b0 	.word	0x200048b0
 800b8b4:	200048c4 	.word	0x200048c4
 800b8b8:	200048dc 	.word	0x200048dc
 800b8bc:	200048a8 	.word	0x200048a8
 800b8c0:	200048ac 	.word	0x200048ac

0800b8c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8ca:	e019      	b.n	800b900 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b8cc:	f000 ff1a 	bl	800c704 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8d0:	4b10      	ldr	r3, [pc, #64]	; (800b914 <prvCheckTasksWaitingTermination+0x50>)
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	3304      	adds	r3, #4
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fe f835 	bl	800994c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b8e2:	4b0d      	ldr	r3, [pc, #52]	; (800b918 <prvCheckTasksWaitingTermination+0x54>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	4a0b      	ldr	r2, [pc, #44]	; (800b918 <prvCheckTasksWaitingTermination+0x54>)
 800b8ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b8ec:	4b0b      	ldr	r3, [pc, #44]	; (800b91c <prvCheckTasksWaitingTermination+0x58>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	4a0a      	ldr	r2, [pc, #40]	; (800b91c <prvCheckTasksWaitingTermination+0x58>)
 800b8f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b8f6:	f000 ff35 	bl	800c764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 f810 	bl	800b920 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b900:	4b06      	ldr	r3, [pc, #24]	; (800b91c <prvCheckTasksWaitingTermination+0x58>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1e1      	bne.n	800b8cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b908:	bf00      	nop
 800b90a:	bf00      	nop
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	200048c4 	.word	0x200048c4
 800b918:	200048f0 	.word	0x200048f0
 800b91c:	200048d8 	.word	0x200048d8

0800b920 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d108      	bne.n	800b944 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b936:	4618      	mov	r0, r3
 800b938:	f001 f8d2 	bl	800cae0 <vPortFree>
				vPortFree( pxTCB );
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f001 f8cf 	bl	800cae0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b942:	e018      	b.n	800b976 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d103      	bne.n	800b956 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f001 f8c6 	bl	800cae0 <vPortFree>
	}
 800b954:	e00f      	b.n	800b976 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d00a      	beq.n	800b976 <prvDeleteTCB+0x56>
	__asm volatile
 800b960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b964:	f383 8811 	msr	BASEPRI, r3
 800b968:	f3bf 8f6f 	isb	sy
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	60fb      	str	r3, [r7, #12]
}
 800b972:	bf00      	nop
 800b974:	e7fe      	b.n	800b974 <prvDeleteTCB+0x54>
	}
 800b976:	bf00      	nop
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
	...

0800b980 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b986:	4b0c      	ldr	r3, [pc, #48]	; (800b9b8 <prvResetNextTaskUnblockTime+0x38>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d104      	bne.n	800b99a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b990:	4b0a      	ldr	r3, [pc, #40]	; (800b9bc <prvResetNextTaskUnblockTime+0x3c>)
 800b992:	f04f 32ff 	mov.w	r2, #4294967295
 800b996:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b998:	e008      	b.n	800b9ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b99a:	4b07      	ldr	r3, [pc, #28]	; (800b9b8 <prvResetNextTaskUnblockTime+0x38>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	4a04      	ldr	r2, [pc, #16]	; (800b9bc <prvResetNextTaskUnblockTime+0x3c>)
 800b9aa:	6013      	str	r3, [r2, #0]
}
 800b9ac:	bf00      	nop
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr
 800b9b8:	200048a8 	.word	0x200048a8
 800b9bc:	20004910 	.word	0x20004910

0800b9c0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b9c6:	4b05      	ldr	r3, [pc, #20]	; (800b9dc <xTaskGetCurrentTaskHandle+0x1c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b9cc:	687b      	ldr	r3, [r7, #4]
	}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	370c      	adds	r7, #12
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	2000441c 	.word	0x2000441c

0800b9e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ba14 <xTaskGetSchedulerState+0x34>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d102      	bne.n	800b9f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	607b      	str	r3, [r7, #4]
 800b9f2:	e008      	b.n	800ba06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9f4:	4b08      	ldr	r3, [pc, #32]	; (800ba18 <xTaskGetSchedulerState+0x38>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d102      	bne.n	800ba02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b9fc:	2302      	movs	r3, #2
 800b9fe:	607b      	str	r3, [r7, #4]
 800ba00:	e001      	b.n	800ba06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba02:	2300      	movs	r3, #0
 800ba04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba06:	687b      	ldr	r3, [r7, #4]
	}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	200048fc 	.word	0x200048fc
 800ba18:	20004918 	.word	0x20004918

0800ba1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d051      	beq.n	800bad6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba36:	4b2a      	ldr	r3, [pc, #168]	; (800bae0 <xTaskPriorityInherit+0xc4>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d241      	bcs.n	800bac4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	699b      	ldr	r3, [r3, #24]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	db06      	blt.n	800ba56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba48:	4b25      	ldr	r3, [pc, #148]	; (800bae0 <xTaskPriorityInherit+0xc4>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba4e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	6959      	ldr	r1, [r3, #20]
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba5e:	4613      	mov	r3, r2
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	4413      	add	r3, r2
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	4a1f      	ldr	r2, [pc, #124]	; (800bae4 <xTaskPriorityInherit+0xc8>)
 800ba68:	4413      	add	r3, r2
 800ba6a:	4299      	cmp	r1, r3
 800ba6c:	d122      	bne.n	800bab4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	3304      	adds	r3, #4
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fd ff6a 	bl	800994c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ba78:	4b19      	ldr	r3, [pc, #100]	; (800bae0 <xTaskPriorityInherit+0xc4>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba86:	4b18      	ldr	r3, [pc, #96]	; (800bae8 <xTaskPriorityInherit+0xcc>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d903      	bls.n	800ba96 <xTaskPriorityInherit+0x7a>
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba92:	4a15      	ldr	r2, [pc, #84]	; (800bae8 <xTaskPriorityInherit+0xcc>)
 800ba94:	6013      	str	r3, [r2, #0]
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	4413      	add	r3, r2
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	4a10      	ldr	r2, [pc, #64]	; (800bae4 <xTaskPriorityInherit+0xc8>)
 800baa4:	441a      	add	r2, r3
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	3304      	adds	r3, #4
 800baaa:	4619      	mov	r1, r3
 800baac:	4610      	mov	r0, r2
 800baae:	f7fd fef0 	bl	8009892 <vListInsertEnd>
 800bab2:	e004      	b.n	800babe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bab4:	4b0a      	ldr	r3, [pc, #40]	; (800bae0 <xTaskPriorityInherit+0xc4>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800babe:	2301      	movs	r3, #1
 800bac0:	60fb      	str	r3, [r7, #12]
 800bac2:	e008      	b.n	800bad6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bac8:	4b05      	ldr	r3, [pc, #20]	; (800bae0 <xTaskPriorityInherit+0xc4>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bace:	429a      	cmp	r2, r3
 800bad0:	d201      	bcs.n	800bad6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bad2:	2301      	movs	r3, #1
 800bad4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bad6:	68fb      	ldr	r3, [r7, #12]
	}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	2000441c 	.word	0x2000441c
 800bae4:	20004420 	.word	0x20004420
 800bae8:	200048f8 	.word	0x200048f8

0800baec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800baec:	b580      	push	{r7, lr}
 800baee:	b086      	sub	sp, #24
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800baf8:	2300      	movs	r3, #0
 800bafa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d056      	beq.n	800bbb0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb02:	4b2e      	ldr	r3, [pc, #184]	; (800bbbc <xTaskPriorityDisinherit+0xd0>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	693a      	ldr	r2, [r7, #16]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d00a      	beq.n	800bb22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb10:	f383 8811 	msr	BASEPRI, r3
 800bb14:	f3bf 8f6f 	isb	sy
 800bb18:	f3bf 8f4f 	dsb	sy
 800bb1c:	60fb      	str	r3, [r7, #12]
}
 800bb1e:	bf00      	nop
 800bb20:	e7fe      	b.n	800bb20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d10a      	bne.n	800bb40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2e:	f383 8811 	msr	BASEPRI, r3
 800bb32:	f3bf 8f6f 	isb	sy
 800bb36:	f3bf 8f4f 	dsb	sy
 800bb3a:	60bb      	str	r3, [r7, #8]
}
 800bb3c:	bf00      	nop
 800bb3e:	e7fe      	b.n	800bb3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb44:	1e5a      	subs	r2, r3, #1
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d02c      	beq.n	800bbb0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d128      	bne.n	800bbb0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	3304      	adds	r3, #4
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fd fef2 	bl	800994c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb80:	4b0f      	ldr	r3, [pc, #60]	; (800bbc0 <xTaskPriorityDisinherit+0xd4>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d903      	bls.n	800bb90 <xTaskPriorityDisinherit+0xa4>
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb8c:	4a0c      	ldr	r2, [pc, #48]	; (800bbc0 <xTaskPriorityDisinherit+0xd4>)
 800bb8e:	6013      	str	r3, [r2, #0]
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb94:	4613      	mov	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	4413      	add	r3, r2
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	4a09      	ldr	r2, [pc, #36]	; (800bbc4 <xTaskPriorityDisinherit+0xd8>)
 800bb9e:	441a      	add	r2, r3
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	3304      	adds	r3, #4
 800bba4:	4619      	mov	r1, r3
 800bba6:	4610      	mov	r0, r2
 800bba8:	f7fd fe73 	bl	8009892 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bbac:	2301      	movs	r3, #1
 800bbae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbb0:	697b      	ldr	r3, [r7, #20]
	}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3718      	adds	r7, #24
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	2000441c 	.word	0x2000441c
 800bbc0:	200048f8 	.word	0x200048f8
 800bbc4:	20004420 	.word	0x20004420

0800bbc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b088      	sub	sp, #32
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d06a      	beq.n	800bcb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10a      	bne.n	800bbfe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800bbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbec:	f383 8811 	msr	BASEPRI, r3
 800bbf0:	f3bf 8f6f 	isb	sy
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	60fb      	str	r3, [r7, #12]
}
 800bbfa:	bf00      	nop
 800bbfc:	e7fe      	b.n	800bbfc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc02:	683a      	ldr	r2, [r7, #0]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d902      	bls.n	800bc0e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	61fb      	str	r3, [r7, #28]
 800bc0c:	e002      	b.n	800bc14 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc12:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc18:	69fa      	ldr	r2, [r7, #28]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d04b      	beq.n	800bcb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc22:	697a      	ldr	r2, [r7, #20]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d146      	bne.n	800bcb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bc28:	4b25      	ldr	r3, [pc, #148]	; (800bcc0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	69ba      	ldr	r2, [r7, #24]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d10a      	bne.n	800bc48 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800bc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc36:	f383 8811 	msr	BASEPRI, r3
 800bc3a:	f3bf 8f6f 	isb	sy
 800bc3e:	f3bf 8f4f 	dsb	sy
 800bc42:	60bb      	str	r3, [r7, #8]
}
 800bc44:	bf00      	nop
 800bc46:	e7fe      	b.n	800bc46 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	69fa      	ldr	r2, [r7, #28]
 800bc52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	699b      	ldr	r3, [r3, #24]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	db04      	blt.n	800bc66 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	6959      	ldr	r1, [r3, #20]
 800bc6a:	693a      	ldr	r2, [r7, #16]
 800bc6c:	4613      	mov	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4413      	add	r3, r2
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4a13      	ldr	r2, [pc, #76]	; (800bcc4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bc76:	4413      	add	r3, r2
 800bc78:	4299      	cmp	r1, r3
 800bc7a:	d11c      	bne.n	800bcb6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	3304      	adds	r3, #4
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7fd fe63 	bl	800994c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc8a:	4b0f      	ldr	r3, [pc, #60]	; (800bcc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d903      	bls.n	800bc9a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800bc92:	69bb      	ldr	r3, [r7, #24]
 800bc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc96:	4a0c      	ldr	r2, [pc, #48]	; (800bcc8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bc98:	6013      	str	r3, [r2, #0]
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc9e:	4613      	mov	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	4413      	add	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4a07      	ldr	r2, [pc, #28]	; (800bcc4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bca8:	441a      	add	r2, r3
 800bcaa:	69bb      	ldr	r3, [r7, #24]
 800bcac:	3304      	adds	r3, #4
 800bcae:	4619      	mov	r1, r3
 800bcb0:	4610      	mov	r0, r2
 800bcb2:	f7fd fdee 	bl	8009892 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bcb6:	bf00      	nop
 800bcb8:	3720      	adds	r7, #32
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	2000441c 	.word	0x2000441c
 800bcc4:	20004420 	.word	0x20004420
 800bcc8:	200048f8 	.word	0x200048f8

0800bccc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800bcd2:	4b09      	ldr	r3, [pc, #36]	; (800bcf8 <uxTaskResetEventItemValue+0x2c>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	699b      	ldr	r3, [r3, #24]
 800bcd8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcda:	4b07      	ldr	r3, [pc, #28]	; (800bcf8 <uxTaskResetEventItemValue+0x2c>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bce0:	4b05      	ldr	r3, [pc, #20]	; (800bcf8 <uxTaskResetEventItemValue+0x2c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800bce8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800bcea:	687b      	ldr	r3, [r7, #4]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr
 800bcf8:	2000441c 	.word	0x2000441c

0800bcfc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bcfc:	b480      	push	{r7}
 800bcfe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bd00:	4b07      	ldr	r3, [pc, #28]	; (800bd20 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d004      	beq.n	800bd12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bd08:	4b05      	ldr	r3, [pc, #20]	; (800bd20 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd0e:	3201      	adds	r2, #1
 800bd10:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bd12:	4b03      	ldr	r3, [pc, #12]	; (800bd20 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd14:	681b      	ldr	r3, [r3, #0]
	}
 800bd16:	4618      	mov	r0, r3
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	2000441c 	.word	0x2000441c

0800bd24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd2e:	4b21      	ldr	r3, [pc, #132]	; (800bdb4 <prvAddCurrentTaskToDelayedList+0x90>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd34:	4b20      	ldr	r3, [pc, #128]	; (800bdb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	3304      	adds	r3, #4
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7fd fe06 	bl	800994c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd46:	d10a      	bne.n	800bd5e <prvAddCurrentTaskToDelayedList+0x3a>
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d007      	beq.n	800bd5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd4e:	4b1a      	ldr	r3, [pc, #104]	; (800bdb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	3304      	adds	r3, #4
 800bd54:	4619      	mov	r1, r3
 800bd56:	4819      	ldr	r0, [pc, #100]	; (800bdbc <prvAddCurrentTaskToDelayedList+0x98>)
 800bd58:	f7fd fd9b 	bl	8009892 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd5c:	e026      	b.n	800bdac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4413      	add	r3, r2
 800bd64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd66:	4b14      	ldr	r3, [pc, #80]	; (800bdb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68ba      	ldr	r2, [r7, #8]
 800bd6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd6e:	68ba      	ldr	r2, [r7, #8]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d209      	bcs.n	800bd8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd76:	4b12      	ldr	r3, [pc, #72]	; (800bdc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	4b0f      	ldr	r3, [pc, #60]	; (800bdb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	4619      	mov	r1, r3
 800bd82:	4610      	mov	r0, r2
 800bd84:	f7fd fda9 	bl	80098da <vListInsert>
}
 800bd88:	e010      	b.n	800bdac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd8a:	4b0e      	ldr	r3, [pc, #56]	; (800bdc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	4b0a      	ldr	r3, [pc, #40]	; (800bdb8 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	3304      	adds	r3, #4
 800bd94:	4619      	mov	r1, r3
 800bd96:	4610      	mov	r0, r2
 800bd98:	f7fd fd9f 	bl	80098da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd9c:	4b0a      	ldr	r3, [pc, #40]	; (800bdc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d202      	bcs.n	800bdac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bda6:	4a08      	ldr	r2, [pc, #32]	; (800bdc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	6013      	str	r3, [r2, #0]
}
 800bdac:	bf00      	nop
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	200048f4 	.word	0x200048f4
 800bdb8:	2000441c 	.word	0x2000441c
 800bdbc:	200048dc 	.word	0x200048dc
 800bdc0:	200048ac 	.word	0x200048ac
 800bdc4:	200048a8 	.word	0x200048a8
 800bdc8:	20004910 	.word	0x20004910

0800bdcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b08a      	sub	sp, #40	; 0x28
 800bdd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bdd6:	f000 fb07 	bl	800c3e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bdda:	4b1c      	ldr	r3, [pc, #112]	; (800be4c <xTimerCreateTimerTask+0x80>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d021      	beq.n	800be26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bde2:	2300      	movs	r3, #0
 800bde4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bde6:	2300      	movs	r3, #0
 800bde8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bdea:	1d3a      	adds	r2, r7, #4
 800bdec:	f107 0108 	add.w	r1, r7, #8
 800bdf0:	f107 030c 	add.w	r3, r7, #12
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7fd fa99 	bl	800932c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bdfa:	6879      	ldr	r1, [r7, #4]
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	9202      	str	r2, [sp, #8]
 800be02:	9301      	str	r3, [sp, #4]
 800be04:	2302      	movs	r3, #2
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	2300      	movs	r3, #0
 800be0a:	460a      	mov	r2, r1
 800be0c:	4910      	ldr	r1, [pc, #64]	; (800be50 <xTimerCreateTimerTask+0x84>)
 800be0e:	4811      	ldr	r0, [pc, #68]	; (800be54 <xTimerCreateTimerTask+0x88>)
 800be10:	f7fe fe8a 	bl	800ab28 <xTaskCreateStatic>
 800be14:	4603      	mov	r3, r0
 800be16:	4a10      	ldr	r2, [pc, #64]	; (800be58 <xTimerCreateTimerTask+0x8c>)
 800be18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be1a:	4b0f      	ldr	r3, [pc, #60]	; (800be58 <xTimerCreateTimerTask+0x8c>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d001      	beq.n	800be26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800be22:	2301      	movs	r3, #1
 800be24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10a      	bne.n	800be42 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800be2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	613b      	str	r3, [r7, #16]
}
 800be3e:	bf00      	nop
 800be40:	e7fe      	b.n	800be40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800be42:	697b      	ldr	r3, [r7, #20]
}
 800be44:	4618      	mov	r0, r3
 800be46:	3718      	adds	r7, #24
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	2000494c 	.word	0x2000494c
 800be50:	0800cee0 	.word	0x0800cee0
 800be54:	0800bf91 	.word	0x0800bf91
 800be58:	20004950 	.word	0x20004950

0800be5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b08a      	sub	sp, #40	; 0x28
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
 800be68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800be6a:	2300      	movs	r3, #0
 800be6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10a      	bne.n	800be8a <xTimerGenericCommand+0x2e>
	__asm volatile
 800be74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	623b      	str	r3, [r7, #32]
}
 800be86:	bf00      	nop
 800be88:	e7fe      	b.n	800be88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800be8a:	4b1a      	ldr	r3, [pc, #104]	; (800bef4 <xTimerGenericCommand+0x98>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d02a      	beq.n	800bee8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	2b05      	cmp	r3, #5
 800bea2:	dc18      	bgt.n	800bed6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bea4:	f7ff fd9c 	bl	800b9e0 <xTaskGetSchedulerState>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d109      	bne.n	800bec2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800beae:	4b11      	ldr	r3, [pc, #68]	; (800bef4 <xTimerGenericCommand+0x98>)
 800beb0:	6818      	ldr	r0, [r3, #0]
 800beb2:	f107 0110 	add.w	r1, r7, #16
 800beb6:	2300      	movs	r3, #0
 800beb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beba:	f7fd ffcf 	bl	8009e5c <xQueueGenericSend>
 800bebe:	6278      	str	r0, [r7, #36]	; 0x24
 800bec0:	e012      	b.n	800bee8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bec2:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <xTimerGenericCommand+0x98>)
 800bec4:	6818      	ldr	r0, [r3, #0]
 800bec6:	f107 0110 	add.w	r1, r7, #16
 800beca:	2300      	movs	r3, #0
 800becc:	2200      	movs	r2, #0
 800bece:	f7fd ffc5 	bl	8009e5c <xQueueGenericSend>
 800bed2:	6278      	str	r0, [r7, #36]	; 0x24
 800bed4:	e008      	b.n	800bee8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bed6:	4b07      	ldr	r3, [pc, #28]	; (800bef4 <xTimerGenericCommand+0x98>)
 800bed8:	6818      	ldr	r0, [r3, #0]
 800beda:	f107 0110 	add.w	r1, r7, #16
 800bede:	2300      	movs	r3, #0
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	f7fe f8b9 	bl	800a058 <xQueueGenericSendFromISR>
 800bee6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800beea:	4618      	mov	r0, r3
 800beec:	3728      	adds	r7, #40	; 0x28
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	2000494c 	.word	0x2000494c

0800bef8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b088      	sub	sp, #32
 800befc:	af02      	add	r7, sp, #8
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf02:	4b22      	ldr	r3, [pc, #136]	; (800bf8c <prvProcessExpiredTimer+0x94>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	3304      	adds	r3, #4
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7fd fd1b 	bl	800994c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf1c:	f003 0304 	and.w	r3, r3, #4
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d022      	beq.n	800bf6a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	699a      	ldr	r2, [r3, #24]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	18d1      	adds	r1, r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	683a      	ldr	r2, [r7, #0]
 800bf30:	6978      	ldr	r0, [r7, #20]
 800bf32:	f000 f8d1 	bl	800c0d8 <prvInsertTimerInActiveList>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d01f      	beq.n	800bf7c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	9300      	str	r3, [sp, #0]
 800bf40:	2300      	movs	r3, #0
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	2100      	movs	r1, #0
 800bf46:	6978      	ldr	r0, [r7, #20]
 800bf48:	f7ff ff88 	bl	800be5c <xTimerGenericCommand>
 800bf4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d113      	bne.n	800bf7c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf58:	f383 8811 	msr	BASEPRI, r3
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	60fb      	str	r3, [r7, #12]
}
 800bf66:	bf00      	nop
 800bf68:	e7fe      	b.n	800bf68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf70:	f023 0301 	bic.w	r3, r3, #1
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	6a1b      	ldr	r3, [r3, #32]
 800bf80:	6978      	ldr	r0, [r7, #20]
 800bf82:	4798      	blx	r3
}
 800bf84:	bf00      	nop
 800bf86:	3718      	adds	r7, #24
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	20004944 	.word	0x20004944

0800bf90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf98:	f107 0308 	add.w	r3, r7, #8
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f000 f857 	bl	800c050 <prvGetNextExpireTime>
 800bfa2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f000 f803 	bl	800bfb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bfae:	f000 f8d5 	bl	800c15c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bfb2:	e7f1      	b.n	800bf98 <prvTimerTask+0x8>

0800bfb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bfbe:	f7ff f86d 	bl	800b09c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bfc2:	f107 0308 	add.w	r3, r7, #8
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f000 f866 	bl	800c098 <prvSampleTimeNow>
 800bfcc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d130      	bne.n	800c036 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d10a      	bne.n	800bff0 <prvProcessTimerOrBlockTask+0x3c>
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d806      	bhi.n	800bff0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bfe2:	f7ff f869 	bl	800b0b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bfe6:	68f9      	ldr	r1, [r7, #12]
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f7ff ff85 	bl	800bef8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bfee:	e024      	b.n	800c03a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d008      	beq.n	800c008 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bff6:	4b13      	ldr	r3, [pc, #76]	; (800c044 <prvProcessTimerOrBlockTask+0x90>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d101      	bne.n	800c004 <prvProcessTimerOrBlockTask+0x50>
 800c000:	2301      	movs	r3, #1
 800c002:	e000      	b.n	800c006 <prvProcessTimerOrBlockTask+0x52>
 800c004:	2300      	movs	r3, #0
 800c006:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c008:	4b0f      	ldr	r3, [pc, #60]	; (800c048 <prvProcessTimerOrBlockTask+0x94>)
 800c00a:	6818      	ldr	r0, [r3, #0]
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	4619      	mov	r1, r3
 800c016:	f7fe fd53 	bl	800aac0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c01a:	f7ff f84d 	bl	800b0b8 <xTaskResumeAll>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d10a      	bne.n	800c03a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c024:	4b09      	ldr	r3, [pc, #36]	; (800c04c <prvProcessTimerOrBlockTask+0x98>)
 800c026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c02a:	601a      	str	r2, [r3, #0]
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	f3bf 8f6f 	isb	sy
}
 800c034:	e001      	b.n	800c03a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c036:	f7ff f83f 	bl	800b0b8 <xTaskResumeAll>
}
 800c03a:	bf00      	nop
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	20004948 	.word	0x20004948
 800c048:	2000494c 	.word	0x2000494c
 800c04c:	e000ed04 	.word	0xe000ed04

0800c050 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c058:	4b0e      	ldr	r3, [pc, #56]	; (800c094 <prvGetNextExpireTime+0x44>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d101      	bne.n	800c066 <prvGetNextExpireTime+0x16>
 800c062:	2201      	movs	r2, #1
 800c064:	e000      	b.n	800c068 <prvGetNextExpireTime+0x18>
 800c066:	2200      	movs	r2, #0
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d105      	bne.n	800c080 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c074:	4b07      	ldr	r3, [pc, #28]	; (800c094 <prvGetNextExpireTime+0x44>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	60fb      	str	r3, [r7, #12]
 800c07e:	e001      	b.n	800c084 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c080:	2300      	movs	r3, #0
 800c082:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c084:	68fb      	ldr	r3, [r7, #12]
}
 800c086:	4618      	mov	r0, r3
 800c088:	3714      	adds	r7, #20
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	20004944 	.word	0x20004944

0800c098 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c0a0:	f7ff f8a8 	bl	800b1f4 <xTaskGetTickCount>
 800c0a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c0a6:	4b0b      	ldr	r3, [pc, #44]	; (800c0d4 <prvSampleTimeNow+0x3c>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	68fa      	ldr	r2, [r7, #12]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d205      	bcs.n	800c0bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c0b0:	f000 f936 	bl	800c320 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	601a      	str	r2, [r3, #0]
 800c0ba:	e002      	b.n	800c0c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c0c2:	4a04      	ldr	r2, [pc, #16]	; (800c0d4 <prvSampleTimeNow+0x3c>)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	20004954 	.word	0x20004954

0800c0d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
 800c0e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c0f6:	68ba      	ldr	r2, [r7, #8]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d812      	bhi.n	800c124 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	1ad2      	subs	r2, r2, r3
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	699b      	ldr	r3, [r3, #24]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d302      	bcc.n	800c112 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c10c:	2301      	movs	r3, #1
 800c10e:	617b      	str	r3, [r7, #20]
 800c110:	e01b      	b.n	800c14a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c112:	4b10      	ldr	r3, [pc, #64]	; (800c154 <prvInsertTimerInActiveList+0x7c>)
 800c114:	681a      	ldr	r2, [r3, #0]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	3304      	adds	r3, #4
 800c11a:	4619      	mov	r1, r3
 800c11c:	4610      	mov	r0, r2
 800c11e:	f7fd fbdc 	bl	80098da <vListInsert>
 800c122:	e012      	b.n	800c14a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d206      	bcs.n	800c13a <prvInsertTimerInActiveList+0x62>
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	429a      	cmp	r2, r3
 800c132:	d302      	bcc.n	800c13a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c134:	2301      	movs	r3, #1
 800c136:	617b      	str	r3, [r7, #20]
 800c138:	e007      	b.n	800c14a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c13a:	4b07      	ldr	r3, [pc, #28]	; (800c158 <prvInsertTimerInActiveList+0x80>)
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	3304      	adds	r3, #4
 800c142:	4619      	mov	r1, r3
 800c144:	4610      	mov	r0, r2
 800c146:	f7fd fbc8 	bl	80098da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c14a:	697b      	ldr	r3, [r7, #20]
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3718      	adds	r7, #24
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}
 800c154:	20004948 	.word	0x20004948
 800c158:	20004944 	.word	0x20004944

0800c15c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b08e      	sub	sp, #56	; 0x38
 800c160:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c162:	e0ca      	b.n	800c2fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	da18      	bge.n	800c19c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c16a:	1d3b      	adds	r3, r7, #4
 800c16c:	3304      	adds	r3, #4
 800c16e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c172:	2b00      	cmp	r3, #0
 800c174:	d10a      	bne.n	800c18c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17a:	f383 8811 	msr	BASEPRI, r3
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	61fb      	str	r3, [r7, #28]
}
 800c188:	bf00      	nop
 800c18a:	e7fe      	b.n	800c18a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c192:	6850      	ldr	r0, [r2, #4]
 800c194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c196:	6892      	ldr	r2, [r2, #8]
 800c198:	4611      	mov	r1, r2
 800c19a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f2c0 80aa 	blt.w	800c2f8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1aa:	695b      	ldr	r3, [r3, #20]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d004      	beq.n	800c1ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7fd fbc9 	bl	800994c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1ba:	463b      	mov	r3, r7
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7ff ff6b 	bl	800c098 <prvSampleTimeNow>
 800c1c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2b09      	cmp	r3, #9
 800c1c8:	f200 8097 	bhi.w	800c2fa <prvProcessReceivedCommands+0x19e>
 800c1cc:	a201      	add	r2, pc, #4	; (adr r2, 800c1d4 <prvProcessReceivedCommands+0x78>)
 800c1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d2:	bf00      	nop
 800c1d4:	0800c1fd 	.word	0x0800c1fd
 800c1d8:	0800c1fd 	.word	0x0800c1fd
 800c1dc:	0800c1fd 	.word	0x0800c1fd
 800c1e0:	0800c271 	.word	0x0800c271
 800c1e4:	0800c285 	.word	0x0800c285
 800c1e8:	0800c2cf 	.word	0x0800c2cf
 800c1ec:	0800c1fd 	.word	0x0800c1fd
 800c1f0:	0800c1fd 	.word	0x0800c1fd
 800c1f4:	0800c271 	.word	0x0800c271
 800c1f8:	0800c285 	.word	0x0800c285
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c202:	f043 0301 	orr.w	r3, r3, #1
 800c206:	b2da      	uxtb	r2, r3
 800c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c20e:	68ba      	ldr	r2, [r7, #8]
 800c210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c212:	699b      	ldr	r3, [r3, #24]
 800c214:	18d1      	adds	r1, r2, r3
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c21a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c21c:	f7ff ff5c 	bl	800c0d8 <prvInsertTimerInActiveList>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d069      	beq.n	800c2fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c228:	6a1b      	ldr	r3, [r3, #32]
 800c22a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c22c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c234:	f003 0304 	and.w	r3, r3, #4
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d05e      	beq.n	800c2fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c240:	699b      	ldr	r3, [r3, #24]
 800c242:	441a      	add	r2, r3
 800c244:	2300      	movs	r3, #0
 800c246:	9300      	str	r3, [sp, #0]
 800c248:	2300      	movs	r3, #0
 800c24a:	2100      	movs	r1, #0
 800c24c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c24e:	f7ff fe05 	bl	800be5c <xTimerGenericCommand>
 800c252:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c254:	6a3b      	ldr	r3, [r7, #32]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d14f      	bne.n	800c2fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25e:	f383 8811 	msr	BASEPRI, r3
 800c262:	f3bf 8f6f 	isb	sy
 800c266:	f3bf 8f4f 	dsb	sy
 800c26a:	61bb      	str	r3, [r7, #24]
}
 800c26c:	bf00      	nop
 800c26e:	e7fe      	b.n	800c26e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c276:	f023 0301 	bic.w	r3, r3, #1
 800c27a:	b2da      	uxtb	r2, r3
 800c27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c282:	e03a      	b.n	800c2fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c28a:	f043 0301 	orr.w	r3, r3, #1
 800c28e:	b2da      	uxtb	r2, r3
 800c290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c296:	68ba      	ldr	r2, [r7, #8]
 800c298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29e:	699b      	ldr	r3, [r3, #24]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d10a      	bne.n	800c2ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a8:	f383 8811 	msr	BASEPRI, r3
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	f3bf 8f4f 	dsb	sy
 800c2b4:	617b      	str	r3, [r7, #20]
}
 800c2b6:	bf00      	nop
 800c2b8:	e7fe      	b.n	800c2b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2bc:	699a      	ldr	r2, [r3, #24]
 800c2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c0:	18d1      	adds	r1, r2, r3
 800c2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2c8:	f7ff ff06 	bl	800c0d8 <prvInsertTimerInActiveList>
					break;
 800c2cc:	e015      	b.n	800c2fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2d4:	f003 0302 	and.w	r3, r3, #2
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d103      	bne.n	800c2e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c2dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2de:	f000 fbff 	bl	800cae0 <vPortFree>
 800c2e2:	e00a      	b.n	800c2fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2ea:	f023 0301 	bic.w	r3, r3, #1
 800c2ee:	b2da      	uxtb	r2, r3
 800c2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c2f6:	e000      	b.n	800c2fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c2f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2fa:	4b08      	ldr	r3, [pc, #32]	; (800c31c <prvProcessReceivedCommands+0x1c0>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	1d39      	adds	r1, r7, #4
 800c300:	2200      	movs	r2, #0
 800c302:	4618      	mov	r0, r3
 800c304:	f7fd ffd0 	bl	800a2a8 <xQueueReceive>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f47f af2a 	bne.w	800c164 <prvProcessReceivedCommands+0x8>
	}
}
 800c310:	bf00      	nop
 800c312:	bf00      	nop
 800c314:	3730      	adds	r7, #48	; 0x30
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	2000494c 	.word	0x2000494c

0800c320 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b088      	sub	sp, #32
 800c324:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c326:	e048      	b.n	800c3ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c328:	4b2d      	ldr	r3, [pc, #180]	; (800c3e0 <prvSwitchTimerLists+0xc0>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c332:	4b2b      	ldr	r3, [pc, #172]	; (800c3e0 <prvSwitchTimerLists+0xc0>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	3304      	adds	r3, #4
 800c340:	4618      	mov	r0, r3
 800c342:	f7fd fb03 	bl	800994c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6a1b      	ldr	r3, [r3, #32]
 800c34a:	68f8      	ldr	r0, [r7, #12]
 800c34c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c354:	f003 0304 	and.w	r3, r3, #4
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d02e      	beq.n	800c3ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	699b      	ldr	r3, [r3, #24]
 800c360:	693a      	ldr	r2, [r7, #16]
 800c362:	4413      	add	r3, r2
 800c364:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c366:	68ba      	ldr	r2, [r7, #8]
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d90e      	bls.n	800c38c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	68ba      	ldr	r2, [r7, #8]
 800c372:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	68fa      	ldr	r2, [r7, #12]
 800c378:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c37a:	4b19      	ldr	r3, [pc, #100]	; (800c3e0 <prvSwitchTimerLists+0xc0>)
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	3304      	adds	r3, #4
 800c382:	4619      	mov	r1, r3
 800c384:	4610      	mov	r0, r2
 800c386:	f7fd faa8 	bl	80098da <vListInsert>
 800c38a:	e016      	b.n	800c3ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c38c:	2300      	movs	r3, #0
 800c38e:	9300      	str	r3, [sp, #0]
 800c390:	2300      	movs	r3, #0
 800c392:	693a      	ldr	r2, [r7, #16]
 800c394:	2100      	movs	r1, #0
 800c396:	68f8      	ldr	r0, [r7, #12]
 800c398:	f7ff fd60 	bl	800be5c <xTimerGenericCommand>
 800c39c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d10a      	bne.n	800c3ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	603b      	str	r3, [r7, #0]
}
 800c3b6:	bf00      	nop
 800c3b8:	e7fe      	b.n	800c3b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3ba:	4b09      	ldr	r3, [pc, #36]	; (800c3e0 <prvSwitchTimerLists+0xc0>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1b1      	bne.n	800c328 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c3c4:	4b06      	ldr	r3, [pc, #24]	; (800c3e0 <prvSwitchTimerLists+0xc0>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c3ca:	4b06      	ldr	r3, [pc, #24]	; (800c3e4 <prvSwitchTimerLists+0xc4>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a04      	ldr	r2, [pc, #16]	; (800c3e0 <prvSwitchTimerLists+0xc0>)
 800c3d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c3d2:	4a04      	ldr	r2, [pc, #16]	; (800c3e4 <prvSwitchTimerLists+0xc4>)
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	6013      	str	r3, [r2, #0]
}
 800c3d8:	bf00      	nop
 800c3da:	3718      	adds	r7, #24
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	20004944 	.word	0x20004944
 800c3e4:	20004948 	.word	0x20004948

0800c3e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c3ee:	f000 f989 	bl	800c704 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c3f2:	4b15      	ldr	r3, [pc, #84]	; (800c448 <prvCheckForValidListAndQueue+0x60>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d120      	bne.n	800c43c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c3fa:	4814      	ldr	r0, [pc, #80]	; (800c44c <prvCheckForValidListAndQueue+0x64>)
 800c3fc:	f7fd fa1c 	bl	8009838 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c400:	4813      	ldr	r0, [pc, #76]	; (800c450 <prvCheckForValidListAndQueue+0x68>)
 800c402:	f7fd fa19 	bl	8009838 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c406:	4b13      	ldr	r3, [pc, #76]	; (800c454 <prvCheckForValidListAndQueue+0x6c>)
 800c408:	4a10      	ldr	r2, [pc, #64]	; (800c44c <prvCheckForValidListAndQueue+0x64>)
 800c40a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c40c:	4b12      	ldr	r3, [pc, #72]	; (800c458 <prvCheckForValidListAndQueue+0x70>)
 800c40e:	4a10      	ldr	r2, [pc, #64]	; (800c450 <prvCheckForValidListAndQueue+0x68>)
 800c410:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c412:	2300      	movs	r3, #0
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	4b11      	ldr	r3, [pc, #68]	; (800c45c <prvCheckForValidListAndQueue+0x74>)
 800c418:	4a11      	ldr	r2, [pc, #68]	; (800c460 <prvCheckForValidListAndQueue+0x78>)
 800c41a:	2110      	movs	r1, #16
 800c41c:	200a      	movs	r0, #10
 800c41e:	f7fd fb27 	bl	8009a70 <xQueueGenericCreateStatic>
 800c422:	4603      	mov	r3, r0
 800c424:	4a08      	ldr	r2, [pc, #32]	; (800c448 <prvCheckForValidListAndQueue+0x60>)
 800c426:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c428:	4b07      	ldr	r3, [pc, #28]	; (800c448 <prvCheckForValidListAndQueue+0x60>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d005      	beq.n	800c43c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c430:	4b05      	ldr	r3, [pc, #20]	; (800c448 <prvCheckForValidListAndQueue+0x60>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	490b      	ldr	r1, [pc, #44]	; (800c464 <prvCheckForValidListAndQueue+0x7c>)
 800c436:	4618      	mov	r0, r3
 800c438:	f7fe faee 	bl	800aa18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c43c:	f000 f992 	bl	800c764 <vPortExitCritical>
}
 800c440:	bf00      	nop
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	2000494c 	.word	0x2000494c
 800c44c:	2000491c 	.word	0x2000491c
 800c450:	20004930 	.word	0x20004930
 800c454:	20004944 	.word	0x20004944
 800c458:	20004948 	.word	0x20004948
 800c45c:	200049f8 	.word	0x200049f8
 800c460:	20004958 	.word	0x20004958
 800c464:	0800cee8 	.word	0x0800cee8

0800c468 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b08a      	sub	sp, #40	; 0x28
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	607a      	str	r2, [r7, #4]
 800c474:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800c476:	f06f 0301 	mvn.w	r3, #1
 800c47a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c488:	4b06      	ldr	r3, [pc, #24]	; (800c4a4 <xTimerPendFunctionCallFromISR+0x3c>)
 800c48a:	6818      	ldr	r0, [r3, #0]
 800c48c:	f107 0114 	add.w	r1, r7, #20
 800c490:	2300      	movs	r3, #0
 800c492:	683a      	ldr	r2, [r7, #0]
 800c494:	f7fd fde0 	bl	800a058 <xQueueGenericSendFromISR>
 800c498:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800c49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3728      	adds	r7, #40	; 0x28
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	2000494c 	.word	0x2000494c

0800c4a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	3b04      	subs	r3, #4
 800c4b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c4c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	3b04      	subs	r3, #4
 800c4c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	f023 0201 	bic.w	r2, r3, #1
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	3b04      	subs	r3, #4
 800c4d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c4d8:	4a0c      	ldr	r2, [pc, #48]	; (800c50c <pxPortInitialiseStack+0x64>)
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	3b14      	subs	r3, #20
 800c4e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	3b04      	subs	r3, #4
 800c4ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f06f 0202 	mvn.w	r2, #2
 800c4f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	3b20      	subs	r3, #32
 800c4fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3714      	adds	r7, #20
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr
 800c50c:	0800c511 	.word	0x0800c511

0800c510 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c51a:	4b12      	ldr	r3, [pc, #72]	; (800c564 <prvTaskExitError+0x54>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c522:	d00a      	beq.n	800c53a <prvTaskExitError+0x2a>
	__asm volatile
 800c524:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c528:	f383 8811 	msr	BASEPRI, r3
 800c52c:	f3bf 8f6f 	isb	sy
 800c530:	f3bf 8f4f 	dsb	sy
 800c534:	60fb      	str	r3, [r7, #12]
}
 800c536:	bf00      	nop
 800c538:	e7fe      	b.n	800c538 <prvTaskExitError+0x28>
	__asm volatile
 800c53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	60bb      	str	r3, [r7, #8]
}
 800c54c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c54e:	bf00      	nop
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d0fc      	beq.n	800c550 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c556:	bf00      	nop
 800c558:	bf00      	nop
 800c55a:	3714      	adds	r7, #20
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr
 800c564:	20000010 	.word	0x20000010
	...

0800c570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c570:	4b07      	ldr	r3, [pc, #28]	; (800c590 <pxCurrentTCBConst2>)
 800c572:	6819      	ldr	r1, [r3, #0]
 800c574:	6808      	ldr	r0, [r1, #0]
 800c576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57a:	f380 8809 	msr	PSP, r0
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f04f 0000 	mov.w	r0, #0
 800c586:	f380 8811 	msr	BASEPRI, r0
 800c58a:	4770      	bx	lr
 800c58c:	f3af 8000 	nop.w

0800c590 <pxCurrentTCBConst2>:
 800c590:	2000441c 	.word	0x2000441c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c594:	bf00      	nop
 800c596:	bf00      	nop

0800c598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c598:	4808      	ldr	r0, [pc, #32]	; (800c5bc <prvPortStartFirstTask+0x24>)
 800c59a:	6800      	ldr	r0, [r0, #0]
 800c59c:	6800      	ldr	r0, [r0, #0]
 800c59e:	f380 8808 	msr	MSP, r0
 800c5a2:	f04f 0000 	mov.w	r0, #0
 800c5a6:	f380 8814 	msr	CONTROL, r0
 800c5aa:	b662      	cpsie	i
 800c5ac:	b661      	cpsie	f
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	f3bf 8f6f 	isb	sy
 800c5b6:	df00      	svc	0
 800c5b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c5ba:	bf00      	nop
 800c5bc:	e000ed08 	.word	0xe000ed08

0800c5c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b086      	sub	sp, #24
 800c5c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c5c6:	4b46      	ldr	r3, [pc, #280]	; (800c6e0 <xPortStartScheduler+0x120>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a46      	ldr	r2, [pc, #280]	; (800c6e4 <xPortStartScheduler+0x124>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d10a      	bne.n	800c5e6 <xPortStartScheduler+0x26>
	__asm volatile
 800c5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d4:	f383 8811 	msr	BASEPRI, r3
 800c5d8:	f3bf 8f6f 	isb	sy
 800c5dc:	f3bf 8f4f 	dsb	sy
 800c5e0:	613b      	str	r3, [r7, #16]
}
 800c5e2:	bf00      	nop
 800c5e4:	e7fe      	b.n	800c5e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c5e6:	4b3e      	ldr	r3, [pc, #248]	; (800c6e0 <xPortStartScheduler+0x120>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a3f      	ldr	r2, [pc, #252]	; (800c6e8 <xPortStartScheduler+0x128>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d10a      	bne.n	800c606 <xPortStartScheduler+0x46>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	60fb      	str	r3, [r7, #12]
}
 800c602:	bf00      	nop
 800c604:	e7fe      	b.n	800c604 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c606:	4b39      	ldr	r3, [pc, #228]	; (800c6ec <xPortStartScheduler+0x12c>)
 800c608:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	22ff      	movs	r2, #255	; 0xff
 800c616:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c620:	78fb      	ldrb	r3, [r7, #3]
 800c622:	b2db      	uxtb	r3, r3
 800c624:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c628:	b2da      	uxtb	r2, r3
 800c62a:	4b31      	ldr	r3, [pc, #196]	; (800c6f0 <xPortStartScheduler+0x130>)
 800c62c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c62e:	4b31      	ldr	r3, [pc, #196]	; (800c6f4 <xPortStartScheduler+0x134>)
 800c630:	2207      	movs	r2, #7
 800c632:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c634:	e009      	b.n	800c64a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c636:	4b2f      	ldr	r3, [pc, #188]	; (800c6f4 <xPortStartScheduler+0x134>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	3b01      	subs	r3, #1
 800c63c:	4a2d      	ldr	r2, [pc, #180]	; (800c6f4 <xPortStartScheduler+0x134>)
 800c63e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c640:	78fb      	ldrb	r3, [r7, #3]
 800c642:	b2db      	uxtb	r3, r3
 800c644:	005b      	lsls	r3, r3, #1
 800c646:	b2db      	uxtb	r3, r3
 800c648:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c64a:	78fb      	ldrb	r3, [r7, #3]
 800c64c:	b2db      	uxtb	r3, r3
 800c64e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c652:	2b80      	cmp	r3, #128	; 0x80
 800c654:	d0ef      	beq.n	800c636 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c656:	4b27      	ldr	r3, [pc, #156]	; (800c6f4 <xPortStartScheduler+0x134>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f1c3 0307 	rsb	r3, r3, #7
 800c65e:	2b04      	cmp	r3, #4
 800c660:	d00a      	beq.n	800c678 <xPortStartScheduler+0xb8>
	__asm volatile
 800c662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c666:	f383 8811 	msr	BASEPRI, r3
 800c66a:	f3bf 8f6f 	isb	sy
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	60bb      	str	r3, [r7, #8]
}
 800c674:	bf00      	nop
 800c676:	e7fe      	b.n	800c676 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c678:	4b1e      	ldr	r3, [pc, #120]	; (800c6f4 <xPortStartScheduler+0x134>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	021b      	lsls	r3, r3, #8
 800c67e:	4a1d      	ldr	r2, [pc, #116]	; (800c6f4 <xPortStartScheduler+0x134>)
 800c680:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c682:	4b1c      	ldr	r3, [pc, #112]	; (800c6f4 <xPortStartScheduler+0x134>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c68a:	4a1a      	ldr	r2, [pc, #104]	; (800c6f4 <xPortStartScheduler+0x134>)
 800c68c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	b2da      	uxtb	r2, r3
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c696:	4b18      	ldr	r3, [pc, #96]	; (800c6f8 <xPortStartScheduler+0x138>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a17      	ldr	r2, [pc, #92]	; (800c6f8 <xPortStartScheduler+0x138>)
 800c69c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c6a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c6a2:	4b15      	ldr	r3, [pc, #84]	; (800c6f8 <xPortStartScheduler+0x138>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4a14      	ldr	r2, [pc, #80]	; (800c6f8 <xPortStartScheduler+0x138>)
 800c6a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c6ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c6ae:	f000 f8dd 	bl	800c86c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c6b2:	4b12      	ldr	r3, [pc, #72]	; (800c6fc <xPortStartScheduler+0x13c>)
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c6b8:	f000 f8fc 	bl	800c8b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c6bc:	4b10      	ldr	r3, [pc, #64]	; (800c700 <xPortStartScheduler+0x140>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a0f      	ldr	r2, [pc, #60]	; (800c700 <xPortStartScheduler+0x140>)
 800c6c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c6c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c6c8:	f7ff ff66 	bl	800c598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c6cc:	f7fe fe6e 	bl	800b3ac <vTaskSwitchContext>
	prvTaskExitError();
 800c6d0:	f7ff ff1e 	bl	800c510 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3718      	adds	r7, #24
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	e000ed00 	.word	0xe000ed00
 800c6e4:	410fc271 	.word	0x410fc271
 800c6e8:	410fc270 	.word	0x410fc270
 800c6ec:	e000e400 	.word	0xe000e400
 800c6f0:	20004a48 	.word	0x20004a48
 800c6f4:	20004a4c 	.word	0x20004a4c
 800c6f8:	e000ed20 	.word	0xe000ed20
 800c6fc:	20000010 	.word	0x20000010
 800c700:	e000ef34 	.word	0xe000ef34

0800c704 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c704:	b480      	push	{r7}
 800c706:	b083      	sub	sp, #12
 800c708:	af00      	add	r7, sp, #0
	__asm volatile
 800c70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70e:	f383 8811 	msr	BASEPRI, r3
 800c712:	f3bf 8f6f 	isb	sy
 800c716:	f3bf 8f4f 	dsb	sy
 800c71a:	607b      	str	r3, [r7, #4]
}
 800c71c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c71e:	4b0f      	ldr	r3, [pc, #60]	; (800c75c <vPortEnterCritical+0x58>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	3301      	adds	r3, #1
 800c724:	4a0d      	ldr	r2, [pc, #52]	; (800c75c <vPortEnterCritical+0x58>)
 800c726:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c728:	4b0c      	ldr	r3, [pc, #48]	; (800c75c <vPortEnterCritical+0x58>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d10f      	bne.n	800c750 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c730:	4b0b      	ldr	r3, [pc, #44]	; (800c760 <vPortEnterCritical+0x5c>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	b2db      	uxtb	r3, r3
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00a      	beq.n	800c750 <vPortEnterCritical+0x4c>
	__asm volatile
 800c73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c73e:	f383 8811 	msr	BASEPRI, r3
 800c742:	f3bf 8f6f 	isb	sy
 800c746:	f3bf 8f4f 	dsb	sy
 800c74a:	603b      	str	r3, [r7, #0]
}
 800c74c:	bf00      	nop
 800c74e:	e7fe      	b.n	800c74e <vPortEnterCritical+0x4a>
	}
}
 800c750:	bf00      	nop
 800c752:	370c      	adds	r7, #12
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr
 800c75c:	20000010 	.word	0x20000010
 800c760:	e000ed04 	.word	0xe000ed04

0800c764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c76a:	4b12      	ldr	r3, [pc, #72]	; (800c7b4 <vPortExitCritical+0x50>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d10a      	bne.n	800c788 <vPortExitCritical+0x24>
	__asm volatile
 800c772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c776:	f383 8811 	msr	BASEPRI, r3
 800c77a:	f3bf 8f6f 	isb	sy
 800c77e:	f3bf 8f4f 	dsb	sy
 800c782:	607b      	str	r3, [r7, #4]
}
 800c784:	bf00      	nop
 800c786:	e7fe      	b.n	800c786 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c788:	4b0a      	ldr	r3, [pc, #40]	; (800c7b4 <vPortExitCritical+0x50>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	3b01      	subs	r3, #1
 800c78e:	4a09      	ldr	r2, [pc, #36]	; (800c7b4 <vPortExitCritical+0x50>)
 800c790:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c792:	4b08      	ldr	r3, [pc, #32]	; (800c7b4 <vPortExitCritical+0x50>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d105      	bne.n	800c7a6 <vPortExitCritical+0x42>
 800c79a:	2300      	movs	r3, #0
 800c79c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	f383 8811 	msr	BASEPRI, r3
}
 800c7a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c7a6:	bf00      	nop
 800c7a8:	370c      	adds	r7, #12
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	20000010 	.word	0x20000010
	...

0800c7c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c7c0:	f3ef 8009 	mrs	r0, PSP
 800c7c4:	f3bf 8f6f 	isb	sy
 800c7c8:	4b15      	ldr	r3, [pc, #84]	; (800c820 <pxCurrentTCBConst>)
 800c7ca:	681a      	ldr	r2, [r3, #0]
 800c7cc:	f01e 0f10 	tst.w	lr, #16
 800c7d0:	bf08      	it	eq
 800c7d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c7d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7da:	6010      	str	r0, [r2, #0]
 800c7dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c7e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c7e4:	f380 8811 	msr	BASEPRI, r0
 800c7e8:	f3bf 8f4f 	dsb	sy
 800c7ec:	f3bf 8f6f 	isb	sy
 800c7f0:	f7fe fddc 	bl	800b3ac <vTaskSwitchContext>
 800c7f4:	f04f 0000 	mov.w	r0, #0
 800c7f8:	f380 8811 	msr	BASEPRI, r0
 800c7fc:	bc09      	pop	{r0, r3}
 800c7fe:	6819      	ldr	r1, [r3, #0]
 800c800:	6808      	ldr	r0, [r1, #0]
 800c802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c806:	f01e 0f10 	tst.w	lr, #16
 800c80a:	bf08      	it	eq
 800c80c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c810:	f380 8809 	msr	PSP, r0
 800c814:	f3bf 8f6f 	isb	sy
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop
 800c81c:	f3af 8000 	nop.w

0800c820 <pxCurrentTCBConst>:
 800c820:	2000441c 	.word	0x2000441c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c824:	bf00      	nop
 800c826:	bf00      	nop

0800c828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
	__asm volatile
 800c82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c832:	f383 8811 	msr	BASEPRI, r3
 800c836:	f3bf 8f6f 	isb	sy
 800c83a:	f3bf 8f4f 	dsb	sy
 800c83e:	607b      	str	r3, [r7, #4]
}
 800c840:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c842:	f7fe fcf9 	bl	800b238 <xTaskIncrementTick>
 800c846:	4603      	mov	r3, r0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d003      	beq.n	800c854 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c84c:	4b06      	ldr	r3, [pc, #24]	; (800c868 <xPortSysTickHandler+0x40>)
 800c84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c852:	601a      	str	r2, [r3, #0]
 800c854:	2300      	movs	r3, #0
 800c856:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	f383 8811 	msr	BASEPRI, r3
}
 800c85e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c860:	bf00      	nop
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}
 800c868:	e000ed04 	.word	0xe000ed04

0800c86c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c86c:	b480      	push	{r7}
 800c86e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c870:	4b0b      	ldr	r3, [pc, #44]	; (800c8a0 <vPortSetupTimerInterrupt+0x34>)
 800c872:	2200      	movs	r2, #0
 800c874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c876:	4b0b      	ldr	r3, [pc, #44]	; (800c8a4 <vPortSetupTimerInterrupt+0x38>)
 800c878:	2200      	movs	r2, #0
 800c87a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c87c:	4b0a      	ldr	r3, [pc, #40]	; (800c8a8 <vPortSetupTimerInterrupt+0x3c>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a0a      	ldr	r2, [pc, #40]	; (800c8ac <vPortSetupTimerInterrupt+0x40>)
 800c882:	fba2 2303 	umull	r2, r3, r2, r3
 800c886:	099b      	lsrs	r3, r3, #6
 800c888:	4a09      	ldr	r2, [pc, #36]	; (800c8b0 <vPortSetupTimerInterrupt+0x44>)
 800c88a:	3b01      	subs	r3, #1
 800c88c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c88e:	4b04      	ldr	r3, [pc, #16]	; (800c8a0 <vPortSetupTimerInterrupt+0x34>)
 800c890:	2207      	movs	r2, #7
 800c892:	601a      	str	r2, [r3, #0]
}
 800c894:	bf00      	nop
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr
 800c89e:	bf00      	nop
 800c8a0:	e000e010 	.word	0xe000e010
 800c8a4:	e000e018 	.word	0xe000e018
 800c8a8:	20000004 	.word	0x20000004
 800c8ac:	10624dd3 	.word	0x10624dd3
 800c8b0:	e000e014 	.word	0xe000e014

0800c8b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c8b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c8c4 <vPortEnableVFP+0x10>
 800c8b8:	6801      	ldr	r1, [r0, #0]
 800c8ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c8be:	6001      	str	r1, [r0, #0]
 800c8c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c8c2:	bf00      	nop
 800c8c4:	e000ed88 	.word	0xe000ed88

0800c8c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b085      	sub	sp, #20
 800c8cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c8ce:	f3ef 8305 	mrs	r3, IPSR
 800c8d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b0f      	cmp	r3, #15
 800c8d8:	d914      	bls.n	800c904 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c8da:	4a17      	ldr	r2, [pc, #92]	; (800c938 <vPortValidateInterruptPriority+0x70>)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	4413      	add	r3, r2
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c8e4:	4b15      	ldr	r3, [pc, #84]	; (800c93c <vPortValidateInterruptPriority+0x74>)
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	7afa      	ldrb	r2, [r7, #11]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d20a      	bcs.n	800c904 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	607b      	str	r3, [r7, #4]
}
 800c900:	bf00      	nop
 800c902:	e7fe      	b.n	800c902 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c904:	4b0e      	ldr	r3, [pc, #56]	; (800c940 <vPortValidateInterruptPriority+0x78>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c90c:	4b0d      	ldr	r3, [pc, #52]	; (800c944 <vPortValidateInterruptPriority+0x7c>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	429a      	cmp	r2, r3
 800c912:	d90a      	bls.n	800c92a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c918:	f383 8811 	msr	BASEPRI, r3
 800c91c:	f3bf 8f6f 	isb	sy
 800c920:	f3bf 8f4f 	dsb	sy
 800c924:	603b      	str	r3, [r7, #0]
}
 800c926:	bf00      	nop
 800c928:	e7fe      	b.n	800c928 <vPortValidateInterruptPriority+0x60>
	}
 800c92a:	bf00      	nop
 800c92c:	3714      	adds	r7, #20
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	e000e3f0 	.word	0xe000e3f0
 800c93c:	20004a48 	.word	0x20004a48
 800c940:	e000ed0c 	.word	0xe000ed0c
 800c944:	20004a4c 	.word	0x20004a4c

0800c948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b08a      	sub	sp, #40	; 0x28
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c950:	2300      	movs	r3, #0
 800c952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c954:	f7fe fba2 	bl	800b09c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c958:	4b5b      	ldr	r3, [pc, #364]	; (800cac8 <pvPortMalloc+0x180>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d101      	bne.n	800c964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c960:	f000 f920 	bl	800cba4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c964:	4b59      	ldr	r3, [pc, #356]	; (800cacc <pvPortMalloc+0x184>)
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4013      	ands	r3, r2
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	f040 8093 	bne.w	800ca98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d01d      	beq.n	800c9b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c978:	2208      	movs	r2, #8
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4413      	add	r3, r2
 800c97e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f003 0307 	and.w	r3, r3, #7
 800c986:	2b00      	cmp	r3, #0
 800c988:	d014      	beq.n	800c9b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f023 0307 	bic.w	r3, r3, #7
 800c990:	3308      	adds	r3, #8
 800c992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f003 0307 	and.w	r3, r3, #7
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d00a      	beq.n	800c9b4 <pvPortMalloc+0x6c>
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	617b      	str	r3, [r7, #20]
}
 800c9b0:	bf00      	nop
 800c9b2:	e7fe      	b.n	800c9b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d06e      	beq.n	800ca98 <pvPortMalloc+0x150>
 800c9ba:	4b45      	ldr	r3, [pc, #276]	; (800cad0 <pvPortMalloc+0x188>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d869      	bhi.n	800ca98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c9c4:	4b43      	ldr	r3, [pc, #268]	; (800cad4 <pvPortMalloc+0x18c>)
 800c9c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c9c8:	4b42      	ldr	r3, [pc, #264]	; (800cad4 <pvPortMalloc+0x18c>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9ce:	e004      	b.n	800c9da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d903      	bls.n	800c9ec <pvPortMalloc+0xa4>
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1f1      	bne.n	800c9d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c9ec:	4b36      	ldr	r3, [pc, #216]	; (800cac8 <pvPortMalloc+0x180>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d050      	beq.n	800ca98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c9f6:	6a3b      	ldr	r3, [r7, #32]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2208      	movs	r2, #8
 800c9fc:	4413      	add	r3, r2
 800c9fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	6a3b      	ldr	r3, [r7, #32]
 800ca06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0a:	685a      	ldr	r2, [r3, #4]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	1ad2      	subs	r2, r2, r3
 800ca10:	2308      	movs	r3, #8
 800ca12:	005b      	lsls	r3, r3, #1
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d91f      	bls.n	800ca58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	f003 0307 	and.w	r3, r3, #7
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00a      	beq.n	800ca40 <pvPortMalloc+0xf8>
	__asm volatile
 800ca2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2e:	f383 8811 	msr	BASEPRI, r3
 800ca32:	f3bf 8f6f 	isb	sy
 800ca36:	f3bf 8f4f 	dsb	sy
 800ca3a:	613b      	str	r3, [r7, #16]
}
 800ca3c:	bf00      	nop
 800ca3e:	e7fe      	b.n	800ca3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca42:	685a      	ldr	r2, [r3, #4]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	1ad2      	subs	r2, r2, r3
 800ca48:	69bb      	ldr	r3, [r7, #24]
 800ca4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca52:	69b8      	ldr	r0, [r7, #24]
 800ca54:	f000 f908 	bl	800cc68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca58:	4b1d      	ldr	r3, [pc, #116]	; (800cad0 <pvPortMalloc+0x188>)
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	4a1b      	ldr	r2, [pc, #108]	; (800cad0 <pvPortMalloc+0x188>)
 800ca64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca66:	4b1a      	ldr	r3, [pc, #104]	; (800cad0 <pvPortMalloc+0x188>)
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	4b1b      	ldr	r3, [pc, #108]	; (800cad8 <pvPortMalloc+0x190>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d203      	bcs.n	800ca7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca72:	4b17      	ldr	r3, [pc, #92]	; (800cad0 <pvPortMalloc+0x188>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	4a18      	ldr	r2, [pc, #96]	; (800cad8 <pvPortMalloc+0x190>)
 800ca78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7c:	685a      	ldr	r2, [r3, #4]
 800ca7e:	4b13      	ldr	r3, [pc, #76]	; (800cacc <pvPortMalloc+0x184>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	431a      	orrs	r2, r3
 800ca84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ca8e:	4b13      	ldr	r3, [pc, #76]	; (800cadc <pvPortMalloc+0x194>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	3301      	adds	r3, #1
 800ca94:	4a11      	ldr	r2, [pc, #68]	; (800cadc <pvPortMalloc+0x194>)
 800ca96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca98:	f7fe fb0e 	bl	800b0b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca9c:	69fb      	ldr	r3, [r7, #28]
 800ca9e:	f003 0307 	and.w	r3, r3, #7
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00a      	beq.n	800cabc <pvPortMalloc+0x174>
	__asm volatile
 800caa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caaa:	f383 8811 	msr	BASEPRI, r3
 800caae:	f3bf 8f6f 	isb	sy
 800cab2:	f3bf 8f4f 	dsb	sy
 800cab6:	60fb      	str	r3, [r7, #12]
}
 800cab8:	bf00      	nop
 800caba:	e7fe      	b.n	800caba <pvPortMalloc+0x172>
	return pvReturn;
 800cabc:	69fb      	ldr	r3, [r7, #28]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3728      	adds	r7, #40	; 0x28
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	20008658 	.word	0x20008658
 800cacc:	2000866c 	.word	0x2000866c
 800cad0:	2000865c 	.word	0x2000865c
 800cad4:	20008650 	.word	0x20008650
 800cad8:	20008660 	.word	0x20008660
 800cadc:	20008664 	.word	0x20008664

0800cae0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b086      	sub	sp, #24
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d04d      	beq.n	800cb8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800caf2:	2308      	movs	r3, #8
 800caf4:	425b      	negs	r3, r3
 800caf6:	697a      	ldr	r2, [r7, #20]
 800caf8:	4413      	add	r3, r2
 800cafa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	685a      	ldr	r2, [r3, #4]
 800cb04:	4b24      	ldr	r3, [pc, #144]	; (800cb98 <vPortFree+0xb8>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4013      	ands	r3, r2
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d10a      	bne.n	800cb24 <vPortFree+0x44>
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	60fb      	str	r3, [r7, #12]
}
 800cb20:	bf00      	nop
 800cb22:	e7fe      	b.n	800cb22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d00a      	beq.n	800cb42 <vPortFree+0x62>
	__asm volatile
 800cb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb30:	f383 8811 	msr	BASEPRI, r3
 800cb34:	f3bf 8f6f 	isb	sy
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	60bb      	str	r3, [r7, #8]
}
 800cb3e:	bf00      	nop
 800cb40:	e7fe      	b.n	800cb40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	685a      	ldr	r2, [r3, #4]
 800cb46:	4b14      	ldr	r3, [pc, #80]	; (800cb98 <vPortFree+0xb8>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4013      	ands	r3, r2
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d01e      	beq.n	800cb8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d11a      	bne.n	800cb8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	685a      	ldr	r2, [r3, #4]
 800cb5c:	4b0e      	ldr	r3, [pc, #56]	; (800cb98 <vPortFree+0xb8>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	43db      	mvns	r3, r3
 800cb62:	401a      	ands	r2, r3
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb68:	f7fe fa98 	bl	800b09c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	685a      	ldr	r2, [r3, #4]
 800cb70:	4b0a      	ldr	r3, [pc, #40]	; (800cb9c <vPortFree+0xbc>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4413      	add	r3, r2
 800cb76:	4a09      	ldr	r2, [pc, #36]	; (800cb9c <vPortFree+0xbc>)
 800cb78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb7a:	6938      	ldr	r0, [r7, #16]
 800cb7c:	f000 f874 	bl	800cc68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cb80:	4b07      	ldr	r3, [pc, #28]	; (800cba0 <vPortFree+0xc0>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3301      	adds	r3, #1
 800cb86:	4a06      	ldr	r2, [pc, #24]	; (800cba0 <vPortFree+0xc0>)
 800cb88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cb8a:	f7fe fa95 	bl	800b0b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb8e:	bf00      	nop
 800cb90:	3718      	adds	r7, #24
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	2000866c 	.word	0x2000866c
 800cb9c:	2000865c 	.word	0x2000865c
 800cba0:	20008668 	.word	0x20008668

0800cba4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cbaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cbae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cbb0:	4b27      	ldr	r3, [pc, #156]	; (800cc50 <prvHeapInit+0xac>)
 800cbb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f003 0307 	and.w	r3, r3, #7
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d00c      	beq.n	800cbd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	3307      	adds	r3, #7
 800cbc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f023 0307 	bic.w	r3, r3, #7
 800cbca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cbcc:	68ba      	ldr	r2, [r7, #8]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	1ad3      	subs	r3, r2, r3
 800cbd2:	4a1f      	ldr	r2, [pc, #124]	; (800cc50 <prvHeapInit+0xac>)
 800cbd4:	4413      	add	r3, r2
 800cbd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cbdc:	4a1d      	ldr	r2, [pc, #116]	; (800cc54 <prvHeapInit+0xb0>)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cbe2:	4b1c      	ldr	r3, [pc, #112]	; (800cc54 <prvHeapInit+0xb0>)
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	68ba      	ldr	r2, [r7, #8]
 800cbec:	4413      	add	r3, r2
 800cbee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cbf0:	2208      	movs	r2, #8
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	1a9b      	subs	r3, r3, r2
 800cbf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f023 0307 	bic.w	r3, r3, #7
 800cbfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	4a15      	ldr	r2, [pc, #84]	; (800cc58 <prvHeapInit+0xb4>)
 800cc04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc06:	4b14      	ldr	r3, [pc, #80]	; (800cc58 <prvHeapInit+0xb4>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc0e:	4b12      	ldr	r3, [pc, #72]	; (800cc58 <prvHeapInit+0xb4>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	2200      	movs	r2, #0
 800cc14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	68fa      	ldr	r2, [r7, #12]
 800cc1e:	1ad2      	subs	r2, r2, r3
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc24:	4b0c      	ldr	r3, [pc, #48]	; (800cc58 <prvHeapInit+0xb4>)
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	4a0a      	ldr	r2, [pc, #40]	; (800cc5c <prvHeapInit+0xb8>)
 800cc32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	4a09      	ldr	r2, [pc, #36]	; (800cc60 <prvHeapInit+0xbc>)
 800cc3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc3c:	4b09      	ldr	r3, [pc, #36]	; (800cc64 <prvHeapInit+0xc0>)
 800cc3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cc42:	601a      	str	r2, [r3, #0]
}
 800cc44:	bf00      	nop
 800cc46:	3714      	adds	r7, #20
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr
 800cc50:	20004a50 	.word	0x20004a50
 800cc54:	20008650 	.word	0x20008650
 800cc58:	20008658 	.word	0x20008658
 800cc5c:	20008660 	.word	0x20008660
 800cc60:	2000865c 	.word	0x2000865c
 800cc64:	2000866c 	.word	0x2000866c

0800cc68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc70:	4b28      	ldr	r3, [pc, #160]	; (800cd14 <prvInsertBlockIntoFreeList+0xac>)
 800cc72:	60fb      	str	r3, [r7, #12]
 800cc74:	e002      	b.n	800cc7c <prvInsertBlockIntoFreeList+0x14>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	60fb      	str	r3, [r7, #12]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d8f7      	bhi.n	800cc76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	68ba      	ldr	r2, [r7, #8]
 800cc90:	4413      	add	r3, r2
 800cc92:	687a      	ldr	r2, [r7, #4]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d108      	bne.n	800ccaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	685a      	ldr	r2, [r3, #4]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	441a      	add	r2, r3
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	68ba      	ldr	r2, [r7, #8]
 800ccb4:	441a      	add	r2, r3
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d118      	bne.n	800ccf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	4b15      	ldr	r3, [pc, #84]	; (800cd18 <prvInsertBlockIntoFreeList+0xb0>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d00d      	beq.n	800cce6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	685a      	ldr	r2, [r3, #4]
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	441a      	add	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	601a      	str	r2, [r3, #0]
 800cce4:	e008      	b.n	800ccf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cce6:	4b0c      	ldr	r3, [pc, #48]	; (800cd18 <prvInsertBlockIntoFreeList+0xb0>)
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	601a      	str	r2, [r3, #0]
 800ccee:	e003      	b.n	800ccf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ccf8:	68fa      	ldr	r2, [r7, #12]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d002      	beq.n	800cd06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd06:	bf00      	nop
 800cd08:	3714      	adds	r7, #20
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	20008650 	.word	0x20008650
 800cd18:	20008658 	.word	0x20008658

0800cd1c <__libc_init_array>:
 800cd1c:	b570      	push	{r4, r5, r6, lr}
 800cd1e:	4d0d      	ldr	r5, [pc, #52]	; (800cd54 <__libc_init_array+0x38>)
 800cd20:	4c0d      	ldr	r4, [pc, #52]	; (800cd58 <__libc_init_array+0x3c>)
 800cd22:	1b64      	subs	r4, r4, r5
 800cd24:	10a4      	asrs	r4, r4, #2
 800cd26:	2600      	movs	r6, #0
 800cd28:	42a6      	cmp	r6, r4
 800cd2a:	d109      	bne.n	800cd40 <__libc_init_array+0x24>
 800cd2c:	4d0b      	ldr	r5, [pc, #44]	; (800cd5c <__libc_init_array+0x40>)
 800cd2e:	4c0c      	ldr	r4, [pc, #48]	; (800cd60 <__libc_init_array+0x44>)
 800cd30:	f000 f82e 	bl	800cd90 <_init>
 800cd34:	1b64      	subs	r4, r4, r5
 800cd36:	10a4      	asrs	r4, r4, #2
 800cd38:	2600      	movs	r6, #0
 800cd3a:	42a6      	cmp	r6, r4
 800cd3c:	d105      	bne.n	800cd4a <__libc_init_array+0x2e>
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}
 800cd40:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd44:	4798      	blx	r3
 800cd46:	3601      	adds	r6, #1
 800cd48:	e7ee      	b.n	800cd28 <__libc_init_array+0xc>
 800cd4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd4e:	4798      	blx	r3
 800cd50:	3601      	adds	r6, #1
 800cd52:	e7f2      	b.n	800cd3a <__libc_init_array+0x1e>
 800cd54:	0800d378 	.word	0x0800d378
 800cd58:	0800d378 	.word	0x0800d378
 800cd5c:	0800d378 	.word	0x0800d378
 800cd60:	0800d37c 	.word	0x0800d37c

0800cd64 <memcpy>:
 800cd64:	440a      	add	r2, r1
 800cd66:	4291      	cmp	r1, r2
 800cd68:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd6c:	d100      	bne.n	800cd70 <memcpy+0xc>
 800cd6e:	4770      	bx	lr
 800cd70:	b510      	push	{r4, lr}
 800cd72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cd7a:	4291      	cmp	r1, r2
 800cd7c:	d1f9      	bne.n	800cd72 <memcpy+0xe>
 800cd7e:	bd10      	pop	{r4, pc}

0800cd80 <memset>:
 800cd80:	4402      	add	r2, r0
 800cd82:	4603      	mov	r3, r0
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d100      	bne.n	800cd8a <memset+0xa>
 800cd88:	4770      	bx	lr
 800cd8a:	f803 1b01 	strb.w	r1, [r3], #1
 800cd8e:	e7f9      	b.n	800cd84 <memset+0x4>

0800cd90 <_init>:
 800cd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd92:	bf00      	nop
 800cd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd96:	bc08      	pop	{r3}
 800cd98:	469e      	mov	lr, r3
 800cd9a:	4770      	bx	lr

0800cd9c <_fini>:
 800cd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd9e:	bf00      	nop
 800cda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cda2:	bc08      	pop	{r3}
 800cda4:	469e      	mov	lr, r3
 800cda6:	4770      	bx	lr
